{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/anime.min.js","path":"lib/anime.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/live2d-widget/LICENSE","path":"live2d-widget/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/live2d-widget/README.md","path":"live2d-widget/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/live2d-widget/autoload.js","path":"live2d-widget/autoload.js","modified":0,"renderable":1},{"_id":"themes/next/source/live2d-widget/live2d.min.js","path":"live2d-widget/live2d.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/live2d-widget/waifu-tips.js","path":"live2d-widget/waifu-tips.js","modified":0,"renderable":1},{"_id":"themes/next/source/live2d-widget/waifu.css","path":"live2d-widget/waifu.css","modified":0,"renderable":1},{"_id":"themes/next/source/live2d-widget/waifu-tips.json","path":"live2d-widget/waifu-tips.json","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/live2d-widget/assets/screenshot-1.png","path":"live2d-widget/assets/screenshot-1.png","modified":0,"renderable":1},{"_id":"themes/next/source/live2d-widget/assets/screenshot-2.png","path":"live2d-widget/assets/screenshot-2.png","modified":0,"renderable":1},{"_id":"themes/next/source/live2d-widget/assets/screenshot-3.png","path":"live2d-widget/assets/screenshot-3.png","modified":0,"renderable":1},{"_id":"themes/next/source/live2d-widget/demo/login.html","path":"live2d-widget/demo/login.html","modified":0,"renderable":1},{"_id":"themes/next/source/live2d-widget/demo/demo.html","path":"live2d-widget/demo/demo.html","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","path":"lib/font-awesome/css/all.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","path":"lib/font-awesome/webfonts/fa-brands-400.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","path":"lib/font-awesome/webfonts/fa-regular-400.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","path":"lib/font-awesome/webfonts/fa-solid-900.woff2","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/CopyOnWriteArrayList分析.md","hash":"7f2da4af942c84b32eee4449d5ae4ff21b0356a3","modified":1637677156395},{"_id":"source/.DS_Store","hash":"b48c4f7d61a5928be717d4bd654481ff1eab36ee","modified":1637678608863},{"_id":"source/_posts/ArrayList源码分析.md","hash":"8aa7388aa6908dff270d92098de995c4072da794","modified":1637677156395},{"_id":"source/categories/index.md","hash":"b67ae885a2bb57ec0c85739b266959e96bc2d978","modified":1637677156396},{"_id":"source/_posts/Java中字符串分割问题.md","hash":"609dd06603e70d888ba5047f3bf3f15ceb5a5bb1","modified":1637677156395},{"_id":"source/_posts/Executors中的线程池.md","hash":"cd1340760e2c79ca7c38cffa37581b4e37a41ec2","modified":1637677156395},{"_id":"source/_posts/Linux基本操作命令.md","hash":"82af550e1327b575006460d46a5573eafda3e22b","modified":1637677156395},{"_id":"source/_posts/SpringBoot启动时SLF4J警告的一次解决.md","hash":"808bd32ce0934828133fcce4c49c80a7e0bc1d27","modified":1637677156395},{"_id":"source/_posts/SpringBoot项目启动时@Mapper注解相关警告.md","hash":"bb63e9b16861c114381341d7ea8b616119404a4f","modified":1637677156395},{"_id":"source/_posts/SpringCloud中不同模块间调用传参问题.md","hash":"ab0bc90e327f94b718fffab5b628c1de08ba007e","modified":1637677156395},{"_id":"source/_posts/SpringCloud中其他模块事务能否回滚.md","hash":"3ff251aa4cb8eaf811571ce3ee42352f865bba0f","modified":1637677156395},{"_id":"source/_posts/git新建一个分支.md","hash":"3d9d36bc2b1034d7d10d87f659c9b1eae9873f34","modified":1637677156395},{"_id":"source/_posts/hexo搭建.md","hash":"803e297f29e46938106260bb1b2db8af3218b3e9","modified":1637677156395},{"_id":"source/_posts/hugo搭建.md","hash":"244ae07bfb93219ea43861ce7e7d74736407a68e","modified":1637677156396},{"_id":"source/_posts/线程间同步与协作.md","hash":"10ec69d9deb0566438ff8cce718cd0e8a3e92e32","modified":1637677156396},{"_id":"source/_posts/python学习1.md","hash":"0307b001b26da87e8b9ec38deb0929bb72a90c50","modified":1637677156396},{"_id":"source/_posts/单链表基本操作（上）.md","hash":"d4e40f2e8aa1299f10c7e7354d29544581ec12b0","modified":1637677156396},{"_id":"source/_posts/单链表基本操作（下）.md","hash":"96512dc1dca36cfa77bc7e54c841280a858953b8","modified":1637677156396},{"_id":"source/_posts/线程基础机制.md","hash":"139e45b27c5ed2913451f56cbb3fecc989b732d5","modified":1637677156396},{"_id":"source/_posts/python学习2.md","hash":"a4adf6fca7d5b2e727d79aadc54d797285301c46","modified":1637677156396},{"_id":"source/_posts/行为型设计模式.md","hash":"a79a90d55667f02c9dd25d53e4fff861ea4b4e0e","modified":1637679047375},{"_id":"source/_posts/支付系统对于异步通知的处理.md","hash":"c47df2b62a0cae49aa77786e27db91d471deb61c","modified":1637677156396},{"_id":"themes/next/.stylintrc","hash":"2cf4d637b56d8eb423f59656a11f6403aa90f550","modified":1637677156407},{"_id":"themes/next/.travis.yml","hash":"ecca3b919a5b15886e3eca58aa84aafc395590da","modified":1637677156407},{"_id":"themes/next/.editorconfig","hash":"8570735a8d8d034a3a175afd1dd40b39140b3e6a","modified":1637677156405},{"_id":"themes/next/.eslintrc.json","hash":"cc5f297f0322672fe3f684f823bc4659e4a54c41","modified":1637677156405},{"_id":"themes/next/README.md","hash":"9b4b7d66aca47f9c65d6321b14eef48d95c4dff1","modified":1637677156407},{"_id":"themes/next/.gitattributes","hash":"a54f902957d49356376b59287b894b1a3d7a003f","modified":1637677156405},{"_id":"themes/next/LICENSE.md","hash":"18144d8ed58c75af66cb419d54f3f63374cd5c5b","modified":1637677156407},{"_id":"themes/next/.gitignore","hash":"56f3470755c20311ddd30d421b377697a6e5e68b","modified":1637677156407},{"_id":"themes/next/package.json","hash":"62fad6de02adbbba9fb096cbe2dcc15fe25f2435","modified":1637677156416},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1637677156407},{"_id":"themes/next/_config.yml","hash":"3fe3cd7d37c4fe29db17cfc9ba5d24c846d29824","modified":1637677156407},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"1a435c20ae8fa183d49bbf96ac956f7c6c25c8af","modified":1637677156406},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"aa4cb7aff595ca628cb58160ee1eee117989ec4e","modified":1637677156405},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"e554931b98f251fd49ff1d2443006d9ea2c20461","modified":1637677156406},{"_id":"themes/next/.github/config.yml","hash":"1d3f4e8794986817c0fead095c74f756d45f91ed","modified":1637677156406},{"_id":"themes/next/.github/release-drafter.yml","hash":"3cc10ce75ecc03a5ce86b00363e2a17eb65d15ea","modified":1637677156406},{"_id":"themes/next/gulpfile.js","hash":"1b4fc262b89948937b9e3794de812a7c1f2f3592","modified":1637677156409},{"_id":"themes/next/.github/issue_label_bot.yaml","hash":"fca600ddef6f80c5e61aeed21722d191e5606e5b","modified":1637677156406},{"_id":"themes/next/.github/mergeable.yml","hash":"0ee56e23bbc71e1e76427d2bd255a9879bd36e22","modified":1637677156406},{"_id":"themes/next/.github/support.yml","hash":"d75db6ffa7b4ca3b865a925f9de9aef3fc51925c","modified":1637677156406},{"_id":"themes/next/.github/lock.yml","hash":"61173b9522ebac13db2c544e138808295624f7fd","modified":1637677156406},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"c7a994b9542040317d8f99affa1405c143a94a38","modified":1637677156407},{"_id":"themes/next/docs/AUTHORS.md","hash":"10135a2f78ac40e9f46b3add3e360c025400752f","modified":1637677156408},{"_id":"themes/next/.github/issue-close-app.yml","hash":"7cba457eec47dbfcfd4086acd1c69eaafca2f0cd","modified":1637677156406},{"_id":"themes/next/.github/stale.yml","hash":"fdf82de9284f8bc8e0b0712b4cc1cb081a94de59","modified":1637677156406},{"_id":"themes/next/docs/DATA-FILES.md","hash":"cddbdc91ee9e65c37a50bec12194f93d36161616","modified":1637677156408},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"94dc3404ccb0e5f663af2aa883c1af1d6eae553d","modified":1637677156408},{"_id":"themes/next/docs/INSTALLATION.md","hash":"af88bcce035780aaa061261ed9d0d6c697678618","modified":1637677156408},{"_id":"themes/next/docs/LICENSE.txt","hash":"368bf2c29d70f27d8726dd914f1b3211cae4bbab","modified":1637677156408},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1637677156407},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"8b6e4b2c9cfcb969833092bdeaed78534082e3e6","modified":1637677156408},{"_id":"themes/next/languages/de.yml","hash":"74c59f2744217003b717b59d96e275b54635abf5","modified":1637677156409},{"_id":"themes/next/docs/MATH.md","hash":"d645b025ec7fb9fbf799b9bb76af33b9f5b9ed93","modified":1637677156408},{"_id":"themes/next/languages/ar.yml","hash":"9815e84e53d750c8bcbd9193c2d44d8d910e3444","modified":1637677156409},{"_id":"themes/next/languages/default.yml","hash":"45bc5118828bdc72dcaa25282cd367c8622758cb","modified":1637677156409},{"_id":"themes/next/languages/es.yml","hash":"c64cf05f356096f1464b4b1439da3c6c9b941062","modified":1637677156410},{"_id":"themes/next/languages/en.yml","hash":"45bc5118828bdc72dcaa25282cd367c8622758cb","modified":1637677156410},{"_id":"themes/next/languages/fa.yml","hash":"3676b32fda37e122f3c1a655085a1868fb6ad66b","modified":1637677156410},{"_id":"themes/next/languages/hu.yml","hash":"b1ebb77a5fd101195b79f94de293bcf9001d996f","modified":1637677156410},{"_id":"themes/next/languages/it.yml","hash":"44759f779ce9c260b895532de1d209ad4bd144bf","modified":1637677156410},{"_id":"themes/next/languages/fr.yml","hash":"752bf309f46a2cd43890b82300b342d7218d625f","modified":1637677156410},{"_id":"themes/next/languages/ja.yml","hash":"0cf0baa663d530f22ff380a051881216d6adcdd8","modified":1637677156410},{"_id":"themes/next/languages/id.yml","hash":"572ed855d47aafe26f58c73b1394530754881ec2","modified":1637677156410},{"_id":"themes/next/languages/ko.yml","hash":"0feea9e43cd399f3610b94d755a39fff1d371e97","modified":1637677156410},{"_id":"themes/next/languages/nl.yml","hash":"5af3473d9f22897204afabc08bb984b247493330","modified":1637677156410},{"_id":"themes/next/languages/pt-BR.yml","hash":"67555b1ba31a0242b12fc6ce3add28531160e35b","modified":1637677156410},{"_id":"themes/next/languages/ru.yml","hash":"e993d5ca072f7f6887e30fc0c19b4da791ca7a88","modified":1637677156410},{"_id":"themes/next/languages/pt.yml","hash":"718d131f42f214842337776e1eaddd1e9a584054","modified":1637677156410},{"_id":"themes/next/languages/tr.yml","hash":"fe793f4c2608e3f85f0b872fd0ac1fb93e6155e2","modified":1637677156410},{"_id":"themes/next/languages/uk.yml","hash":"3a6d635b1035423b22fc86d9455dba9003724de9","modified":1637677156410},{"_id":"themes/next/languages/zh-CN.yml","hash":"a1f15571ee7e1e84e3cc0985c3ec4ba1a113f6f8","modified":1637677156411},{"_id":"themes/next/languages/vi.yml","hash":"93393b01df148dcbf0863f6eee8e404e2d94ef9e","modified":1637677156411},{"_id":"themes/next/languages/zh-TW.yml","hash":"8c09da7c4ec3fca2c6ee897b2eea260596a2baa1","modified":1637677156411},{"_id":"themes/next/languages/zh-HK.yml","hash":"3789f94010f948e9f23e21235ef422a191753c65","modified":1637677156411},{"_id":"themes/next/layout/_layout.swig","hash":"b042f2c6047d985d8d9bf5026789007cad6a35ee","modified":1637677156411},{"_id":"themes/next/layout/archive.swig","hash":"e4e31317a8df68f23156cfc49e9b1aa9a12ad2ed","modified":1637677156415},{"_id":"themes/next/layout/page.swig","hash":"db581bdeac5c75fabb0f17d7c5e746e47f2a9168","modified":1637677156415},{"_id":"themes/next/layout/index.swig","hash":"7f403a18a68e6d662ae3e154b2c1d3bbe0801a23","modified":1637677156415},{"_id":"themes/next/layout/category.swig","hash":"1bde61cf4d2d171647311a0ac2c5c7933f6a53b0","modified":1637677156415},{"_id":"themes/next/scripts/renderer.js","hash":"49a65df2028a1bc24814dc72fa50d52231ca4f05","modified":1637677156417},{"_id":"themes/next/layout/tag.swig","hash":"0dfb653bd5de980426d55a0606d1ab122bd8c017","modified":1637677156416},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"12d99fb8b62bd9e34d9672f306c9ae4ace7e053e","modified":1637677156406},{"_id":"themes/next/layout/post.swig","hash":"2f6d992ced7e067521fdce05ffe4fd75481f41c5","modified":1637677156415},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"c3e6b8196c983c40fd140bdeca012d03e6e86967","modified":1637677156406},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"0bd2d696f62a997a11a7d84fec0130122234174e","modified":1637677156408},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"9c4fe2873123bf9ceacab5c50d17d8a0f1baef27","modified":1637677156408},{"_id":"themes/next/.github/ISSUE_TEMPLATE/question.md","hash":"53df7d537e26aaf062d70d86835c5fd8f81412f3","modified":1637677156406},{"_id":"themes/next/.github/ISSUE_TEMPLATE/other.md","hash":"d3efc0df0275c98440e69476f733097916a2d579","modified":1637677156406},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"5237a368ab99123749d724b6c379415f2c142a96","modified":1637677156408},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"34b88784ec120dfdc20fa82aadeb5f64ef614d14","modified":1637677156409},{"_id":"themes/next/docs/ru/README.md","hash":"85dd68ed1250897a8e4a444a53a68c1d49eb7e11","modified":1637677156408},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"579c7bd8341873fb8be4732476d412814f1a3df7","modified":1637677156409},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"fb23b85db6f7d8279d73ae1f41631f92f64fc864","modified":1637677156409},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"ca1030efdfca5e20f9db2e7a428998e66a24c0d0","modified":1637677156409},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"d3f03be036b75dc71cf3c366cd75aee7c127c874","modified":1637677156409},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"8b18f84503a361fc712b0fe4d4568e2f086ca97d","modified":1637677156409},{"_id":"themes/next/docs/zh-CN/README.md","hash":"c038629ff8f3f24e8593c4c8ecf0bef3a35c750d","modified":1637677156409},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"b92585d251f1f9ebe401abb5d932cb920f9b8b10","modified":1637677156409},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"d9ce7331c1236bbe0a551d56cef2405e47e65325","modified":1637677156409},{"_id":"themes/next/layout/_macro/post.swig","hash":"090b5a9b6fca8e968178004cbd6cff205b7eba57","modified":1637677156411},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"9c8dc0b8170679cdc1ee9ee8dbcbaebf3f42897b","modified":1637677156411},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"71655ca21907e9061b6e8ac52d0d8fbf54d0062b","modified":1637677156411},{"_id":"themes/next/layout/_partials/comments.swig","hash":"db6ab5421b5f4b7cb32ac73ad0e053fdf065f83e","modified":1637677156411},{"_id":"themes/next/layout/_partials/languages.swig","hash":"ba9e272f1065b8f0e8848648caa7dea3f02c6be1","modified":1637677156412},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9876dbfc15713c7a47d4bcaa301f4757bd978269","modified":1637677156412},{"_id":"themes/next/layout/_partials/footer.swig","hash":"e5a2bdf45fde7cea9cb03993f5a0fd960326ed5d","modified":1637677156411},{"_id":"themes/next/layout/_partials/widgets.swig","hash":"83a40ce83dfd5cada417444fb2d6f5470aae6bb0","modified":1637677156413},{"_id":"themes/next/layout/_scripts/index.swig","hash":"cea942b450bcb0f352da78d76dc6d6f1d23d5029","modified":1637677156413},{"_id":"themes/next/layout/_scripts/pjax.swig","hash":"4d2c93c66e069852bb0e3ea2e268d213d07bfa3f","modified":1637677156413},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"d1f2bfde6f1da51a2b35a7ab9e7e8eb6eefd1c6b","modified":1637677156413},{"_id":"themes/next/layout/_scripts/three.swig","hash":"a4f42f2301866bd25a784a2281069d8b66836d0b","modified":1637677156413},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"ef38c213679e7b6d2a4116f56c9e55d678446069","modified":1637677156413},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"b782eb2e34c0c15440837040b5d65b093ab6ec04","modified":1637677156414},{"_id":"themes/next/layout/_third-party/quicklink.swig","hash":"311e5eceec9e949f1ea8d623b083cec0b8700ff2","modified":1637677156414},{"_id":"themes/next/layout/_third-party/index.swig","hash":"70c3c01dd181de81270c57f3d99b6d8f4c723404","modified":1637677156414},{"_id":"themes/next/source/css/main.styl","hash":"a3a3bbb5a973052f0186b3523911cb2539ff7b88","modified":1637677156425},{"_id":"themes/next/source/css/_mixins.styl","hash":"e31a557f8879c2f4d8d5567ee1800b3e03f91f6e","modified":1637677156423},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"2731e262a6b88eaee2a3ca61e6a3583a7f594702","modified":1637677156415},{"_id":"themes/next/source/css/_colors.styl","hash":"a8442520f719d3d7a19811cb3b85bcfd4a596e1f","modified":1637677156418},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1637677156425},{"_id":"themes/next/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1637677156425},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1637677156425},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1637677156425},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1637677156425},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1637677156425},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1637677156425},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1637677156425},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1637677156425},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1637677156426},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1637677156426},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1637677156426},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1637677156426},{"_id":"themes/next/source/js/local-search.js","hash":"35ccf100d8f9c0fd6bfbb7fa88c2a76c42a69110","modified":1637677156426},{"_id":"themes/next/source/js/bookmark.js","hash":"9734ebcb9b83489686f5c2da67dc9e6157e988ad","modified":1637677156426},{"_id":"themes/next/source/js/algolia-search.js","hash":"498d233eb5c7af6940baf94c1a1c36fdf1dd2636","modified":1637677156426},{"_id":"themes/next/source/js/next-boot.js","hash":"a1b0636423009d4a4e4cea97bcbf1842bfab582c","modified":1637677156426},{"_id":"themes/next/source/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1637677156426},{"_id":"themes/next/source/js/utils.js","hash":"730cca7f164eaf258661a61ff3f769851ff1e5da","modified":1637677156426},{"_id":"themes/next/source/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1637677156427},{"_id":"themes/next/source/live2d-widget/README.md","hash":"147fa2c0e75f9d1c68a963c18871cb39e4176ced","modified":1637677156428},{"_id":"themes/next/source/live2d-widget/autoload.js","hash":"16e35e99b188f2485058a1f52e52d66ef3362bf0","modified":1637677156430},{"_id":"themes/next/source/live2d-widget/LICENSE","hash":"31a3d460bb3c7d98845187c716a30db81c44b615","modified":1637677156428},{"_id":"themes/next/scripts/events/index.js","hash":"5743cde07f3d2aa11532a168a652e52ec28514fd","modified":1637677156416},{"_id":"themes/next/source/live2d-widget/waifu-tips.js","hash":"f8bdc91fa1e51d46dc18e04174c63034d68299bf","modified":1637677156431},{"_id":"themes/next/scripts/filters/front-matter.js","hash":"703bdd142a671b4b67d3d9dfb4a19d1dd7e7e8f7","modified":1637677156417},{"_id":"themes/next/scripts/filters/locals.js","hash":"b193a936ee63451f09f8886343dcfdca577c0141","modified":1637677156417},{"_id":"themes/next/scripts/filters/minify.js","hash":"19985723b9f677ff775f3b17dcebf314819a76ac","modified":1637677156417},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"aec50ed57b9d5d3faf2db3c88374f107203617e0","modified":1637677156417},{"_id":"themes/next/scripts/filters/post.js","hash":"44ba9b1c0bdda57590b53141306bb90adf0678db","modified":1637677156417},{"_id":"themes/next/scripts/helpers/engine.js","hash":"bdb424c3cc0d145bd0c6015bb1d2443c8a9c6cda","modified":1637677156417},{"_id":"themes/next/scripts/helpers/font.js","hash":"40cf00e9f2b7aa6e5f33d412e03ed10304b15fd7","modified":1637677156417},{"_id":"themes/next/source/live2d-widget/waifu-tips.json","hash":"13b4bb215ff7438c440b80a24ae1b4523ebefcfd","modified":1637677156431},{"_id":"themes/next/scripts/helpers/next-config.js","hash":"5e11f30ddb5093a88a687446617a46b048fa02e5","modified":1637677156417},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"958e86b2bd24e4fdfcbf9ce73e998efe3491a71f","modified":1637677156417},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"94e0bbc7999b359baa42fa3731bdcf89c79ae2b3","modified":1637677156417},{"_id":"themes/next/scripts/tags/button.js","hash":"8c6b45f36e324820c919a822674703769e6da32c","modified":1637677156417},{"_id":"themes/next/source/live2d-widget/waifu.css","hash":"7b0ef41399802acd71b3e66ad9234ca66d76c049","modified":1637677156431},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"d902fd313e8d35c3cc36f237607c2a0536c9edf1","modified":1637677156417},{"_id":"themes/next/scripts/tags/note.js","hash":"0a02bb4c15aec41f6d5f1271cdb5c65889e265d9","modified":1637677156418},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"f1826ade2d135e2f60e2d95cb035383685b3370c","modified":1637677156417},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"983c6c4adea86160ecc0ba2204bc312aa338121d","modified":1637677156418},{"_id":"themes/next/scripts/tags/pdf.js","hash":"8c613b39e7bff735473e35244b5629d02ee20618","modified":1637677156418},{"_id":"themes/next/scripts/tags/video.js","hash":"e5ff4c44faee604dd3ea9db6b222828c4750c227","modified":1637677156418},{"_id":"themes/next/scripts/tags/label.js","hash":"fc5b267d903facb7a35001792db28b801cccb1f8","modified":1637677156418},{"_id":"themes/next/scripts/tags/tabs.js","hash":"93d8a734a3035c1d3f04933167b500517557ba3e","modified":1637677156418},{"_id":"themes/next/layout/_partials/header/menu-item.swig","hash":"9440d8a3a181698b80e1fa47f5104f4565d8cdf3","modified":1637677156412},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"000bad572d76ee95d9c0a78f9ccdc8d97cc7d4b4","modified":1637677156411},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"c70f8e71e026e878a4e9d5ab3bbbf9b0b23c240c","modified":1637677156411},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"810d544019e4a8651b756dd23e5592ee851eda71","modified":1637677156411},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"7dbe93b8297b746afb89700b4d29289556e85267","modified":1637677156411},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"d31f896680a6c2f2c3f5128b4d4dd46c87ce2130","modified":1637677156412},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"ae2261bea836581918a1c2b0d1028a78718434e0","modified":1637677156412},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"c851717497ca64789f2176c9ecd1dedab237b752","modified":1637677156412},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"9b7a66791d7822c52117fe167612265356512477","modified":1637677156412},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"954ad71536b6eb08bd1f30ac6e2f5493b69d1c04","modified":1637677156412},{"_id":"themes/next/layout/_partials/post/post-followme.swig","hash":"ceba16b9bd3a0c5c8811af7e7e49d0f9dcb2f41e","modified":1637677156412},{"_id":"themes/next/layout/_partials/post/post-footer.swig","hash":"8f14f3f8a1b2998d5114cc56b680fb5c419a6b07","modified":1637677156412},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"f79c44692451db26efce704813f7a8872b7e63a0","modified":1637677156412},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"48430bd03b8f19c9b8cdb2642005ed67d56c6e0b","modified":1637677156412},{"_id":"themes/next/layout/_partials/post/post-reward.swig","hash":"2b1a73556595c37951e39574df5a3f20b2edeaef","modified":1637677156412},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"f48a6a8eba04eb962470ce76dd731e13074d4c45","modified":1637677156412},{"_id":"themes/next/layout/_partials/sidebar/site-overview.swig","hash":"c46849e0af8f8fb78baccd40d2af14df04a074af","modified":1637677156413},{"_id":"themes/next/layout/_scripts/pages/schedule.swig","hash":"077b5d66f6309f2e7dcf08645058ff2e03143e6c","modified":1637677156413},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"2be50f9bfb1c56b85b3b6910a7df27f51143632c","modified":1637677156412},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1637677156413},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1637677156413},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1637677156413},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"1472cabb0181f60a6a0b7fec8899a4d03dfb2040","modified":1637677156414},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"5adea065641e8c55994dd2328ddae53215604928","modified":1637677156414},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1637677156413},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"2fa2b51d56bfac6a1ea76d651c93b9c20b01c09b","modified":1637677156413},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"4790058691b7d36cf6d2d6b4e93795a7b8d608ad","modified":1637677156413},{"_id":"themes/next/layout/_third-party/chat/chatra.swig","hash":"f910618292c63871ca2e6c6e66c491f344fa7b1f","modified":1637677156414},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"f39a5bf3ce9ee9adad282501235e0c588e4356ec","modified":1637677156414},{"_id":"themes/next/layout/_third-party/chat/tidio.swig","hash":"cba0e6e0fad08568a9e74ba9a5bee5341cfc04c1","modified":1637677156414},{"_id":"themes/next/layout/_third-party/comments/disqusjs.swig","hash":"82f5b6822aa5ec958aa987b101ef860494c6cf1f","modified":1637677156414},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b14908644225d78c864cd0a9b60c52407de56183","modified":1637677156414},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"be0a8eccf1f6dc21154af297fc79555343031277","modified":1637677156414},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"6c5976621efd5db5f7c4c6b4f11bc79d6554885f","modified":1637677156414},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"f7a9eca599a682479e8ca863db59be7c9c7508c8","modified":1637677156414},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"d6ceb70648555338a80ae5724b778c8c58d7060d","modified":1637677156414},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"4791c977a730f29c846efcf6c9c15131b9400ead","modified":1637677156414},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"ecf751321e799f0fb3bf94d049e535130e2547aa","modified":1637677156414},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"d35a999d67f4c302f76fdf13744ceef3c6506481","modified":1637677156415},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"767b6c714c22588bcd26ba70b0fc19b6810cbacd","modified":1637677156415},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.swig","hash":"4b1986e43d6abce13450d2b41a736dd6a5620a10","modified":1637677156415},{"_id":"themes/next/layout/_third-party/search/swiftype.swig","hash":"ba0dbc06b9d244073a1c681ff7a722dcbf920b51","modified":1637677156415},{"_id":"themes/next/layout/_third-party/statistics/firestore.swig","hash":"b26ac2bfbe91dd88267f8b96aee6bb222b265b7a","modified":1637677156415},{"_id":"themes/next/layout/_third-party/statistics/cnzz-analytics.swig","hash":"a17ace37876822327a2f9306a472974442c9005d","modified":1637677156415},{"_id":"themes/next/layout/_third-party/statistics/index.swig","hash":"5f6a966c509680dbfa70433f9d658cee59c304d7","modified":1637677156415},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.swig","hash":"d56d5af427cdfecc33a0f62ee62c056b4e33d095","modified":1637677156415},{"_id":"themes/next/layout/_third-party/tags/pdf.swig","hash":"d30b0e255a8092043bac46441243f943ed6fb09b","modified":1637677156415},{"_id":"themes/next/layout/_third-party/tags/mermaid.swig","hash":"f3c43664a071ff3c0b28bd7e59b5523446829576","modified":1637677156415},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"f70be8e229da7e1715c11dd0e975a2e71e453ac8","modified":1637677156424},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"f4e694e5db81e57442c7e34505a416d818b3044a","modified":1637677156424},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"612ec843372dae709acb17112c1145a53450cc59","modified":1637677156424},{"_id":"themes/next/source/js/schemes/muse.js","hash":"1eb9b88103ddcf8827b1a7cbc56471a9c5592d53","modified":1637677156426},{"_id":"themes/next/source/css/_variables/base.styl","hash":"818508748b7a62e02035e87fe58e75b603ed56dc","modified":1637677156425},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"62df49459d552bbf73841753da8011a1f5e875c8","modified":1637677156424},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1637677156428},{"_id":"themes/next/scripts/events/lib/injects-point.js","hash":"6661c1c91c7cbdefc6a5e6a034b443b8811235a1","modified":1637677156416},{"_id":"themes/next/source/js/schemes/pisces.js","hash":"0ac5ce155bc58c972fe21c4c447f85e6f8755c62","modified":1637677156426},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1637677156427},{"_id":"themes/next/scripts/events/lib/config.js","hash":"d34c6040b13649714939f59be5175e137de65ede","modified":1637677156416},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"f233d8d0103ae7f9b861344aa65c1a3c1de8a845","modified":1637677156416},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"a54708fd9309b4357c423a3730eb67f395344a5e","modified":1637677156416},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"2486f3e0150c753e5f3af1a3665d074704b8ee2c","modified":1637677156416},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"7f8b92913d21070b489457fa5ed996d2a55f2c32","modified":1637677156416},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"e51dc3072c1ba0ea3008f09ecae8b46242ec6021","modified":1637677156416},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"4c0c99c7e0f00849003dfce02a131104fb671137","modified":1637677156416},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"7f2d93af012c1e14b8596fecbfc7febb43d9b7f5","modified":1637677156416},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"d5fefc31fba4ab0188305b1af1feb61da49fdeb0","modified":1637677156416},{"_id":"themes/next/source/live2d-widget/assets/screenshot-1.png","hash":"4bd4d97a1fcaa5deb3cea1c0a102a895a15af32f","modified":1637677156428},{"_id":"themes/next/scripts/filters/comment/valine.js","hash":"6cbd85f9433c06bae22225ccf75ac55e04f2d106","modified":1637677156416},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"ca5e70662dcfb261c25191cc5db5084dcf661c76","modified":1637677156418},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"a47725574e1bee3bc3b63b0ff2039cc982b17eff","modified":1637677156418},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"8e7b57a72e757cf95278239641726bb2d5b869d1","modified":1637677156418},{"_id":"themes/next/source/live2d-widget/demo/login.html","hash":"595ff5297e8dd9b6fb99759c1f49f2cacda0c5c4","modified":1637677156430},{"_id":"themes/next/source/live2d-widget/demo/demo.html","hash":"2617b8aa4c4728d38a8f062465304e5433056abc","modified":1637677156430},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"681d33e3bc85bdca407d93b134c089264837378c","modified":1637677156421},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"2e3bf7baf383c9073ec5e67f157d3cb3823c0957","modified":1637677156420},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"0b2c4b78eead410020d7c4ded59c75592a648df8","modified":1637677156422},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"a1690e035b505d28bdef2b4424c13fc6312ab049","modified":1637677156421},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"a2e9e00962e43e98ec2614d6d248ef1773bb9b78","modified":1637677156422},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"b1f0fab7344a20ed6748b04065b141ad423cf4d9","modified":1637677156422},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":1637677156422},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"8f58570a1bbc34c4989a47a1b7d42a8030f38b06","modified":1637677156422},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1637677156422},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"179e33b8ac7f4d8a8e76736a7e4f965fe9ab8b42","modified":1637677156423},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"18ce72d90459c9aa66910ac64eae115f2dde3767","modified":1637677156422},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"7785bd756e0c4acede3a47fec1ed7b55988385a5","modified":1637677156423},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"f0131db6275ceaecae7e1a6a3798b8f89f6c850d","modified":1637677156424},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"93db5dafe9294542a6b5f647643cb9deaced8e06","modified":1637677156424},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"2b2e7b5cea7783c9c8bb92655e26a67c266886f0","modified":1637677156424},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"4d1c17345d2d39ef7698f7acf82dfc0f59308c34","modified":1637677156424},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1637677156424},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1637677156424},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"e282df938bd029f391c466168d0e68389978f120","modified":1637677156424},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"70a4324b70501132855b5e59029acfc5d3da1ebd","modified":1637677156424},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"44f47c88c06d89d06f220f102649057118715828","modified":1637677156424},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"e740deadcfc4f29c5cb01e40f9df6277262ba4e3","modified":1637677156424},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1637677156424},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"85da2f3006f4bef9a2199416ecfab4d288f848c4","modified":1637677156424},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"bb7ace23345364eb14983e860a7172e1683a4c94","modified":1637677156423},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"f6516d0f7d89dc7b6c6e143a5af54b926f585d82","modified":1637677156423},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"6136da4bbb7e70cec99f5c7ae8c7e74f5e7c261a","modified":1637677156423},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"7104b9cef90ca3b140d7a7afcf15540a250218fc","modified":1637677156423},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"a717969829fa6ef88225095737df3f8ee86c286b","modified":1637677156423},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1637677156427},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1637677156427},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"fafc96c86926b22afba8bb9418c05e6afbc05a57","modified":1637677156418},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"2bd0eb1512415325653b26d62a4463e6de83c5ac","modified":1637677156418},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1637677156418},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"d21d4ac1982c13d02f125a67c065412085a92ff2","modified":1637677156419},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"e771dcb0b4673e063c0f3e2d73e7336ac05bcd57","modified":1637677156419},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"e75693f33dbc92afc55489438267869ae2f3db54","modified":1637677156419},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f49ca072b5a800f735e8f01fc3518f885951dd8e","modified":1637677156419},{"_id":"themes/next/source/css/_common/components/post/post-followme.styl","hash":"1e4190c10c9e0c9ce92653b0dbcec21754b0b69d","modified":1637677156419},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"902569a9dea90548bec21a823dd3efd94ff7c133","modified":1637677156419},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"72d495a88f7d6515af425c12cbc67308a57d88ea","modified":1637677156419},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"ded41fd9d20a5e8db66aaff7cc50f105f5ef2952","modified":1637677156419},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"65cb6edb69e94e70e3291e9132408361148d41d5","modified":1637677156419},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"6a97bcfa635d637dc59005be3b931109e0d1ead5","modified":1637677156419},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"d114b2a531129e739a27ba6271cfe6857aa9a865","modified":1637677156419},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"f5c2788a78790aca1a2f37f7149d6058afb539e0","modified":1637677156419},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"a760ee83ba6216871a9f14c5e56dc9bd0d9e2103","modified":1637677156419},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"99e12c9ce3d14d4837e3d3f12fc867ba9c565317","modified":1637677156419},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"5b5649b9749e3fd8b63aef22ceeece0a6e1df605","modified":1637677156419},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"8a7fc03a568b95be8d3337195e38bc7ec5ba2b23","modified":1637677156420},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"b49e9fbd3c182b8fc066b8c2caf248e3eb748619","modified":1637677156420},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"9f0b93d109c9aec79450c8a0cf4a4eab717d674d","modified":1637677156420},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"e2992846b39bf3857b5104675af02ba73e72eed5","modified":1637677156420},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"9a878d0119785a2316f42aebcceaa05a120b9a7a","modified":1637677156420},{"_id":"themes/next/source/css/_common/outline/footer/footer.styl","hash":"454a4aebfabb4469b92a8cbb49f46c49ac9bf165","modified":1637677156420},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"e7a9fdb6478b8674b1cdf94de4f8052843fb71d9","modified":1637677156420},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"e2d606f1ac343e9be4f15dbbaf3464bc4df8bf81","modified":1637677156420},{"_id":"themes/next/source/css/_common/outline/header/header.styl","hash":"a793cfff86ad4af818faef04c18013077873f8f0","modified":1637677156420},{"_id":"themes/next/source/css/_common/outline/header/headerband.styl","hash":"0caf32492692ba8e854da43697a2ec8a41612194","modified":1637677156420},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"5f432a6ed9ca80a413c68b00e93d4a411abf280a","modified":1637677156420},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"45a239edca44acecf971d99b04f30a1aafbf6906","modified":1637677156420},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"2cb1876e9e0c9ac32160888af27b1178dbcb0616","modified":1637677156421},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"b2fc519828fe89a1f8f03ff7b809ad68cd46f3d7","modified":1637677156421},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"44487d9ab290dc97871fa8dd4487016deb56e123","modified":1637677156421},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"fa0222197b5eee47e18ac864cdc6eac75678b8fe","modified":1637677156421},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"9b479c2f9a9bfed77885e5093b8245cc5d768ec7","modified":1637677156421},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"1f0e7fbe80956f47087c2458ea880acf7a83078b","modified":1637677156421},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"a960a2dd587b15d3b3fe1b59525d6fa971c6a6ec","modified":1637677156421},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"a05a4031e799bc864a4536f9ef61fe643cd421af","modified":1637677156421},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"b3220db827e1adbca7880c2bb23e78fa7cbe95cb","modified":1637677156421},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar.styl","hash":"a9cd93c36bae5af9223e7804963096274e8a4f03","modified":1637677156421},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"2a47f8a6bb589c2fb635e6c1e4a2563c7f63c407","modified":1637677156422},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"f71a3e86c05ea668b008cf05a81f67d92b6d65e4","modified":1637677156422},{"_id":"themes/next/source/css/_common/scaffolding/highlight/diff.styl","hash":"d3f73688bb7423e3ab0de1efdf6db46db5e34f80","modified":1637677156422},{"_id":"themes/next/source/css/_common/scaffolding/highlight/highlight.styl","hash":"35c871a809afa8306c8cde13651010e282548bc6","modified":1637677156422},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"1d2778ca5aeeeafaa690dc2766b01b352ab76a02","modified":1637677156422},{"_id":"themes/next/source/css/_common/scaffolding/highlight/theme.styl","hash":"3b3acc5caa0b95a2598bef4eeacb21bab21bea56","modified":1637677156422},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"709d10f763e357e1472d6471f8be384ec9e2d983","modified":1637677156422},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"d7fce4b51b5f4b7c31d93a9edb6c6ce740aa0d6b","modified":1637677156423},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"e4d9a77ffe98e851c1202676940097ba28253313","modified":1637677156423},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"f23670f1d8e749f3e83766d446790d8fd9620278","modified":1637677156423},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"b49c64f8e9a6ca1c45c0ba98febf1974fdd03616","modified":1637677156423},{"_id":"themes/next/source/css/_common/scaffolding/tags/tags.styl","hash":"9e4c0653cfd3cc6908fa0d97581bcf80861fb1e7","modified":1637677156423},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1637677156427},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1637677156427},{"_id":"themes/next/source/live2d-widget/live2d.min.js","hash":"94383fb61de815c3f806ae3f11026bbcfe384082","modified":1637677156431},{"_id":"themes/next/source/live2d-widget/assets/screenshot-3.png","hash":"f89c6fdf44008e7d3c7a1aafe65dc39b212edb6c","modified":1637677156430},{"_id":"themes/next/source/live2d-widget/assets/screenshot-2.png","hash":"76b844653136184c573b3632e12296e008a7ff5c","modified":1637677156429},{"_id":"public/categories/index.html","hash":"4f084c5547f3af1d3728135aa61cbae505482313","modified":1637679072297},{"_id":"public/2020/07/08/CopyOnWriteArrayList分析/index.html","hash":"149a94f0a6b26b5cd8ebf4152f11a1e40414801a","modified":1637679072297},{"_id":"public/2019/10/19/Java中字符串分割问题/index.html","hash":"fe9276468a4b7488bb26fc8da46e1ec3a590ea0c","modified":1637679072297},{"_id":"public/2019/10/19/Linux基本操作命令/index.html","hash":"19093802813648bfd40a2ccab95afe48767ad583","modified":1637679072297},{"_id":"public/2019/09/09/SpringCloud中不同模块间调用传参问题/index.html","hash":"ce08b4202c180540ea03c2955c18d613a2f5a0db","modified":1637679072297},{"_id":"public/2019/09/09/SpringBoot项目启动时@Mapper注解相关警告/index.html","hash":"dfbcd4b3e409ebaa6adac08c73ddbd46ac56842e","modified":1637679072297},{"_id":"public/2019/09/09/SpringCloud中其他模块事务能否回滚/index.html","hash":"318abb487305e39b2168c6443436f4e594003b78","modified":1637679072297},{"_id":"public/2019/09/04/git新建一个分支/index.html","hash":"874e82af4df96227b6679609f79a27e5d2e7854d","modified":1637679072297},{"_id":"public/archives/index.html","hash":"9f3793a98c5e489e2ee789951607310ca25532e1","modified":1637679072297},{"_id":"public/archives/page/2/index.html","hash":"67cef1f835622cc344e7049bfde9ebbbb5353d33","modified":1637679072297},{"_id":"public/archives/2019/index.html","hash":"cc37fcc0688782ac975592f99461528f4109f043","modified":1637679072297},{"_id":"public/archives/2019/page/2/index.html","hash":"afb484bddfbf66c6e4d963170f9419071d1f735c","modified":1637679072297},{"_id":"public/archives/2019/09/index.html","hash":"b25a7051a6148b6ebea6368c615dbbbbbe8231ff","modified":1637679072297},{"_id":"public/archives/2019/10/index.html","hash":"350a015eece71fb4a2189b9618f980c722c43c17","modified":1637679072297},{"_id":"public/archives/2019/11/index.html","hash":"13e5492bee3b24f63a2c53e3b0b2cce24300797b","modified":1637679072297},{"_id":"public/archives/2020/index.html","hash":"7cd9ba596cb2cf26457954722375bdf868ba35cc","modified":1637679072297},{"_id":"public/archives/2020/04/index.html","hash":"352d78c35992c57b6c39a78d63319ec8ce2a8358","modified":1637679072297},{"_id":"public/archives/2020/05/index.html","hash":"c1430e56578ada7321dd2996c82303e5c9c6b95a","modified":1637679072297},{"_id":"public/archives/2020/06/index.html","hash":"667f3d227c169ae998608f476b13975e55073f3b","modified":1637679072297},{"_id":"public/archives/2020/07/index.html","hash":"bdb52068ded64d77bdf7da7b2c2c8b029f6a54ec","modified":1637679072297},{"_id":"public/archives/2021/index.html","hash":"f472760cf046566ccf0d4e2b4df34be663d83a01","modified":1637679072297},{"_id":"public/archives/2021/11/index.html","hash":"841ed261887f244b47671d0a378bbe4047e83fc4","modified":1637679072297},{"_id":"public/categories/java/index.html","hash":"adbecad90609540ac654da505c2cbb72adcc56a8","modified":1637679072297},{"_id":"public/categories/linux/index.html","hash":"17ca9c3657c2fde5b8f2ef86fbc3489c5ef2a348","modified":1637679072297},{"_id":"public/categories/多线程/index.html","hash":"c79b726b6502e358d8d1a25682ec4d459d8d0a27","modified":1637679072297},{"_id":"public/categories/Spring/index.html","hash":"6b77988715e4ebee10632672caee9bfe7de05e3d","modified":1637679072297},{"_id":"public/categories/工具/index.html","hash":"58e39b042e5064212b79a341a16dba13143057e7","modified":1637679072297},{"_id":"public/categories/python/index.html","hash":"3ad44ec511005a29cc56d9111fc7b10c828e0010","modified":1637679072297},{"_id":"public/categories/数据结构/index.html","hash":"5fa9f345db989608e17c99603b9f4646914f95b8","modified":1637679072297},{"_id":"public/categories/系统设计/index.html","hash":"e5a562d1365a4cd1550c3705e533788ca56cce92","modified":1637679072297},{"_id":"public/categories/设计模式/index.html","hash":"19c60be4fdb462df1ee5fd674bad063a3528d3a3","modified":1637679072297},{"_id":"public/categories/数据结构/链表/index.html","hash":"0527048ddcca34b87dac954a2af9e6362cd91255","modified":1637679072297},{"_id":"public/2021/11/23/行为型设计模式/index.html","hash":"1620e8756dc320be7776338a84c90df69c6c9fa6","modified":1637679072297},{"_id":"public/2020/07/08/ArrayList源码分析/index.html","hash":"452ef3febfcf3a1b49e3dc089dc905ee49ed9024","modified":1637679072297},{"_id":"public/2020/06/03/Executors中的线程池/index.html","hash":"ae594673686e360b0ce56db12566ad6ee186b480","modified":1637679072297},{"_id":"public/2020/05/06/线程间同步与协作/index.html","hash":"8179df40a4a230a868850a95c24d8b11cc427a84","modified":1637679072297},{"_id":"public/2020/04/24/python学习2/index.html","hash":"a27b90499f4cb15a73d1b75b85d992a1b6578647","modified":1637679072297},{"_id":"public/2020/04/22/python学习1/index.html","hash":"efa1bdd9be79b0dd7b6b2f556629140758e85d51","modified":1637679072297},{"_id":"public/2020/04/18/线程基础机制/index.html","hash":"aa8c33e08a9c46e1e1689c0d07f1f2ef1aef093c","modified":1637679072297},{"_id":"public/2019/11/11/单链表基本操作（下）/index.html","hash":"703d31c50472645501915948d2ce32eafe672118","modified":1637679072297},{"_id":"public/2019/11/10/SpringBoot启动时SLF4J警告的一次解决/index.html","hash":"825ef24f293f1ba44c15e31d7cf6a3632de54c5d","modified":1637679072297},{"_id":"public/2019/11/10/单链表基本操作（上）/index.html","hash":"93d788b52afa90240a633bf16fe89ea6d20f8110","modified":1637679072297},{"_id":"public/2019/09/09/支付系统对于异步通知的处理/index.html","hash":"b2999acc83e94187942df377e261f66eb9a58210","modified":1637679072297},{"_id":"public/2019/09/05/hexo搭建/index.html","hash":"b2d87522cf5ff4d67b487524a0227bcabce18a6b","modified":1637679072297},{"_id":"public/2019/09/04/hugo搭建/index.html","hash":"6838ec81f6c6f9d99c57ef4c8e315e683c09d4dd","modified":1637679072297},{"_id":"public/index.html","hash":"035710465705363ab922f61ade16f0998edcae69","modified":1637679072297},{"_id":"public/page/2/index.html","hash":"686a4a986f1389e5be3012769e8ec38f96d57da1","modified":1637679072297},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1637679072297},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1637679072297},{"_id":"public/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1637679072297},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1637679072297},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1637679072297},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1637679072297},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1637679072297},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1637679072297},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1637679072297},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1637679072297},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1637679072297},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1637679072297},{"_id":"public/live2d-widget/LICENSE","hash":"31a3d460bb3c7d98845187c716a30db81c44b615","modified":1637679072297},{"_id":"public/live2d-widget/assets/screenshot-1.png","hash":"4bd4d97a1fcaa5deb3cea1c0a102a895a15af32f","modified":1637679072297},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1637679072297},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1637679072297},{"_id":"public/js/algolia-search.js","hash":"498d233eb5c7af6940baf94c1a1c36fdf1dd2636","modified":1637679072297},{"_id":"public/js/local-search.js","hash":"35ccf100d8f9c0fd6bfbb7fa88c2a76c42a69110","modified":1637679072297},{"_id":"public/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1637679072297},{"_id":"public/js/utils.js","hash":"730cca7f164eaf258661a61ff3f769851ff1e5da","modified":1637679072297},{"_id":"public/js/next-boot.js","hash":"a1b0636423009d4a4e4cea97bcbf1842bfab582c","modified":1637679072297},{"_id":"public/js/bookmark.js","hash":"9734ebcb9b83489686f5c2da67dc9e6157e988ad","modified":1637679072297},{"_id":"public/live2d-widget/README.html","hash":"779dbb731b7a3a8450c1d19fadfb317e7e7cdad9","modified":1637679072297},{"_id":"public/live2d-widget/autoload.js","hash":"16e35e99b188f2485058a1f52e52d66ef3362bf0","modified":1637679072297},{"_id":"public/live2d-widget/waifu-tips.js","hash":"f8bdc91fa1e51d46dc18e04174c63034d68299bf","modified":1637679072297},{"_id":"public/live2d-widget/waifu.css","hash":"7b0ef41399802acd71b3e66ad9234ca66d76c049","modified":1637679072297},{"_id":"public/live2d-widget/waifu-tips.json","hash":"11845afc8cdc6395f2affcb9de13c68ffbd87698","modified":1637679072297},{"_id":"public/js/schemes/muse.js","hash":"1eb9b88103ddcf8827b1a7cbc56471a9c5592d53","modified":1637679072297},{"_id":"public/js/schemes/pisces.js","hash":"0ac5ce155bc58c972fe21c4c447f85e6f8755c62","modified":1637679072297},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1637679072297},{"_id":"public/live2d-widget/demo/demo.html","hash":"2617b8aa4c4728d38a8f062465304e5433056abc","modified":1637679072297},{"_id":"public/live2d-widget/demo/login.html","hash":"595ff5297e8dd9b6fb99759c1f49f2cacda0c5c4","modified":1637679072297},{"_id":"public/css/main.css","hash":"ed32fb29167a8cc3aa4bb530298441279afb1dbf","modified":1637679072297},{"_id":"public/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1637679072297},{"_id":"public/live2d-widget/live2d.min.js","hash":"94383fb61de815c3f806ae3f11026bbcfe384082","modified":1637679072297},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1637679072297},{"_id":"public/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1637679072297},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1637679072297},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1637679072297},{"_id":"public/live2d-widget/assets/screenshot-3.png","hash":"f89c6fdf44008e7d3c7a1aafe65dc39b212edb6c","modified":1637679072297},{"_id":"public/live2d-widget/assets/screenshot-2.png","hash":"76b844653136184c573b3632e12296e008a7ff5c","modified":1637679072297}],"Category":[{"name":"java","_id":"ckwc7u3me0003tc6c7mvo7z9g"},{"name":"linux","_id":"ckwc7u3mi000atc6c37kl0bog"},{"name":"多线程","_id":"ckwc7u3mk000gtc6c0e6o4j08"},{"name":"Spring","_id":"ckwc7u3ml000ktc6cd0qmdhio"},{"name":"工具","_id":"ckwc7u3mo0010tc6chkps79mc"},{"name":"python","_id":"ckwc7u3mo0018tc6c62kb1wvc"},{"name":"数据结构","_id":"ckwc7u3mp001btc6cfqrk0oja"},{"name":"系统设计","_id":"ckwc7u3mp001ftc6ch89hgrmq"},{"name":"设计模式","_id":"ckwc7u3mp001htc6c6wym8qzl"},{"name":"链表","parent":"ckwc7u3mp001btc6cfqrk0oja","_id":"ckwc7u3mp001jtc6c8a8j9mub"}],"Data":[],"Page":[{"title":"文章分类","date":"2018-10-14T16:03:57.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: 文章分类\ndate: 2018-10-15 00:03:57\ntype: \"categories\"\ncomments: false\n---\n","updated":"2021-11-23T14:19:16.396Z","path":"categories/index.html","layout":"page","_id":"ckwc7u3m90000tc6chij275so","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"ArrayList源码分析","date":"2020-07-08T14:08:19.000Z","_content":"\n- **构造方法**\n```java\nprivate static final Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = {};\n\nprivate static final Object[] EMPTY_ELEMENTDATA = {};\n\n// 无参构造，默认初始化一个空数组\npublic ArrayList() {\n    this.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;\n}\n\n// 指定初始容量的构造方法\npublic ArrayList(int initialCapacity) {\n    if (initialCapacity > 0) {\n        this.elementData = new Object[initialCapacity];\n    } else if (initialCapacity == 0) {\n        this.elementData = EMPTY_ELEMENTDATA;\n    } else {\n        throw new IllegalArgumentException(\"Illegal Capacity: \"+\n                                           initialCapacity);\n    }\n}\n\n// 传入一个集合子类的构造方法\npublic ArrayList(Collection<? extends E> c) {\n    elementData = c.toArray();\n    if ((size = elementData.length) != 0) {\n        // c.toArray might (incorrectly) not return Object[] (see 6260652)\n        if (elementData.getClass() != Object[].class)\n            elementData = Arrays.copyOf(elementData, size, Object[].class);\n    } else {\n        // replace with empty array.\n        this.elementData = EMPTY_ELEMENTDATA;\n    }\n}\n```\n第二个传入指定容量的构造方法，会对数组的容量进行初始化；\n\n第三个传入集合的构造方法，主要应用在对集合的深拷贝。\n\n---\n\n- **add(E)方法及扩容**\n```java\nprivate static final int DEFAULT_CAPACITY = 10;\nprivate static final int MAX_ARRAY_SIZE = Integer.MAX_VALUE - 8;\n\npublic boolean add(E e) {\n    ensureCapacityInternal(size + 1);  // Increments modCount!!\n    elementData[size++] = e;\n    return true;\n}\n\n// 根据需要的最小容量扩容\nprivate void ensureCapacityInternal(int minCapacity) {\n    ensureExplicitCapacity(calculateCapacity(elementData, minCapacity));\n}\n\n// 根据需要的最终最小容量扩容\nprivate void ensureExplicitCapacity(int minCapacity) {\n    modCount++;\n\n    // overflow-conscious code\n    if (minCapacity - elementData.length > 0)\n        grow(minCapacity);\n}\n\n// 计算得到需要的最终最小容量\nprivate static int calculateCapacity(Object[] elementData, int minCapacity) {\n    if (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) {\n        return Math.max(DEFAULT_CAPACITY, minCapacity);\n    }\n    return minCapacity;\n}\n\n// 具体的扩容方法\nprivate void grow(int minCapacity) {\n    // overflow-conscious code\n    int oldCapacity = elementData.length;\n    // 计算得到新容量\n    int newCapacity = oldCapacity + (oldCapacity >> 1);\n    // 如果新容量小于需要的最小容量，就扩容到需要的最小容量\n    // （一般只有无参构造add第一个元素会走到这里）\n    if (newCapacity - minCapacity < 0)\n        newCapacity = minCapacity;\n    // 如果新容量大于int最大值-8，通过需要的最小容量重新定义新容量\n    if (newCapacity - MAX_ARRAY_SIZE > 0)\n        newCapacity = hugeCapacity(minCapacity);\n    // minCapacity is usually close to size, so this is a win:\n    elementData = Arrays.copyOf(elementData, newCapacity);\n}\n\n// 通过需要的最小容量重新定义新容量\nprivate static int hugeCapacity(int minCapacity) {\n    if (minCapacity < 0) // overflow\n        throw new OutOfMemoryError();\n    // 如果需要的最小容量大于int最大值-8，去int最大值；否则取int最大值-8   \n    return (minCapacity > MAX_ARRAY_SIZE) ?\n        Integer.MAX_VALUE :\n        MAX_ARRAY_SIZE;\n}\n\n\n```\n添加一个元素时，首先对原数组进行一次扩容，其中size代表当前已有的元素个数，所以需要的最小容量minCapacity是size+1；\n\n对minCapacity进行重新计算，如果是无参构造方法，由于初始化时默认是DEFAULTCAPACITY_EMPTY_ELEMENTDATA这样的空数组，所以minCapacity重新定义为size+1和默认值10的较大值。\n\n之后根据计算得到的minCapacity进行扩容：只有当minCapacity大于当前数组的长度时才需要扩容，否则不需要扩容。例如：当前数组长度10，已有3个元素，计算得到的minCapacity是4，那么不需要扩容，只有数组中元素装满时，size+1大于数组长度就需要扩容了。\n\n具体的扩容grow方法：新容量先定义成原来容量的1.5倍，然后和需要的最小容量做比较，如果依然小于需要的最小容量就用最小容量；之后判断新容量是否超过了int最大值-8，如果超过了就用需要的最小容量重新计算新容量。\n\n如果需要的最小容量大于int最大值-8，就定义为int最大值，否则定义为int最大值-8。\n\n最后通过Arrays.copyOf(elementData, newCapacity)方法扩容，具体放在后面。\n\n--- \n\n- **add(int, E)方法**\n```java\n// 插入元素E到指定的索引位置\npublic void add(int index, E element) {\n    // 检查是否索引越界\n    rangeCheckForAdd(index);\n    \n    // 扩容，与前面的add(E)方法相同\n    ensureCapacityInternal(size + 1);  // Increments modCount!!\n    // 数组拷贝\n    System.arraycopy(elementData, index, elementData, index + 1,\n                     size - index);\n    elementData[index] = element;\n    size++;\n}\n\nprivate void rangeCheckForAdd(int index) {\n    if (index > size || index < 0)\n        throw new IndexOutOfBoundsException(outOfBoundsMsg(index));\n}\n```\n与add(E)方法相比，先检查索引是否越界，因为add(E)方法默认放在最后，先扩容再插入不会存在索引越界问题，后续操作基本与add(E)相同，进行数组拷贝，然后在待插入位置赋值，size++。\n\n---\n\n- **Arrays.copyof()和System.arraycopy()**\n\n```java\n// 原数组src从某个索引位置srcPos开始，\n// 拷贝到新数组dest从某个索引位置destPos开始，拷贝长度length\npublic static native void arraycopy(Object src,  int  srcPos,\n                                    Object dest, int destPos,\n                                    int length);\n\n// 对原数组original拷贝newLength的长度，返回拷贝形成的新数组\n// newLength可以大于原数组的长度，这样相当于复制原数组的所有元素并扩容\npublic static <T> T[] copyOf(T[] original, int newLength) {\n    return (T[]) copyOf(original, newLength, original.getClass());\n}\n\npublic static <T,U> T[] copyOf(U[] original, int newLength, Class<? extends T[]> newType) {\n    @SuppressWarnings(\"unchecked\")\n    T[] copy = ((Object)newType == (Object)Object[].class)\n        ? (T[]) new Object[newLength]\n        : (T[]) Array.newInstance(newType.getComponentType(), newLength);\n    System.arraycopy(original, 0, copy, 0,\n                     Math.min(original.length, newLength));\n    return copy;\n}\n```\n其实Arrays.copyOf()方法底层仍然调用了System.arraycopy()方法；\n\n只是我们不需要自己创建新数组，方法内部已经创建好了；Arrayas.copyOf()方法主要是为了给原数组扩容。\n\n--- \n\n- **手动扩容方法**\n\nArrayList源码中有一个扩容方法是对外提供的。\n\n```java\npublic void ensureCapacity(int minCapacity) {\n    int minExpand = (elementData != DEFAULTCAPACITY_EMPTY_ELEMENTDATA)\n        // any size if not default element table\n        ? 0\n        // larger than default for default empty table. It's already\n        // supposed to be at default size.\n        : DEFAULT_CAPACITY;\n    // 需要的最小容量大于当前这个数组的最小范围\n    if (minCapacity > minExpand) {\n        ensureExplicitCapacity(minCapacity);\n    }\n}\n```\n最好在添加大量元素时先手动调用该方法进行扩容，减少后续自动扩容的次数。\n","source":"_posts/ArrayList源码分析.md","raw":"---\ntitle: ArrayList源码分析\ndate: 2020-07-08 22:08:19\ntags:\ncategories:\n- java\n---\n\n- **构造方法**\n```java\nprivate static final Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = {};\n\nprivate static final Object[] EMPTY_ELEMENTDATA = {};\n\n// 无参构造，默认初始化一个空数组\npublic ArrayList() {\n    this.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;\n}\n\n// 指定初始容量的构造方法\npublic ArrayList(int initialCapacity) {\n    if (initialCapacity > 0) {\n        this.elementData = new Object[initialCapacity];\n    } else if (initialCapacity == 0) {\n        this.elementData = EMPTY_ELEMENTDATA;\n    } else {\n        throw new IllegalArgumentException(\"Illegal Capacity: \"+\n                                           initialCapacity);\n    }\n}\n\n// 传入一个集合子类的构造方法\npublic ArrayList(Collection<? extends E> c) {\n    elementData = c.toArray();\n    if ((size = elementData.length) != 0) {\n        // c.toArray might (incorrectly) not return Object[] (see 6260652)\n        if (elementData.getClass() != Object[].class)\n            elementData = Arrays.copyOf(elementData, size, Object[].class);\n    } else {\n        // replace with empty array.\n        this.elementData = EMPTY_ELEMENTDATA;\n    }\n}\n```\n第二个传入指定容量的构造方法，会对数组的容量进行初始化；\n\n第三个传入集合的构造方法，主要应用在对集合的深拷贝。\n\n---\n\n- **add(E)方法及扩容**\n```java\nprivate static final int DEFAULT_CAPACITY = 10;\nprivate static final int MAX_ARRAY_SIZE = Integer.MAX_VALUE - 8;\n\npublic boolean add(E e) {\n    ensureCapacityInternal(size + 1);  // Increments modCount!!\n    elementData[size++] = e;\n    return true;\n}\n\n// 根据需要的最小容量扩容\nprivate void ensureCapacityInternal(int minCapacity) {\n    ensureExplicitCapacity(calculateCapacity(elementData, minCapacity));\n}\n\n// 根据需要的最终最小容量扩容\nprivate void ensureExplicitCapacity(int minCapacity) {\n    modCount++;\n\n    // overflow-conscious code\n    if (minCapacity - elementData.length > 0)\n        grow(minCapacity);\n}\n\n// 计算得到需要的最终最小容量\nprivate static int calculateCapacity(Object[] elementData, int minCapacity) {\n    if (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) {\n        return Math.max(DEFAULT_CAPACITY, minCapacity);\n    }\n    return minCapacity;\n}\n\n// 具体的扩容方法\nprivate void grow(int minCapacity) {\n    // overflow-conscious code\n    int oldCapacity = elementData.length;\n    // 计算得到新容量\n    int newCapacity = oldCapacity + (oldCapacity >> 1);\n    // 如果新容量小于需要的最小容量，就扩容到需要的最小容量\n    // （一般只有无参构造add第一个元素会走到这里）\n    if (newCapacity - minCapacity < 0)\n        newCapacity = minCapacity;\n    // 如果新容量大于int最大值-8，通过需要的最小容量重新定义新容量\n    if (newCapacity - MAX_ARRAY_SIZE > 0)\n        newCapacity = hugeCapacity(minCapacity);\n    // minCapacity is usually close to size, so this is a win:\n    elementData = Arrays.copyOf(elementData, newCapacity);\n}\n\n// 通过需要的最小容量重新定义新容量\nprivate static int hugeCapacity(int minCapacity) {\n    if (minCapacity < 0) // overflow\n        throw new OutOfMemoryError();\n    // 如果需要的最小容量大于int最大值-8，去int最大值；否则取int最大值-8   \n    return (minCapacity > MAX_ARRAY_SIZE) ?\n        Integer.MAX_VALUE :\n        MAX_ARRAY_SIZE;\n}\n\n\n```\n添加一个元素时，首先对原数组进行一次扩容，其中size代表当前已有的元素个数，所以需要的最小容量minCapacity是size+1；\n\n对minCapacity进行重新计算，如果是无参构造方法，由于初始化时默认是DEFAULTCAPACITY_EMPTY_ELEMENTDATA这样的空数组，所以minCapacity重新定义为size+1和默认值10的较大值。\n\n之后根据计算得到的minCapacity进行扩容：只有当minCapacity大于当前数组的长度时才需要扩容，否则不需要扩容。例如：当前数组长度10，已有3个元素，计算得到的minCapacity是4，那么不需要扩容，只有数组中元素装满时，size+1大于数组长度就需要扩容了。\n\n具体的扩容grow方法：新容量先定义成原来容量的1.5倍，然后和需要的最小容量做比较，如果依然小于需要的最小容量就用最小容量；之后判断新容量是否超过了int最大值-8，如果超过了就用需要的最小容量重新计算新容量。\n\n如果需要的最小容量大于int最大值-8，就定义为int最大值，否则定义为int最大值-8。\n\n最后通过Arrays.copyOf(elementData, newCapacity)方法扩容，具体放在后面。\n\n--- \n\n- **add(int, E)方法**\n```java\n// 插入元素E到指定的索引位置\npublic void add(int index, E element) {\n    // 检查是否索引越界\n    rangeCheckForAdd(index);\n    \n    // 扩容，与前面的add(E)方法相同\n    ensureCapacityInternal(size + 1);  // Increments modCount!!\n    // 数组拷贝\n    System.arraycopy(elementData, index, elementData, index + 1,\n                     size - index);\n    elementData[index] = element;\n    size++;\n}\n\nprivate void rangeCheckForAdd(int index) {\n    if (index > size || index < 0)\n        throw new IndexOutOfBoundsException(outOfBoundsMsg(index));\n}\n```\n与add(E)方法相比，先检查索引是否越界，因为add(E)方法默认放在最后，先扩容再插入不会存在索引越界问题，后续操作基本与add(E)相同，进行数组拷贝，然后在待插入位置赋值，size++。\n\n---\n\n- **Arrays.copyof()和System.arraycopy()**\n\n```java\n// 原数组src从某个索引位置srcPos开始，\n// 拷贝到新数组dest从某个索引位置destPos开始，拷贝长度length\npublic static native void arraycopy(Object src,  int  srcPos,\n                                    Object dest, int destPos,\n                                    int length);\n\n// 对原数组original拷贝newLength的长度，返回拷贝形成的新数组\n// newLength可以大于原数组的长度，这样相当于复制原数组的所有元素并扩容\npublic static <T> T[] copyOf(T[] original, int newLength) {\n    return (T[]) copyOf(original, newLength, original.getClass());\n}\n\npublic static <T,U> T[] copyOf(U[] original, int newLength, Class<? extends T[]> newType) {\n    @SuppressWarnings(\"unchecked\")\n    T[] copy = ((Object)newType == (Object)Object[].class)\n        ? (T[]) new Object[newLength]\n        : (T[]) Array.newInstance(newType.getComponentType(), newLength);\n    System.arraycopy(original, 0, copy, 0,\n                     Math.min(original.length, newLength));\n    return copy;\n}\n```\n其实Arrays.copyOf()方法底层仍然调用了System.arraycopy()方法；\n\n只是我们不需要自己创建新数组，方法内部已经创建好了；Arrayas.copyOf()方法主要是为了给原数组扩容。\n\n--- \n\n- **手动扩容方法**\n\nArrayList源码中有一个扩容方法是对外提供的。\n\n```java\npublic void ensureCapacity(int minCapacity) {\n    int minExpand = (elementData != DEFAULTCAPACITY_EMPTY_ELEMENTDATA)\n        // any size if not default element table\n        ? 0\n        // larger than default for default empty table. It's already\n        // supposed to be at default size.\n        : DEFAULT_CAPACITY;\n    // 需要的最小容量大于当前这个数组的最小范围\n    if (minCapacity > minExpand) {\n        ensureExplicitCapacity(minCapacity);\n    }\n}\n```\n最好在添加大量元素时先手动调用该方法进行扩容，减少后续自动扩容的次数。\n","slug":"ArrayList源码分析","published":1,"updated":"2021-11-23T14:19:16.395Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckwc7u3mc0001tc6c5di24cjq","content":"<ul>\n<li><strong>构造方法</strong><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Object[] EMPTY_ELEMENTDATA = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 无参构造，默认初始化一个空数组</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ArrayList</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 指定初始容量的构造方法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ArrayList</span><span class=\"params\">(<span class=\"keyword\">int</span> initialCapacity)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (initialCapacity &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.elementData = <span class=\"keyword\">new</span> Object[initialCapacity];</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (initialCapacity == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.elementData = EMPTY_ELEMENTDATA;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">&quot;Illegal Capacity: &quot;</span>+</span><br><span class=\"line\">                                           initialCapacity);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 传入一个集合子类的构造方法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ArrayList</span><span class=\"params\">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class=\"line\">    elementData = c.toArray();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((size = elementData.length) != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// c.toArray might (incorrectly) not return Object[] (see 6260652)</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (elementData.getClass() != Object[].class)</span><br><span class=\"line\">            elementData = Arrays.copyOf(elementData, size, Object[].class);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// replace with empty array.</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.elementData = EMPTY_ELEMENTDATA;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n第二个传入指定容量的构造方法，会对数组的容量进行初始化；</li>\n</ul>\n<p>第三个传入集合的构造方法，主要应用在对集合的深拷贝。</p>\n<hr>\n<ul>\n<li><strong>add(E)方法及扩容</strong><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> DEFAULT_CAPACITY = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> MAX_ARRAY_SIZE = Integer.MAX_VALUE - <span class=\"number\">8</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">add</span><span class=\"params\">(E e)</span> </span>&#123;</span><br><span class=\"line\">    ensureCapacityInternal(size + <span class=\"number\">1</span>);  <span class=\"comment\">// Increments modCount!!</span></span><br><span class=\"line\">    elementData[size++] = e;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 根据需要的最小容量扩容</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">ensureCapacityInternal</span><span class=\"params\">(<span class=\"keyword\">int</span> minCapacity)</span> </span>&#123;</span><br><span class=\"line\">    ensureExplicitCapacity(calculateCapacity(elementData, minCapacity));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 根据需要的最终最小容量扩容</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">ensureExplicitCapacity</span><span class=\"params\">(<span class=\"keyword\">int</span> minCapacity)</span> </span>&#123;</span><br><span class=\"line\">    modCount++;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// overflow-conscious code</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (minCapacity - elementData.length &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        grow(minCapacity);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 计算得到需要的最终最小容量</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">calculateCapacity</span><span class=\"params\">(Object[] elementData, <span class=\"keyword\">int</span> minCapacity)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Math.max(DEFAULT_CAPACITY, minCapacity);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> minCapacity;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 具体的扩容方法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">grow</span><span class=\"params\">(<span class=\"keyword\">int</span> minCapacity)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// overflow-conscious code</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> oldCapacity = elementData.length;</span><br><span class=\"line\">    <span class=\"comment\">// 计算得到新容量</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> newCapacity = oldCapacity + (oldCapacity &gt;&gt; <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 如果新容量小于需要的最小容量，就扩容到需要的最小容量</span></span><br><span class=\"line\">    <span class=\"comment\">// （一般只有无参构造add第一个元素会走到这里）</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (newCapacity - minCapacity &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        newCapacity = minCapacity;</span><br><span class=\"line\">    <span class=\"comment\">// 如果新容量大于int最大值-8，通过需要的最小容量重新定义新容量</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        newCapacity = hugeCapacity(minCapacity);</span><br><span class=\"line\">    <span class=\"comment\">// minCapacity is usually close to size, so this is a win:</span></span><br><span class=\"line\">    elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 通过需要的最小容量重新定义新容量</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">hugeCapacity</span><span class=\"params\">(<span class=\"keyword\">int</span> minCapacity)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (minCapacity &lt; <span class=\"number\">0</span>) <span class=\"comment\">// overflow</span></span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> OutOfMemoryError();</span><br><span class=\"line\">    <span class=\"comment\">// 如果需要的最小容量大于int最大值-8，去int最大值；否则取int最大值-8   </span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (minCapacity &gt; MAX_ARRAY_SIZE) ?</span><br><span class=\"line\">        Integer.MAX_VALUE :</span><br><span class=\"line\">        MAX_ARRAY_SIZE;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n添加一个元素时，首先对原数组进行一次扩容，其中size代表当前已有的元素个数，所以需要的最小容量minCapacity是size+1；</li>\n</ul>\n<p>对minCapacity进行重新计算，如果是无参构造方法，由于初始化时默认是DEFAULTCAPACITY_EMPTY_ELEMENTDATA这样的空数组，所以minCapacity重新定义为size+1和默认值10的较大值。</p>\n<p>之后根据计算得到的minCapacity进行扩容：只有当minCapacity大于当前数组的长度时才需要扩容，否则不需要扩容。例如：当前数组长度10，已有3个元素，计算得到的minCapacity是4，那么不需要扩容，只有数组中元素装满时，size+1大于数组长度就需要扩容了。</p>\n<p>具体的扩容grow方法：新容量先定义成原来容量的1.5倍，然后和需要的最小容量做比较，如果依然小于需要的最小容量就用最小容量；之后判断新容量是否超过了int最大值-8，如果超过了就用需要的最小容量重新计算新容量。</p>\n<p>如果需要的最小容量大于int最大值-8，就定义为int最大值，否则定义为int最大值-8。</p>\n<p>最后通过Arrays.copyOf(elementData, newCapacity)方法扩容，具体放在后面。</p>\n<hr>\n<ul>\n<li><strong>add(int, E)方法</strong><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 插入元素E到指定的索引位置</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> index, E element)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 检查是否索引越界</span></span><br><span class=\"line\">    rangeCheckForAdd(index);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 扩容，与前面的add(E)方法相同</span></span><br><span class=\"line\">    ensureCapacityInternal(size + <span class=\"number\">1</span>);  <span class=\"comment\">// Increments modCount!!</span></span><br><span class=\"line\">    <span class=\"comment\">// 数组拷贝</span></span><br><span class=\"line\">    System.arraycopy(elementData, index, elementData, index + <span class=\"number\">1</span>,</span><br><span class=\"line\">                     size - index);</span><br><span class=\"line\">    elementData[index] = element;</span><br><span class=\"line\">    size++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">rangeCheckForAdd</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (index &gt; size || index &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IndexOutOfBoundsException(outOfBoundsMsg(index));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n与add(E)方法相比，先检查索引是否越界，因为add(E)方法默认放在最后，先扩容再插入不会存在索引越界问题，后续操作基本与add(E)相同，进行数组拷贝，然后在待插入位置赋值，size++。</li>\n</ul>\n<hr>\n<ul>\n<li><strong>Arrays.copyof()和System.arraycopy()</strong></li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 原数组src从某个索引位置srcPos开始，</span></span><br><span class=\"line\"><span class=\"comment\">// 拷贝到新数组dest从某个索引位置destPos开始，拷贝长度length</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">native</span> <span class=\"keyword\">void</span> <span class=\"title\">arraycopy</span><span class=\"params\">(Object src,  <span class=\"keyword\">int</span>  srcPos,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                    Object dest, <span class=\"keyword\">int</span> destPos,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                    <span class=\"keyword\">int</span> length)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 对原数组original拷贝newLength的长度，返回拷贝形成的新数组</span></span><br><span class=\"line\"><span class=\"comment\">// newLength可以大于原数组的长度，这样相当于复制原数组的所有元素并扩容</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; T[] copyOf(T[] original, <span class=\"keyword\">int</span> newLength) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (T[]) copyOf(original, newLength, original.getClass());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T,U&gt; T[] copyOf(U[] original, <span class=\"keyword\">int</span> newLength, Class&lt;? extends T[]&gt; newType) &#123;</span><br><span class=\"line\">    <span class=\"meta\">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class=\"line\">    T[] copy = ((Object)newType == (Object)Object[].class)</span><br><span class=\"line\">        ? (T[]) <span class=\"keyword\">new</span> Object[newLength]</span><br><span class=\"line\">        : (T[]) Array.newInstance(newType.getComponentType(), newLength);</span><br><span class=\"line\">    System.arraycopy(original, <span class=\"number\">0</span>, copy, <span class=\"number\">0</span>,</span><br><span class=\"line\">                     Math.min(original.length, newLength));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> copy;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其实Arrays.copyOf()方法底层仍然调用了System.arraycopy()方法；</p>\n<p>只是我们不需要自己创建新数组，方法内部已经创建好了；Arrayas.copyOf()方法主要是为了给原数组扩容。</p>\n<hr>\n<ul>\n<li><strong>手动扩容方法</strong></li>\n</ul>\n<p>ArrayList源码中有一个扩容方法是对外提供的。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ensureCapacity</span><span class=\"params\">(<span class=\"keyword\">int</span> minCapacity)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> minExpand = (elementData != DEFAULTCAPACITY_EMPTY_ELEMENTDATA)</span><br><span class=\"line\">        <span class=\"comment\">// any size if not default element table</span></span><br><span class=\"line\">        ? <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"comment\">// larger than default for default empty table. It&#x27;s already</span></span><br><span class=\"line\">        <span class=\"comment\">// supposed to be at default size.</span></span><br><span class=\"line\">        : DEFAULT_CAPACITY;</span><br><span class=\"line\">    <span class=\"comment\">// 需要的最小容量大于当前这个数组的最小范围</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (minCapacity &gt; minExpand) &#123;</span><br><span class=\"line\">        ensureExplicitCapacity(minCapacity);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>最好在添加大量元素时先手动调用该方法进行扩容，减少后续自动扩容的次数。</p>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li><strong>构造方法</strong><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Object[] EMPTY_ELEMENTDATA = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 无参构造，默认初始化一个空数组</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ArrayList</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 指定初始容量的构造方法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ArrayList</span><span class=\"params\">(<span class=\"keyword\">int</span> initialCapacity)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (initialCapacity &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.elementData = <span class=\"keyword\">new</span> Object[initialCapacity];</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (initialCapacity == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.elementData = EMPTY_ELEMENTDATA;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">&quot;Illegal Capacity: &quot;</span>+</span><br><span class=\"line\">                                           initialCapacity);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 传入一个集合子类的构造方法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ArrayList</span><span class=\"params\">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class=\"line\">    elementData = c.toArray();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((size = elementData.length) != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// c.toArray might (incorrectly) not return Object[] (see 6260652)</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (elementData.getClass() != Object[].class)</span><br><span class=\"line\">            elementData = Arrays.copyOf(elementData, size, Object[].class);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// replace with empty array.</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.elementData = EMPTY_ELEMENTDATA;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n第二个传入指定容量的构造方法，会对数组的容量进行初始化；</li>\n</ul>\n<p>第三个传入集合的构造方法，主要应用在对集合的深拷贝。</p>\n<hr>\n<ul>\n<li><strong>add(E)方法及扩容</strong><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> DEFAULT_CAPACITY = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> MAX_ARRAY_SIZE = Integer.MAX_VALUE - <span class=\"number\">8</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">add</span><span class=\"params\">(E e)</span> </span>&#123;</span><br><span class=\"line\">    ensureCapacityInternal(size + <span class=\"number\">1</span>);  <span class=\"comment\">// Increments modCount!!</span></span><br><span class=\"line\">    elementData[size++] = e;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 根据需要的最小容量扩容</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">ensureCapacityInternal</span><span class=\"params\">(<span class=\"keyword\">int</span> minCapacity)</span> </span>&#123;</span><br><span class=\"line\">    ensureExplicitCapacity(calculateCapacity(elementData, minCapacity));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 根据需要的最终最小容量扩容</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">ensureExplicitCapacity</span><span class=\"params\">(<span class=\"keyword\">int</span> minCapacity)</span> </span>&#123;</span><br><span class=\"line\">    modCount++;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// overflow-conscious code</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (minCapacity - elementData.length &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        grow(minCapacity);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 计算得到需要的最终最小容量</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">calculateCapacity</span><span class=\"params\">(Object[] elementData, <span class=\"keyword\">int</span> minCapacity)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Math.max(DEFAULT_CAPACITY, minCapacity);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> minCapacity;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 具体的扩容方法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">grow</span><span class=\"params\">(<span class=\"keyword\">int</span> minCapacity)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// overflow-conscious code</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> oldCapacity = elementData.length;</span><br><span class=\"line\">    <span class=\"comment\">// 计算得到新容量</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> newCapacity = oldCapacity + (oldCapacity &gt;&gt; <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 如果新容量小于需要的最小容量，就扩容到需要的最小容量</span></span><br><span class=\"line\">    <span class=\"comment\">// （一般只有无参构造add第一个元素会走到这里）</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (newCapacity - minCapacity &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        newCapacity = minCapacity;</span><br><span class=\"line\">    <span class=\"comment\">// 如果新容量大于int最大值-8，通过需要的最小容量重新定义新容量</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        newCapacity = hugeCapacity(minCapacity);</span><br><span class=\"line\">    <span class=\"comment\">// minCapacity is usually close to size, so this is a win:</span></span><br><span class=\"line\">    elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 通过需要的最小容量重新定义新容量</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">hugeCapacity</span><span class=\"params\">(<span class=\"keyword\">int</span> minCapacity)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (minCapacity &lt; <span class=\"number\">0</span>) <span class=\"comment\">// overflow</span></span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> OutOfMemoryError();</span><br><span class=\"line\">    <span class=\"comment\">// 如果需要的最小容量大于int最大值-8，去int最大值；否则取int最大值-8   </span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (minCapacity &gt; MAX_ARRAY_SIZE) ?</span><br><span class=\"line\">        Integer.MAX_VALUE :</span><br><span class=\"line\">        MAX_ARRAY_SIZE;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n添加一个元素时，首先对原数组进行一次扩容，其中size代表当前已有的元素个数，所以需要的最小容量minCapacity是size+1；</li>\n</ul>\n<p>对minCapacity进行重新计算，如果是无参构造方法，由于初始化时默认是DEFAULTCAPACITY_EMPTY_ELEMENTDATA这样的空数组，所以minCapacity重新定义为size+1和默认值10的较大值。</p>\n<p>之后根据计算得到的minCapacity进行扩容：只有当minCapacity大于当前数组的长度时才需要扩容，否则不需要扩容。例如：当前数组长度10，已有3个元素，计算得到的minCapacity是4，那么不需要扩容，只有数组中元素装满时，size+1大于数组长度就需要扩容了。</p>\n<p>具体的扩容grow方法：新容量先定义成原来容量的1.5倍，然后和需要的最小容量做比较，如果依然小于需要的最小容量就用最小容量；之后判断新容量是否超过了int最大值-8，如果超过了就用需要的最小容量重新计算新容量。</p>\n<p>如果需要的最小容量大于int最大值-8，就定义为int最大值，否则定义为int最大值-8。</p>\n<p>最后通过Arrays.copyOf(elementData, newCapacity)方法扩容，具体放在后面。</p>\n<hr>\n<ul>\n<li><strong>add(int, E)方法</strong><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 插入元素E到指定的索引位置</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> index, E element)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 检查是否索引越界</span></span><br><span class=\"line\">    rangeCheckForAdd(index);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 扩容，与前面的add(E)方法相同</span></span><br><span class=\"line\">    ensureCapacityInternal(size + <span class=\"number\">1</span>);  <span class=\"comment\">// Increments modCount!!</span></span><br><span class=\"line\">    <span class=\"comment\">// 数组拷贝</span></span><br><span class=\"line\">    System.arraycopy(elementData, index, elementData, index + <span class=\"number\">1</span>,</span><br><span class=\"line\">                     size - index);</span><br><span class=\"line\">    elementData[index] = element;</span><br><span class=\"line\">    size++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">rangeCheckForAdd</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (index &gt; size || index &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IndexOutOfBoundsException(outOfBoundsMsg(index));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n与add(E)方法相比，先检查索引是否越界，因为add(E)方法默认放在最后，先扩容再插入不会存在索引越界问题，后续操作基本与add(E)相同，进行数组拷贝，然后在待插入位置赋值，size++。</li>\n</ul>\n<hr>\n<ul>\n<li><strong>Arrays.copyof()和System.arraycopy()</strong></li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 原数组src从某个索引位置srcPos开始，</span></span><br><span class=\"line\"><span class=\"comment\">// 拷贝到新数组dest从某个索引位置destPos开始，拷贝长度length</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">native</span> <span class=\"keyword\">void</span> <span class=\"title\">arraycopy</span><span class=\"params\">(Object src,  <span class=\"keyword\">int</span>  srcPos,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                    Object dest, <span class=\"keyword\">int</span> destPos,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                    <span class=\"keyword\">int</span> length)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 对原数组original拷贝newLength的长度，返回拷贝形成的新数组</span></span><br><span class=\"line\"><span class=\"comment\">// newLength可以大于原数组的长度，这样相当于复制原数组的所有元素并扩容</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; T[] copyOf(T[] original, <span class=\"keyword\">int</span> newLength) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (T[]) copyOf(original, newLength, original.getClass());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T,U&gt; T[] copyOf(U[] original, <span class=\"keyword\">int</span> newLength, Class&lt;? extends T[]&gt; newType) &#123;</span><br><span class=\"line\">    <span class=\"meta\">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class=\"line\">    T[] copy = ((Object)newType == (Object)Object[].class)</span><br><span class=\"line\">        ? (T[]) <span class=\"keyword\">new</span> Object[newLength]</span><br><span class=\"line\">        : (T[]) Array.newInstance(newType.getComponentType(), newLength);</span><br><span class=\"line\">    System.arraycopy(original, <span class=\"number\">0</span>, copy, <span class=\"number\">0</span>,</span><br><span class=\"line\">                     Math.min(original.length, newLength));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> copy;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其实Arrays.copyOf()方法底层仍然调用了System.arraycopy()方法；</p>\n<p>只是我们不需要自己创建新数组，方法内部已经创建好了；Arrayas.copyOf()方法主要是为了给原数组扩容。</p>\n<hr>\n<ul>\n<li><strong>手动扩容方法</strong></li>\n</ul>\n<p>ArrayList源码中有一个扩容方法是对外提供的。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ensureCapacity</span><span class=\"params\">(<span class=\"keyword\">int</span> minCapacity)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> minExpand = (elementData != DEFAULTCAPACITY_EMPTY_ELEMENTDATA)</span><br><span class=\"line\">        <span class=\"comment\">// any size if not default element table</span></span><br><span class=\"line\">        ? <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"comment\">// larger than default for default empty table. It&#x27;s already</span></span><br><span class=\"line\">        <span class=\"comment\">// supposed to be at default size.</span></span><br><span class=\"line\">        : DEFAULT_CAPACITY;</span><br><span class=\"line\">    <span class=\"comment\">// 需要的最小容量大于当前这个数组的最小范围</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (minCapacity &gt; minExpand) &#123;</span><br><span class=\"line\">        ensureExplicitCapacity(minCapacity);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>最好在添加大量元素时先手动调用该方法进行扩容，减少后续自动扩容的次数。</p>\n"},{"title":"CopyOnWriteArrayList分析","date":"2020-07-08T13:18:22.000Z","_content":"\n- **读写分离**\n\n1. 写操作是在一个复制数组上进行的，读操作是在原数组上进行的。读写分离，互不影响。\n2. 写操作会加锁，防止并发写入时导致数据丢失。\n3. 写操作结束后会把原数组的引用指向该复制数组。\n\n```java\n// 写\npublic boolean add(E e) {\n    final ReentrantLock lock = this.lock;\n    lock.lock();\n    try {\n        Object[] elements = getArray();\n        int len = elements.length;\n        Object[] newElements = Arrays.copyOf(elements, len + 1);\n        newElements[len] = e;\n        setArray(newElements);\n        return true;\n    } finally {\n        lock.unlock();\n    }\n}\n\nfinal void setArray(Object[] a) {\n    array = a;\n}\n\n// 读\n@SuppressWarnings(\"unchecked\")\nprivate E get(Object[] a, int index) {\n    return (E) a[index];\n}\n\n```\n\n- **适用场景**\n\n    - **优点**：\n    \n      在写的同时允许读操作，读操作的性能得到了极大的提升，比较适合读多写少的场景。\n    \n    - **缺点**：\n        - 内存占用：写操作需要复制一个新的数组，导致内存占用是原来的两倍多。\n        - 数据不一致：不能实时读到最新的数据，会出现读写同时发生的时候部分数据还未被同步到读数组。\n        \n    所以CopyOnWriteArrayList不适合内存敏感和对实时性要求很高的场景。\n\n    ","source":"_posts/CopyOnWriteArrayList分析.md","raw":"---\ntitle: CopyOnWriteArrayList分析\ndate: 2020-07-08 21:18:22\ntags:\ncategories:\n- java\n---\n\n- **读写分离**\n\n1. 写操作是在一个复制数组上进行的，读操作是在原数组上进行的。读写分离，互不影响。\n2. 写操作会加锁，防止并发写入时导致数据丢失。\n3. 写操作结束后会把原数组的引用指向该复制数组。\n\n```java\n// 写\npublic boolean add(E e) {\n    final ReentrantLock lock = this.lock;\n    lock.lock();\n    try {\n        Object[] elements = getArray();\n        int len = elements.length;\n        Object[] newElements = Arrays.copyOf(elements, len + 1);\n        newElements[len] = e;\n        setArray(newElements);\n        return true;\n    } finally {\n        lock.unlock();\n    }\n}\n\nfinal void setArray(Object[] a) {\n    array = a;\n}\n\n// 读\n@SuppressWarnings(\"unchecked\")\nprivate E get(Object[] a, int index) {\n    return (E) a[index];\n}\n\n```\n\n- **适用场景**\n\n    - **优点**：\n    \n      在写的同时允许读操作，读操作的性能得到了极大的提升，比较适合读多写少的场景。\n    \n    - **缺点**：\n        - 内存占用：写操作需要复制一个新的数组，导致内存占用是原来的两倍多。\n        - 数据不一致：不能实时读到最新的数据，会出现读写同时发生的时候部分数据还未被同步到读数组。\n        \n    所以CopyOnWriteArrayList不适合内存敏感和对实时性要求很高的场景。\n\n    ","slug":"CopyOnWriteArrayList分析","published":1,"updated":"2021-11-23T14:19:16.395Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckwc7u3md0002tc6c12429ivf","content":"<ul>\n<li><strong>读写分离</strong></li>\n</ul>\n<ol>\n<li>写操作是在一个复制数组上进行的，读操作是在原数组上进行的。读写分离，互不影响。</li>\n<li>写操作会加锁，防止并发写入时导致数据丢失。</li>\n<li>写操作结束后会把原数组的引用指向该复制数组。</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 写</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">add</span><span class=\"params\">(E e)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> ReentrantLock lock = <span class=\"keyword\">this</span>.lock;</span><br><span class=\"line\">    lock.lock();</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        Object[] elements = getArray();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> len = elements.length;</span><br><span class=\"line\">        Object[] newElements = Arrays.copyOf(elements, len + <span class=\"number\">1</span>);</span><br><span class=\"line\">        newElements[len] = e;</span><br><span class=\"line\">        setArray(newElements);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        lock.unlock();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">setArray</span><span class=\"params\">(Object[] a)</span> </span>&#123;</span><br><span class=\"line\">    array = a;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 读</span></span><br><span class=\"line\"><span class=\"meta\">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> E <span class=\"title\">get</span><span class=\"params\">(Object[] a, <span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (E) a[index];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p><strong>适用场景</strong></p>\n<ul>\n<li><p><strong>优点</strong>：</p>\n<p>在写的同时允许读操作，读操作的性能得到了极大的提升，比较适合读多写少的场景。</p>\n</li>\n<li><p><strong>缺点</strong>：</p>\n<ul>\n<li>内存占用：写操作需要复制一个新的数组，导致内存占用是原来的两倍多。</li>\n<li>数据不一致：不能实时读到最新的数据，会出现读写同时发生的时候部分数据还未被同步到读数组。</li>\n</ul>\n<p>所以CopyOnWriteArrayList不适合内存敏感和对实时性要求很高的场景。</p>\n</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li><strong>读写分离</strong></li>\n</ul>\n<ol>\n<li>写操作是在一个复制数组上进行的，读操作是在原数组上进行的。读写分离，互不影响。</li>\n<li>写操作会加锁，防止并发写入时导致数据丢失。</li>\n<li>写操作结束后会把原数组的引用指向该复制数组。</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 写</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">add</span><span class=\"params\">(E e)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> ReentrantLock lock = <span class=\"keyword\">this</span>.lock;</span><br><span class=\"line\">    lock.lock();</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        Object[] elements = getArray();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> len = elements.length;</span><br><span class=\"line\">        Object[] newElements = Arrays.copyOf(elements, len + <span class=\"number\">1</span>);</span><br><span class=\"line\">        newElements[len] = e;</span><br><span class=\"line\">        setArray(newElements);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        lock.unlock();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">setArray</span><span class=\"params\">(Object[] a)</span> </span>&#123;</span><br><span class=\"line\">    array = a;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 读</span></span><br><span class=\"line\"><span class=\"meta\">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> E <span class=\"title\">get</span><span class=\"params\">(Object[] a, <span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (E) a[index];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p><strong>适用场景</strong></p>\n<ul>\n<li><p><strong>优点</strong>：</p>\n<p>在写的同时允许读操作，读操作的性能得到了极大的提升，比较适合读多写少的场景。</p>\n</li>\n<li><p><strong>缺点</strong>：</p>\n<ul>\n<li>内存占用：写操作需要复制一个新的数组，导致内存占用是原来的两倍多。</li>\n<li>数据不一致：不能实时读到最新的数据，会出现读写同时发生的时候部分数据还未被同步到读数组。</li>\n</ul>\n<p>所以CopyOnWriteArrayList不适合内存敏感和对实时性要求很高的场景。</p>\n</li>\n</ul>\n</li>\n</ul>\n"},{"title":"Linux基本操作命令","date":"2019-10-19T06:30:09.000Z","_content":"\n##### 常用的grep 查找方式\n\n1. **单个文件搜索**\n   grep 字符串 a.log\n\n2. **多个文件搜索**\n   grep 字符串 *.log\n\n3. **上下文多少行** \n   -C n 前后 多少行，  -A n  之后n行， -B n 之前n行\n   grep Exce base.log  -C 20\n   grep Exce base.log  -A 20\n   grep Exce base.log  -B 20\n\n4. **管道，在上个结果的基础上继续搜索  =  and 条件**\n   grep 字符串 *.log  | grep 第二个条件\n\n5. **或条件**\n\n   grep -E '广点通|今日头条' base.log ","source":"_posts/Linux基本操作命令.md","raw":"---\ntitle: Linux基本操作命令\ndate: 2019-10-19 14:30:09\ntags:\ncategories:\n- linux\n---\n\n##### 常用的grep 查找方式\n\n1. **单个文件搜索**\n   grep 字符串 a.log\n\n2. **多个文件搜索**\n   grep 字符串 *.log\n\n3. **上下文多少行** \n   -C n 前后 多少行，  -A n  之后n行， -B n 之前n行\n   grep Exce base.log  -C 20\n   grep Exce base.log  -A 20\n   grep Exce base.log  -B 20\n\n4. **管道，在上个结果的基础上继续搜索  =  and 条件**\n   grep 字符串 *.log  | grep 第二个条件\n\n5. **或条件**\n\n   grep -E '广点通|今日头条' base.log ","slug":"Linux基本操作命令","published":1,"updated":"2021-11-23T14:19:16.395Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckwc7u3mf0004tc6c0cawg416","content":"<h5 id=\"常用的grep-查找方式\"><a href=\"#常用的grep-查找方式\" class=\"headerlink\" title=\"常用的grep 查找方式\"></a>常用的grep 查找方式</h5><ol>\n<li><p><strong>单个文件搜索</strong><br>grep 字符串 a.log</p>\n</li>\n<li><p><strong>多个文件搜索</strong><br>grep 字符串 *.log</p>\n</li>\n<li><p><strong>上下文多少行</strong><br>-C n 前后 多少行，  -A n  之后n行， -B n 之前n行<br>grep Exce base.log  -C 20<br>grep Exce base.log  -A 20<br>grep Exce base.log  -B 20</p>\n</li>\n<li><p><strong>管道，在上个结果的基础上继续搜索  =  and 条件</strong><br>grep 字符串 *.log  | grep 第二个条件</p>\n</li>\n<li><p><strong>或条件</strong></p>\n<p>grep -E ‘广点通|今日头条’ base.log </p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h5 id=\"常用的grep-查找方式\"><a href=\"#常用的grep-查找方式\" class=\"headerlink\" title=\"常用的grep 查找方式\"></a>常用的grep 查找方式</h5><ol>\n<li><p><strong>单个文件搜索</strong><br>grep 字符串 a.log</p>\n</li>\n<li><p><strong>多个文件搜索</strong><br>grep 字符串 *.log</p>\n</li>\n<li><p><strong>上下文多少行</strong><br>-C n 前后 多少行，  -A n  之后n行， -B n 之前n行<br>grep Exce base.log  -C 20<br>grep Exce base.log  -A 20<br>grep Exce base.log  -B 20</p>\n</li>\n<li><p><strong>管道，在上个结果的基础上继续搜索  =  and 条件</strong><br>grep 字符串 *.log  | grep 第二个条件</p>\n</li>\n<li><p><strong>或条件</strong></p>\n<p>grep -E ‘广点通|今日头条’ base.log </p>\n</li>\n</ol>\n"},{"title":"Executors中的线程池","date":"2020-06-03T13:21:19.000Z","_content":"\n- newFixedThreadPool:创建固定大小的线程池, 多于这个数量的放在无界队列中。\n\n```java\npublic static ExecutorService newFixedThreadPool(int nThreads) {\n    return new ThreadPoolExecutor(nThreads, nThreads,\n                                  0L, TimeUnit.MILLISECONDS,\n                                  new LinkedBlockingQueue<Runnable>());\n}\n```\n\n- newSingleThreadExecutor：大小为1的newFixedThreadPool\n\n```java\npublic static ExecutorService newSingleThreadExecutor() {\n    return new FinalizableDelegatedExecutorService\n        (new ThreadPoolExecutor(1, 1,\n                                0L, TimeUnit.MILLISECONDS,\n                                new LinkedBlockingQueue<Runnable>()));\n}\n```\n- newCachedThreadPool：没有核心线程，一个任务进来以后创建一个线程。\n\n```java\npublic static ExecutorService newCachedThreadPool() {\n    return new ThreadPoolExecutor(0, Integer.MAX_VALUE,\n                                  60L, TimeUnit.SECONDS,\n                                  new SynchronousQueue<Runnable>());\n}\n```\n\n- newScheduledThreadPool：具有延时执行和可以周期性执行的队列的线程池。\n\n```java\npublic ScheduledThreadPoolExecutor(int corePoolSize) {\n    super(corePoolSize, Integer.MAX_VALUE, 0, NANOSECONDS,\n          new DelayedWorkQueue());\n}\n```\n\n- newWorkStealingPool: 可用于并行操作的线程池。\n\n```java\npublic static ExecutorService newWorkStealingPool(int parallelism) {\n    return new ForkJoinPool\n        (parallelism,\n         ForkJoinPool.defaultForkJoinWorkerThreadFactory,\n         null, true);\n}\n```\n\n    ","source":"_posts/Executors中的线程池.md","raw":"---\ntitle: Executors中的线程池\ndate: 2020-06-03 21:21:19\ntags:\ncategories:\n- 多线程\n---\n\n- newFixedThreadPool:创建固定大小的线程池, 多于这个数量的放在无界队列中。\n\n```java\npublic static ExecutorService newFixedThreadPool(int nThreads) {\n    return new ThreadPoolExecutor(nThreads, nThreads,\n                                  0L, TimeUnit.MILLISECONDS,\n                                  new LinkedBlockingQueue<Runnable>());\n}\n```\n\n- newSingleThreadExecutor：大小为1的newFixedThreadPool\n\n```java\npublic static ExecutorService newSingleThreadExecutor() {\n    return new FinalizableDelegatedExecutorService\n        (new ThreadPoolExecutor(1, 1,\n                                0L, TimeUnit.MILLISECONDS,\n                                new LinkedBlockingQueue<Runnable>()));\n}\n```\n- newCachedThreadPool：没有核心线程，一个任务进来以后创建一个线程。\n\n```java\npublic static ExecutorService newCachedThreadPool() {\n    return new ThreadPoolExecutor(0, Integer.MAX_VALUE,\n                                  60L, TimeUnit.SECONDS,\n                                  new SynchronousQueue<Runnable>());\n}\n```\n\n- newScheduledThreadPool：具有延时执行和可以周期性执行的队列的线程池。\n\n```java\npublic ScheduledThreadPoolExecutor(int corePoolSize) {\n    super(corePoolSize, Integer.MAX_VALUE, 0, NANOSECONDS,\n          new DelayedWorkQueue());\n}\n```\n\n- newWorkStealingPool: 可用于并行操作的线程池。\n\n```java\npublic static ExecutorService newWorkStealingPool(int parallelism) {\n    return new ForkJoinPool\n        (parallelism,\n         ForkJoinPool.defaultForkJoinWorkerThreadFactory,\n         null, true);\n}\n```\n\n    ","slug":"Executors中的线程池","published":1,"updated":"2021-11-23T14:19:16.395Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckwc7u3mg0005tc6c0m909f9y","content":"<ul>\n<li>newFixedThreadPool:创建固定大小的线程池, 多于这个数量的放在无界队列中。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ExecutorService <span class=\"title\">newFixedThreadPool</span><span class=\"params\">(<span class=\"keyword\">int</span> nThreads)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ThreadPoolExecutor(nThreads, nThreads,</span><br><span class=\"line\">                                  <span class=\"number\">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class=\"line\">                                  <span class=\"keyword\">new</span> LinkedBlockingQueue&lt;Runnable&gt;());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>newSingleThreadExecutor：大小为1的newFixedThreadPool</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ExecutorService <span class=\"title\">newSingleThreadExecutor</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> FinalizableDelegatedExecutorService</span><br><span class=\"line\">        (<span class=\"keyword\">new</span> ThreadPoolExecutor(<span class=\"number\">1</span>, <span class=\"number\">1</span>,</span><br><span class=\"line\">                                <span class=\"number\">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class=\"line\">                                <span class=\"keyword\">new</span> LinkedBlockingQueue&lt;Runnable&gt;()));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>newCachedThreadPool：没有核心线程，一个任务进来以后创建一个线程。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ExecutorService <span class=\"title\">newCachedThreadPool</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ThreadPoolExecutor(<span class=\"number\">0</span>, Integer.MAX_VALUE,</span><br><span class=\"line\">                                  <span class=\"number\">60L</span>, TimeUnit.SECONDS,</span><br><span class=\"line\">                                  <span class=\"keyword\">new</span> SynchronousQueue&lt;Runnable&gt;());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>newScheduledThreadPool：具有延时执行和可以周期性执行的队列的线程池。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ScheduledThreadPoolExecutor</span><span class=\"params\">(<span class=\"keyword\">int</span> corePoolSize)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(corePoolSize, Integer.MAX_VALUE, <span class=\"number\">0</span>, NANOSECONDS,</span><br><span class=\"line\">          <span class=\"keyword\">new</span> DelayedWorkQueue());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>newWorkStealingPool: 可用于并行操作的线程池。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ExecutorService <span class=\"title\">newWorkStealingPool</span><span class=\"params\">(<span class=\"keyword\">int</span> parallelism)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ForkJoinPool</span><br><span class=\"line\">        (parallelism,</span><br><span class=\"line\">         ForkJoinPool.defaultForkJoinWorkerThreadFactory,</span><br><span class=\"line\">         <span class=\"keyword\">null</span>, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li>newFixedThreadPool:创建固定大小的线程池, 多于这个数量的放在无界队列中。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ExecutorService <span class=\"title\">newFixedThreadPool</span><span class=\"params\">(<span class=\"keyword\">int</span> nThreads)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ThreadPoolExecutor(nThreads, nThreads,</span><br><span class=\"line\">                                  <span class=\"number\">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class=\"line\">                                  <span class=\"keyword\">new</span> LinkedBlockingQueue&lt;Runnable&gt;());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>newSingleThreadExecutor：大小为1的newFixedThreadPool</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ExecutorService <span class=\"title\">newSingleThreadExecutor</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> FinalizableDelegatedExecutorService</span><br><span class=\"line\">        (<span class=\"keyword\">new</span> ThreadPoolExecutor(<span class=\"number\">1</span>, <span class=\"number\">1</span>,</span><br><span class=\"line\">                                <span class=\"number\">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class=\"line\">                                <span class=\"keyword\">new</span> LinkedBlockingQueue&lt;Runnable&gt;()));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>newCachedThreadPool：没有核心线程，一个任务进来以后创建一个线程。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ExecutorService <span class=\"title\">newCachedThreadPool</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ThreadPoolExecutor(<span class=\"number\">0</span>, Integer.MAX_VALUE,</span><br><span class=\"line\">                                  <span class=\"number\">60L</span>, TimeUnit.SECONDS,</span><br><span class=\"line\">                                  <span class=\"keyword\">new</span> SynchronousQueue&lt;Runnable&gt;());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>newScheduledThreadPool：具有延时执行和可以周期性执行的队列的线程池。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ScheduledThreadPoolExecutor</span><span class=\"params\">(<span class=\"keyword\">int</span> corePoolSize)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(corePoolSize, Integer.MAX_VALUE, <span class=\"number\">0</span>, NANOSECONDS,</span><br><span class=\"line\">          <span class=\"keyword\">new</span> DelayedWorkQueue());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>newWorkStealingPool: 可用于并行操作的线程池。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ExecutorService <span class=\"title\">newWorkStealingPool</span><span class=\"params\">(<span class=\"keyword\">int</span> parallelism)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ForkJoinPool</span><br><span class=\"line\">        (parallelism,</span><br><span class=\"line\">         ForkJoinPool.defaultForkJoinWorkerThreadFactory,</span><br><span class=\"line\">         <span class=\"keyword\">null</span>, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"Java中字符串分割问题","date":"2019-10-19T06:37:52.000Z","_content":"\n```\nstringObj.split([separator，[limit]]) \n```\n\n1. 直接分割：\n\n```\nString s = \"a,b,c,d,,,\";\nString[] strArr = s.split(\",\");\n//此时strArr为a,b,c,d\n```\n\n2. 带limit条件分割:\n\n```\nString s = \"a,b,c,d,,,\";\nString[] strArr = s.split(\",\"，-1);\n//此时strArr为a,b,c,d,\"\",\"\",\"\"\n```\n\n3. 分割特殊字符时需要使用转义字符:\n\n```\nString s = \"a$b$c\";\nString[] strArr = s.split(\"\\\\$\");\n//此时strArr为a,b,c\n```\n\n","source":"_posts/Java中字符串分割问题.md","raw":"---\ntitle: Java中字符串分割问题\ndate: 2019-10-19 14:37:52\ntags:\ncategories:\n- java\n---\n\n```\nstringObj.split([separator，[limit]]) \n```\n\n1. 直接分割：\n\n```\nString s = \"a,b,c,d,,,\";\nString[] strArr = s.split(\",\");\n//此时strArr为a,b,c,d\n```\n\n2. 带limit条件分割:\n\n```\nString s = \"a,b,c,d,,,\";\nString[] strArr = s.split(\",\"，-1);\n//此时strArr为a,b,c,d,\"\",\"\",\"\"\n```\n\n3. 分割特殊字符时需要使用转义字符:\n\n```\nString s = \"a$b$c\";\nString[] strArr = s.split(\"\\\\$\");\n//此时strArr为a,b,c\n```\n\n","slug":"Java中字符串分割问题","published":1,"updated":"2021-11-23T14:19:16.395Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckwc7u3mg0006tc6c9hqibo3b","content":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">stringObj.split([separator，[limit]]) </span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>直接分割：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String s &#x3D; &quot;a,b,c,d,,,&quot;;</span><br><span class=\"line\">String[] strArr &#x3D; s.split(&quot;,&quot;);</span><br><span class=\"line\">&#x2F;&#x2F;此时strArr为a,b,c,d</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>带limit条件分割:</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String s &#x3D; &quot;a,b,c,d,,,&quot;;</span><br><span class=\"line\">String[] strArr &#x3D; s.split(&quot;,&quot;，-1);</span><br><span class=\"line\">&#x2F;&#x2F;此时strArr为a,b,c,d,&quot;&quot;,&quot;&quot;,&quot;&quot;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>分割特殊字符时需要使用转义字符:</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String s &#x3D; &quot;a$b$c&quot;;</span><br><span class=\"line\">String[] strArr &#x3D; s.split(&quot;\\\\$&quot;);</span><br><span class=\"line\">&#x2F;&#x2F;此时strArr为a,b,c</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">stringObj.split([separator，[limit]]) </span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>直接分割：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String s &#x3D; &quot;a,b,c,d,,,&quot;;</span><br><span class=\"line\">String[] strArr &#x3D; s.split(&quot;,&quot;);</span><br><span class=\"line\">&#x2F;&#x2F;此时strArr为a,b,c,d</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>带limit条件分割:</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String s &#x3D; &quot;a,b,c,d,,,&quot;;</span><br><span class=\"line\">String[] strArr &#x3D; s.split(&quot;,&quot;，-1);</span><br><span class=\"line\">&#x2F;&#x2F;此时strArr为a,b,c,d,&quot;&quot;,&quot;&quot;,&quot;&quot;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>分割特殊字符时需要使用转义字符:</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String s &#x3D; &quot;a$b$c&quot;;</span><br><span class=\"line\">String[] strArr &#x3D; s.split(&quot;\\\\$&quot;);</span><br><span class=\"line\">&#x2F;&#x2F;此时strArr为a,b,c</span><br></pre></td></tr></table></figure>\n\n"},{"title":"SpringBoot启动时SLF4J警告的一次解决","date":"2019-11-10T07:35:05.000Z","_content":"\n- 问题：SpringBoot中启动时发生**SLF4J: Class path contains multiple SLF4J bindings**警告\n\n```java\nSLF4J: Class path contains multiple SLF4J bindings.\nSLF4J: Found binding in [jar:file:/D:/MavenRepository/ch/qos/logback/logback-classic/1.1.11/logback-classic-1.1.11.jar!/org/slf4j/impl/StaticLoggerBinder.class]\nSLF4J: Found binding in [jar:file:/D:/MavenRepository/org/slf4j/slf4j-log4j12/1.7.25/slf4j-log4j12-1.7.25.jar!/org/slf4j/impl/StaticLoggerBinder.class]\nSLF4J: See http://www.slf4j.org/codes.html#multiple_bindings for an explanation.\nSLF4J: Actual binding is of type [ch.qos.logback.classic.util.ContextSelectorStaticBinder]\n```\n\n- 影响：这个警告不仅会在本地启动项目时发生，部署在服务器上也会出现这种情况，目前并没有发现有什么影响，但是作为一个有洁癖的程序猿，肯定不能容忍每次启动项目都是一大堆警告，所以需要对这个问题进行研究并把警告去除掉。\n- 解析：上面的意思是说在类路径下包含多个SLF4J绑定，并且`logback-classic-1.1.11.jar`这个包和`slf4j-log4j12-1.7.25.jar`这个包，在`/org/slf4j/impl/StaticLoggerBinder.class`这个类身上发生了冲突。\n\n- 原因：通过网上查阅资料，了解到发生这个错误的原因，首先logback 日志的开发者和log4j 的开发者据说是一波人，而springboot 默认日志是较新的logback 日志。但是在以前流行的日志却是log4j ，而且很多的第三方工具都默认含有log4j 的引入。而我们在项目开发中，难免会引入各种各样的工具包，所以，基本上springboot 项目，如果不注意，肯定会出现这种冲突的，这样势必会导致SLF4J发生多个绑定的警告。(参考 https://blog.csdn.net/wohaqiyi/article/details/81009689 )\n\n- 验证：通过使用`mvn dependency:tree `命令来进行排查。发现springboot默认引入了logback日志，而前不久加进项目中的zookeeper依赖默认引入了log4j日志，从而导致SLF4J绑定冲突。\n\n```java\n[INFO] +- org.springframework.boot:spring-boot-starter-mail:jar:1.5.16.RELEASE:compile\n[INFO] |  +- org.springframework.boot:spring-boot-starter:jar:1.5.16.RELEASE:compile\n[INFO] |  |  +- org.springframework.boot:spring-boot:jar:1.5.16.RELEASE:compile\n[INFO] |  |  +- org.springframework.boot:spring-boot-starter-logging:jar:1.5.16.RELEASE:compile\n[INFO] |  |  |  +- ch.qos.logback:logback-classic:jar:1.1.11:compile\n[INFO] |  |  |  |  \\- ch.qos.logback:logback-core:jar:1.1.11:compile\n\n[INFO] +- org.apache.zookeeper:zookeeper:jar:3.5.4-beta:compile\n[INFO] |  +- org.slf4j:slf4j-api:jar:1.7.25:compile\n[INFO] |  +- org.slf4j:slf4j-log4j12:jar:1.7.25:compile\n[INFO] |  +- commons-cli:commons-cli:jar:1.2:compile\n[INFO] |  +- log4j:log4j:jar:1.2.17:compile\n[INFO] |  +- org.apache.yetus:audience-annotations:jar:0.5.0:compile\n[INFO] |  \\- io.netty:netty:jar:3.10.6.Final:compile\n```\n\n- 解决：把上面冲突的其中一个jar包排除掉即可，很显然我选择排除zookeeper。\n\n```\n<dependency>\n\t<groupId>org.apache.zookeeper</groupId>\n\t<artifactId>zookeeper</artifactId>\n\t<version>3.5.4-beta</version>\n\t<exclusions>\n\t\t<exclusion>\n\t\t\t<groupId>org.slf4j</groupId>\n\t\t\t<artifactId>slf4j-log4j12</artifactId>\n\t\t</exclusion>\n\t</exclusions>\n</dependency>\n```\n\n再次启动项目，发现再也没有烦人的SLF4J警告啦，完美解决问题。","source":"_posts/SpringBoot启动时SLF4J警告的一次解决.md","raw":"---\ntitle: SpringBoot启动时SLF4J警告的一次解决\ndate: 2019-11-10 15:35:05\ntags:\ncategories:\n- Spring\n---\n\n- 问题：SpringBoot中启动时发生**SLF4J: Class path contains multiple SLF4J bindings**警告\n\n```java\nSLF4J: Class path contains multiple SLF4J bindings.\nSLF4J: Found binding in [jar:file:/D:/MavenRepository/ch/qos/logback/logback-classic/1.1.11/logback-classic-1.1.11.jar!/org/slf4j/impl/StaticLoggerBinder.class]\nSLF4J: Found binding in [jar:file:/D:/MavenRepository/org/slf4j/slf4j-log4j12/1.7.25/slf4j-log4j12-1.7.25.jar!/org/slf4j/impl/StaticLoggerBinder.class]\nSLF4J: See http://www.slf4j.org/codes.html#multiple_bindings for an explanation.\nSLF4J: Actual binding is of type [ch.qos.logback.classic.util.ContextSelectorStaticBinder]\n```\n\n- 影响：这个警告不仅会在本地启动项目时发生，部署在服务器上也会出现这种情况，目前并没有发现有什么影响，但是作为一个有洁癖的程序猿，肯定不能容忍每次启动项目都是一大堆警告，所以需要对这个问题进行研究并把警告去除掉。\n- 解析：上面的意思是说在类路径下包含多个SLF4J绑定，并且`logback-classic-1.1.11.jar`这个包和`slf4j-log4j12-1.7.25.jar`这个包，在`/org/slf4j/impl/StaticLoggerBinder.class`这个类身上发生了冲突。\n\n- 原因：通过网上查阅资料，了解到发生这个错误的原因，首先logback 日志的开发者和log4j 的开发者据说是一波人，而springboot 默认日志是较新的logback 日志。但是在以前流行的日志却是log4j ，而且很多的第三方工具都默认含有log4j 的引入。而我们在项目开发中，难免会引入各种各样的工具包，所以，基本上springboot 项目，如果不注意，肯定会出现这种冲突的，这样势必会导致SLF4J发生多个绑定的警告。(参考 https://blog.csdn.net/wohaqiyi/article/details/81009689 )\n\n- 验证：通过使用`mvn dependency:tree `命令来进行排查。发现springboot默认引入了logback日志，而前不久加进项目中的zookeeper依赖默认引入了log4j日志，从而导致SLF4J绑定冲突。\n\n```java\n[INFO] +- org.springframework.boot:spring-boot-starter-mail:jar:1.5.16.RELEASE:compile\n[INFO] |  +- org.springframework.boot:spring-boot-starter:jar:1.5.16.RELEASE:compile\n[INFO] |  |  +- org.springframework.boot:spring-boot:jar:1.5.16.RELEASE:compile\n[INFO] |  |  +- org.springframework.boot:spring-boot-starter-logging:jar:1.5.16.RELEASE:compile\n[INFO] |  |  |  +- ch.qos.logback:logback-classic:jar:1.1.11:compile\n[INFO] |  |  |  |  \\- ch.qos.logback:logback-core:jar:1.1.11:compile\n\n[INFO] +- org.apache.zookeeper:zookeeper:jar:3.5.4-beta:compile\n[INFO] |  +- org.slf4j:slf4j-api:jar:1.7.25:compile\n[INFO] |  +- org.slf4j:slf4j-log4j12:jar:1.7.25:compile\n[INFO] |  +- commons-cli:commons-cli:jar:1.2:compile\n[INFO] |  +- log4j:log4j:jar:1.2.17:compile\n[INFO] |  +- org.apache.yetus:audience-annotations:jar:0.5.0:compile\n[INFO] |  \\- io.netty:netty:jar:3.10.6.Final:compile\n```\n\n- 解决：把上面冲突的其中一个jar包排除掉即可，很显然我选择排除zookeeper。\n\n```\n<dependency>\n\t<groupId>org.apache.zookeeper</groupId>\n\t<artifactId>zookeeper</artifactId>\n\t<version>3.5.4-beta</version>\n\t<exclusions>\n\t\t<exclusion>\n\t\t\t<groupId>org.slf4j</groupId>\n\t\t\t<artifactId>slf4j-log4j12</artifactId>\n\t\t</exclusion>\n\t</exclusions>\n</dependency>\n```\n\n再次启动项目，发现再也没有烦人的SLF4J警告啦，完美解决问题。","slug":"SpringBoot启动时SLF4J警告的一次解决","published":1,"updated":"2021-11-23T14:19:16.395Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckwc7u3mh0008tc6cbdpcfjtk","content":"<ul>\n<li>问题：SpringBoot中启动时发生<strong>SLF4J: Class path contains multiple SLF4J bindings</strong>警告</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SLF4J: Class path contains multiple SLF4J bindings.</span><br><span class=\"line\">SLF4J: Found binding in [jar:file:/D:/MavenRepository/ch/qos/logback/logback-classic/<span class=\"number\">1.1</span>.<span class=\"number\">11</span>/logback-classic-<span class=\"number\">1.1</span>.<span class=\"number\">11.</span>jar!/org/slf4j/impl/StaticLoggerBinder.class]</span><br><span class=\"line\">SLF4J: Found binding in [jar:file:/D:/MavenRepository/org/slf4j/slf4j-log4j12/<span class=\"number\">1.7</span>.<span class=\"number\">25</span>/slf4j-log4j12-<span class=\"number\">1.7</span>.<span class=\"number\">25.</span>jar!/org/slf4j/impl/StaticLoggerBinder.class]</span><br><span class=\"line\">SLF4J: See http:<span class=\"comment\">//www.slf4j.org/codes.html#multiple_bindings for an explanation.</span></span><br><span class=\"line\">SLF4J: Actual binding is of type [ch.qos.logback.classic.util.ContextSelectorStaticBinder]</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>影响：这个警告不仅会在本地启动项目时发生，部署在服务器上也会出现这种情况，目前并没有发现有什么影响，但是作为一个有洁癖的程序猿，肯定不能容忍每次启动项目都是一大堆警告，所以需要对这个问题进行研究并把警告去除掉。</p>\n</li>\n<li><p>解析：上面的意思是说在类路径下包含多个SLF4J绑定，并且<code>logback-classic-1.1.11.jar</code>这个包和<code>slf4j-log4j12-1.7.25.jar</code>这个包，在<code>/org/slf4j/impl/StaticLoggerBinder.class</code>这个类身上发生了冲突。</p>\n</li>\n<li><p>原因：通过网上查阅资料，了解到发生这个错误的原因，首先logback 日志的开发者和log4j 的开发者据说是一波人，而springboot 默认日志是较新的logback 日志。但是在以前流行的日志却是log4j ，而且很多的第三方工具都默认含有log4j 的引入。而我们在项目开发中，难免会引入各种各样的工具包，所以，基本上springboot 项目，如果不注意，肯定会出现这种冲突的，这样势必会导致SLF4J发生多个绑定的警告。(参考 <a href=\"https://blog.csdn.net/wohaqiyi/article/details/81009689\">https://blog.csdn.net/wohaqiyi/article/details/81009689</a> )</p>\n</li>\n<li><p>验证：通过使用<code>mvn dependency:tree </code>命令来进行排查。发现springboot默认引入了logback日志，而前不久加进项目中的zookeeper依赖默认引入了log4j日志，从而导致SLF4J绑定冲突。</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[INFO] +- org.springframework.boot:spring-boot-starter-mail:jar:<span class=\"number\">1.5</span>.<span class=\"number\">16.</span>RELEASE:compile</span><br><span class=\"line\">[INFO] |  +- org.springframework.boot:spring-boot-starter:jar:<span class=\"number\">1.5</span>.<span class=\"number\">16.</span>RELEASE:compile</span><br><span class=\"line\">[INFO] |  |  +- org.springframework.boot:spring-boot:jar:<span class=\"number\">1.5</span>.<span class=\"number\">16.</span>RELEASE:compile</span><br><span class=\"line\">[INFO] |  |  +- org.springframework.boot:spring-boot-starter-logging:jar:<span class=\"number\">1.5</span>.<span class=\"number\">16.</span>RELEASE:compile</span><br><span class=\"line\">[INFO] |  |  |  +- ch.qos.logback:logback-classic:jar:<span class=\"number\">1.1</span>.<span class=\"number\">11</span>:compile</span><br><span class=\"line\">[INFO] |  |  |  |  \\- ch.qos.logback:logback-core:jar:<span class=\"number\">1.1</span>.<span class=\"number\">11</span>:compile</span><br><span class=\"line\"></span><br><span class=\"line\">[INFO] +- org.apache.zookeeper:zookeeper:jar:<span class=\"number\">3.5</span>.<span class=\"number\">4</span>-beta:compile</span><br><span class=\"line\">[INFO] |  +- org.slf4j:slf4j-api:jar:<span class=\"number\">1.7</span>.<span class=\"number\">25</span>:compile</span><br><span class=\"line\">[INFO] |  +- org.slf4j:slf4j-log4j12:jar:<span class=\"number\">1.7</span>.<span class=\"number\">25</span>:compile</span><br><span class=\"line\">[INFO] |  +- commons-cli:commons-cli:jar:<span class=\"number\">1.2</span>:compile</span><br><span class=\"line\">[INFO] |  +- log4j:log4j:jar:<span class=\"number\">1.2</span>.<span class=\"number\">17</span>:compile</span><br><span class=\"line\">[INFO] |  +- org.apache.yetus:audience-annotations:jar:<span class=\"number\">0.5</span>.<span class=\"number\">0</span>:compile</span><br><span class=\"line\">[INFO] |  \\- io.netty:netty:jar:<span class=\"number\">3.10</span>.<span class=\"number\">6.F</span>inal:compile</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>解决：把上面冲突的其中一个jar包排除掉即可，很显然我选择排除zookeeper。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">\t&lt;groupId&gt;org.apache.zookeeper&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">\t&lt;artifactId&gt;zookeeper&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">\t&lt;version&gt;3.5.4-beta&lt;&#x2F;version&gt;</span><br><span class=\"line\">\t&lt;exclusions&gt;</span><br><span class=\"line\">\t\t&lt;exclusion&gt;</span><br><span class=\"line\">\t\t\t&lt;groupId&gt;org.slf4j&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">\t\t\t&lt;artifactId&gt;slf4j-log4j12&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">\t\t&lt;&#x2F;exclusion&gt;</span><br><span class=\"line\">\t&lt;&#x2F;exclusions&gt;</span><br><span class=\"line\">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>\n\n<p>再次启动项目，发现再也没有烦人的SLF4J警告啦，完美解决问题。</p>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li>问题：SpringBoot中启动时发生<strong>SLF4J: Class path contains multiple SLF4J bindings</strong>警告</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SLF4J: Class path contains multiple SLF4J bindings.</span><br><span class=\"line\">SLF4J: Found binding in [jar:file:/D:/MavenRepository/ch/qos/logback/logback-classic/<span class=\"number\">1.1</span>.<span class=\"number\">11</span>/logback-classic-<span class=\"number\">1.1</span>.<span class=\"number\">11.</span>jar!/org/slf4j/impl/StaticLoggerBinder.class]</span><br><span class=\"line\">SLF4J: Found binding in [jar:file:/D:/MavenRepository/org/slf4j/slf4j-log4j12/<span class=\"number\">1.7</span>.<span class=\"number\">25</span>/slf4j-log4j12-<span class=\"number\">1.7</span>.<span class=\"number\">25.</span>jar!/org/slf4j/impl/StaticLoggerBinder.class]</span><br><span class=\"line\">SLF4J: See http:<span class=\"comment\">//www.slf4j.org/codes.html#multiple_bindings for an explanation.</span></span><br><span class=\"line\">SLF4J: Actual binding is of type [ch.qos.logback.classic.util.ContextSelectorStaticBinder]</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>影响：这个警告不仅会在本地启动项目时发生，部署在服务器上也会出现这种情况，目前并没有发现有什么影响，但是作为一个有洁癖的程序猿，肯定不能容忍每次启动项目都是一大堆警告，所以需要对这个问题进行研究并把警告去除掉。</p>\n</li>\n<li><p>解析：上面的意思是说在类路径下包含多个SLF4J绑定，并且<code>logback-classic-1.1.11.jar</code>这个包和<code>slf4j-log4j12-1.7.25.jar</code>这个包，在<code>/org/slf4j/impl/StaticLoggerBinder.class</code>这个类身上发生了冲突。</p>\n</li>\n<li><p>原因：通过网上查阅资料，了解到发生这个错误的原因，首先logback 日志的开发者和log4j 的开发者据说是一波人，而springboot 默认日志是较新的logback 日志。但是在以前流行的日志却是log4j ，而且很多的第三方工具都默认含有log4j 的引入。而我们在项目开发中，难免会引入各种各样的工具包，所以，基本上springboot 项目，如果不注意，肯定会出现这种冲突的，这样势必会导致SLF4J发生多个绑定的警告。(参考 <a href=\"https://blog.csdn.net/wohaqiyi/article/details/81009689\">https://blog.csdn.net/wohaqiyi/article/details/81009689</a> )</p>\n</li>\n<li><p>验证：通过使用<code>mvn dependency:tree </code>命令来进行排查。发现springboot默认引入了logback日志，而前不久加进项目中的zookeeper依赖默认引入了log4j日志，从而导致SLF4J绑定冲突。</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[INFO] +- org.springframework.boot:spring-boot-starter-mail:jar:<span class=\"number\">1.5</span>.<span class=\"number\">16.</span>RELEASE:compile</span><br><span class=\"line\">[INFO] |  +- org.springframework.boot:spring-boot-starter:jar:<span class=\"number\">1.5</span>.<span class=\"number\">16.</span>RELEASE:compile</span><br><span class=\"line\">[INFO] |  |  +- org.springframework.boot:spring-boot:jar:<span class=\"number\">1.5</span>.<span class=\"number\">16.</span>RELEASE:compile</span><br><span class=\"line\">[INFO] |  |  +- org.springframework.boot:spring-boot-starter-logging:jar:<span class=\"number\">1.5</span>.<span class=\"number\">16.</span>RELEASE:compile</span><br><span class=\"line\">[INFO] |  |  |  +- ch.qos.logback:logback-classic:jar:<span class=\"number\">1.1</span>.<span class=\"number\">11</span>:compile</span><br><span class=\"line\">[INFO] |  |  |  |  \\- ch.qos.logback:logback-core:jar:<span class=\"number\">1.1</span>.<span class=\"number\">11</span>:compile</span><br><span class=\"line\"></span><br><span class=\"line\">[INFO] +- org.apache.zookeeper:zookeeper:jar:<span class=\"number\">3.5</span>.<span class=\"number\">4</span>-beta:compile</span><br><span class=\"line\">[INFO] |  +- org.slf4j:slf4j-api:jar:<span class=\"number\">1.7</span>.<span class=\"number\">25</span>:compile</span><br><span class=\"line\">[INFO] |  +- org.slf4j:slf4j-log4j12:jar:<span class=\"number\">1.7</span>.<span class=\"number\">25</span>:compile</span><br><span class=\"line\">[INFO] |  +- commons-cli:commons-cli:jar:<span class=\"number\">1.2</span>:compile</span><br><span class=\"line\">[INFO] |  +- log4j:log4j:jar:<span class=\"number\">1.2</span>.<span class=\"number\">17</span>:compile</span><br><span class=\"line\">[INFO] |  +- org.apache.yetus:audience-annotations:jar:<span class=\"number\">0.5</span>.<span class=\"number\">0</span>:compile</span><br><span class=\"line\">[INFO] |  \\- io.netty:netty:jar:<span class=\"number\">3.10</span>.<span class=\"number\">6.F</span>inal:compile</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>解决：把上面冲突的其中一个jar包排除掉即可，很显然我选择排除zookeeper。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">\t&lt;groupId&gt;org.apache.zookeeper&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">\t&lt;artifactId&gt;zookeeper&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">\t&lt;version&gt;3.5.4-beta&lt;&#x2F;version&gt;</span><br><span class=\"line\">\t&lt;exclusions&gt;</span><br><span class=\"line\">\t\t&lt;exclusion&gt;</span><br><span class=\"line\">\t\t\t&lt;groupId&gt;org.slf4j&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">\t\t\t&lt;artifactId&gt;slf4j-log4j12&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">\t\t&lt;&#x2F;exclusion&gt;</span><br><span class=\"line\">\t&lt;&#x2F;exclusions&gt;</span><br><span class=\"line\">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>\n\n<p>再次启动项目，发现再也没有烦人的SLF4J警告啦，完美解决问题。</p>\n"},{"title":"SpringBoot项目启动时@Mapper注解相关警告","date":"2019-09-08T19:26:59.000Z","draft":true,"_content":"\n```\n2019-08-27 15:27:27 | WARN  | main | org.mybatis.spring.mapper.ClassPathMapperScanner | Skipping MapperFactoryBean with name 'Xxx1Mapper' and 'com.demo.finance.mapper.Xxx1Mapper' mapperInterface. Bean already defined with the same name!\n2019-08-27 15:27:27 | WARN  | main | org.mybatis.spring.mapper.ClassPathMapperScanner | Skipping MapperFactoryBean with name 'YyMapper' and 'com.demo.finance.mapper.YyMapper' mapperInterface. Bean already defined with the same name!\n2019-08-27 15:27:27 | WARN  | main | org.mybatis.spring.mapper.ClassPathMapperScanner | Skipping MapperFactoryBean with name 'ZzMapper' and 'com.demo.finance.mapper.ZzMapper' mapperInterface. Bean already defined with the same name!\n2019-08-27 15:27:27 | WARN  | main | org.mybatis.spring.mapper.ClassPathMapperScanner | Skipping MapperFactoryBean with name 'AaMapper' and 'com.demo.finance.mapper.AaMapper' mapperInterface. Bean already defined with the same name!\n2019-08-27 15:27:27 | WARN  | main | org.mybatis.spring.mapper.ClassPathMapperScanner | Skipping MapperFactoryBean with name 'BbMapper' and 'com.demo.finance.mapper.BbMapper' mapperInterface. Bean already defined with the same name!\n2019-08-27 15:27:27 | WARN  | main | org.mybatis.spring.mapper.ClassPathMapperScanner | Skipping MapperFactoryBean with name 'CcMapper' and 'com.demo.finance.mapper.CcMapper' mapperInterface. Bean already defined with the same name!\n```\n项目启动时，控制台打印上述日志，原因是在Dao层使用了@Mapper注解，同时在启动类上添加了@MapperScane注解。\n#### 解决方案\n1. 只使用@Mapper注解，无需在启动类上开启扫描；\n2. Dao层使用@Repository注解，并在启动类上使用@MapperScane(\"mapper目录\")进行扫描","source":"_posts/SpringBoot项目启动时@Mapper注解相关警告.md","raw":"---\ntitle: \"SpringBoot项目启动时@Mapper注解相关警告\"\ndate: 2019-09-09T11:26:59+08:00\ndraft: true\ncategories:\n- Spring\n---\n\n```\n2019-08-27 15:27:27 | WARN  | main | org.mybatis.spring.mapper.ClassPathMapperScanner | Skipping MapperFactoryBean with name 'Xxx1Mapper' and 'com.demo.finance.mapper.Xxx1Mapper' mapperInterface. Bean already defined with the same name!\n2019-08-27 15:27:27 | WARN  | main | org.mybatis.spring.mapper.ClassPathMapperScanner | Skipping MapperFactoryBean with name 'YyMapper' and 'com.demo.finance.mapper.YyMapper' mapperInterface. Bean already defined with the same name!\n2019-08-27 15:27:27 | WARN  | main | org.mybatis.spring.mapper.ClassPathMapperScanner | Skipping MapperFactoryBean with name 'ZzMapper' and 'com.demo.finance.mapper.ZzMapper' mapperInterface. Bean already defined with the same name!\n2019-08-27 15:27:27 | WARN  | main | org.mybatis.spring.mapper.ClassPathMapperScanner | Skipping MapperFactoryBean with name 'AaMapper' and 'com.demo.finance.mapper.AaMapper' mapperInterface. Bean already defined with the same name!\n2019-08-27 15:27:27 | WARN  | main | org.mybatis.spring.mapper.ClassPathMapperScanner | Skipping MapperFactoryBean with name 'BbMapper' and 'com.demo.finance.mapper.BbMapper' mapperInterface. Bean already defined with the same name!\n2019-08-27 15:27:27 | WARN  | main | org.mybatis.spring.mapper.ClassPathMapperScanner | Skipping MapperFactoryBean with name 'CcMapper' and 'com.demo.finance.mapper.CcMapper' mapperInterface. Bean already defined with the same name!\n```\n项目启动时，控制台打印上述日志，原因是在Dao层使用了@Mapper注解，同时在启动类上添加了@MapperScane注解。\n#### 解决方案\n1. 只使用@Mapper注解，无需在启动类上开启扫描；\n2. Dao层使用@Repository注解，并在启动类上使用@MapperScane(\"mapper目录\")进行扫描","slug":"SpringBoot项目启动时@Mapper注解相关警告","published":1,"updated":"2021-11-23T14:19:16.395Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckwc7u3mi0009tc6cdpuc46ja","content":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2019-08-27 15:27:27 | WARN  | main | org.mybatis.spring.mapper.ClassPathMapperScanner | Skipping MapperFactoryBean with name &#39;Xxx1Mapper&#39; and &#39;com.demo.finance.mapper.Xxx1Mapper&#39; mapperInterface. Bean already defined with the same name!</span><br><span class=\"line\">2019-08-27 15:27:27 | WARN  | main | org.mybatis.spring.mapper.ClassPathMapperScanner | Skipping MapperFactoryBean with name &#39;YyMapper&#39; and &#39;com.demo.finance.mapper.YyMapper&#39; mapperInterface. Bean already defined with the same name!</span><br><span class=\"line\">2019-08-27 15:27:27 | WARN  | main | org.mybatis.spring.mapper.ClassPathMapperScanner | Skipping MapperFactoryBean with name &#39;ZzMapper&#39; and &#39;com.demo.finance.mapper.ZzMapper&#39; mapperInterface. Bean already defined with the same name!</span><br><span class=\"line\">2019-08-27 15:27:27 | WARN  | main | org.mybatis.spring.mapper.ClassPathMapperScanner | Skipping MapperFactoryBean with name &#39;AaMapper&#39; and &#39;com.demo.finance.mapper.AaMapper&#39; mapperInterface. Bean already defined with the same name!</span><br><span class=\"line\">2019-08-27 15:27:27 | WARN  | main | org.mybatis.spring.mapper.ClassPathMapperScanner | Skipping MapperFactoryBean with name &#39;BbMapper&#39; and &#39;com.demo.finance.mapper.BbMapper&#39; mapperInterface. Bean already defined with the same name!</span><br><span class=\"line\">2019-08-27 15:27:27 | WARN  | main | org.mybatis.spring.mapper.ClassPathMapperScanner | Skipping MapperFactoryBean with name &#39;CcMapper&#39; and &#39;com.demo.finance.mapper.CcMapper&#39; mapperInterface. Bean already defined with the same name!</span><br></pre></td></tr></table></figure>\n<p>项目启动时，控制台打印上述日志，原因是在Dao层使用了@Mapper注解，同时在启动类上添加了@MapperScane注解。</p>\n<h4 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h4><ol>\n<li>只使用@Mapper注解，无需在启动类上开启扫描；</li>\n<li>Dao层使用@Repository注解，并在启动类上使用@MapperScane(“mapper目录”)进行扫描</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2019-08-27 15:27:27 | WARN  | main | org.mybatis.spring.mapper.ClassPathMapperScanner | Skipping MapperFactoryBean with name &#39;Xxx1Mapper&#39; and &#39;com.demo.finance.mapper.Xxx1Mapper&#39; mapperInterface. Bean already defined with the same name!</span><br><span class=\"line\">2019-08-27 15:27:27 | WARN  | main | org.mybatis.spring.mapper.ClassPathMapperScanner | Skipping MapperFactoryBean with name &#39;YyMapper&#39; and &#39;com.demo.finance.mapper.YyMapper&#39; mapperInterface. Bean already defined with the same name!</span><br><span class=\"line\">2019-08-27 15:27:27 | WARN  | main | org.mybatis.spring.mapper.ClassPathMapperScanner | Skipping MapperFactoryBean with name &#39;ZzMapper&#39; and &#39;com.demo.finance.mapper.ZzMapper&#39; mapperInterface. Bean already defined with the same name!</span><br><span class=\"line\">2019-08-27 15:27:27 | WARN  | main | org.mybatis.spring.mapper.ClassPathMapperScanner | Skipping MapperFactoryBean with name &#39;AaMapper&#39; and &#39;com.demo.finance.mapper.AaMapper&#39; mapperInterface. Bean already defined with the same name!</span><br><span class=\"line\">2019-08-27 15:27:27 | WARN  | main | org.mybatis.spring.mapper.ClassPathMapperScanner | Skipping MapperFactoryBean with name &#39;BbMapper&#39; and &#39;com.demo.finance.mapper.BbMapper&#39; mapperInterface. Bean already defined with the same name!</span><br><span class=\"line\">2019-08-27 15:27:27 | WARN  | main | org.mybatis.spring.mapper.ClassPathMapperScanner | Skipping MapperFactoryBean with name &#39;CcMapper&#39; and &#39;com.demo.finance.mapper.CcMapper&#39; mapperInterface. Bean already defined with the same name!</span><br></pre></td></tr></table></figure>\n<p>项目启动时，控制台打印上述日志，原因是在Dao层使用了@Mapper注解，同时在启动类上添加了@MapperScane注解。</p>\n<h4 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h4><ol>\n<li>只使用@Mapper注解，无需在启动类上开启扫描；</li>\n<li>Dao层使用@Repository注解，并在启动类上使用@MapperScane(“mapper目录”)进行扫描</li>\n</ol>\n"},{"title":"SpringCloud中不同模块间调用传参问题","date":"2019-09-08T19:26:00.000Z","draft":true,"_content":"\n不同模块间调用时，通过Feign客户端组件调用其他服务，出现参数传过去后变成null的问题。注意如下：\n\n**1. 尽量使用@PostMapping注解，而不是@RequestMapping(value = \"url\",method = RequestMethod.POST)**\n\n**2. 使用@RequestParam注解时必须要在后面加上参数名**\n\n**3. Controller层互相调用不要忘记@RequestBody注解**\n\n**4. 接口和实现类都需要加@RequestBody**\n\n**5. 如果使用@RequestParam注解，只需要在接口处添加，不要在实现类上添加该注解**\n\n","source":"_posts/SpringCloud中不同模块间调用传参问题.md","raw":"---\ntitle: \"SpringCloud中不同模块间调用传参问题\"\ndate: 2019-09-09T11:26:00+08:00\ndraft: true\ncategories:\n- Spring\n---\n\n不同模块间调用时，通过Feign客户端组件调用其他服务，出现参数传过去后变成null的问题。注意如下：\n\n**1. 尽量使用@PostMapping注解，而不是@RequestMapping(value = \"url\",method = RequestMethod.POST)**\n\n**2. 使用@RequestParam注解时必须要在后面加上参数名**\n\n**3. Controller层互相调用不要忘记@RequestBody注解**\n\n**4. 接口和实现类都需要加@RequestBody**\n\n**5. 如果使用@RequestParam注解，只需要在接口处添加，不要在实现类上添加该注解**\n\n","slug":"SpringCloud中不同模块间调用传参问题","published":1,"updated":"2021-11-23T14:19:16.395Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckwc7u3mi000ctc6c07ilevgc","content":"<p>不同模块间调用时，通过Feign客户端组件调用其他服务，出现参数传过去后变成null的问题。注意如下：</p>\n<p><strong>1. 尽量使用@PostMapping注解，而不是@RequestMapping(value = “url”,method = RequestMethod.POST)</strong></p>\n<p><strong>2. 使用@RequestParam注解时必须要在后面加上参数名</strong></p>\n<p><strong>3. Controller层互相调用不要忘记@RequestBody注解</strong></p>\n<p><strong>4. 接口和实现类都需要加@RequestBody</strong></p>\n<p><strong>5. 如果使用@RequestParam注解，只需要在接口处添加，不要在实现类上添加该注解</strong></p>\n","site":{"data":{}},"excerpt":"","more":"<p>不同模块间调用时，通过Feign客户端组件调用其他服务，出现参数传过去后变成null的问题。注意如下：</p>\n<p><strong>1. 尽量使用@PostMapping注解，而不是@RequestMapping(value = “url”,method = RequestMethod.POST)</strong></p>\n<p><strong>2. 使用@RequestParam注解时必须要在后面加上参数名</strong></p>\n<p><strong>3. Controller层互相调用不要忘记@RequestBody注解</strong></p>\n<p><strong>4. 接口和实现类都需要加@RequestBody</strong></p>\n<p><strong>5. 如果使用@RequestParam注解，只需要在接口处添加，不要在实现类上添加该注解</strong></p>\n"},{"title":"SpringCloud中其他模块事务能否回滚","date":"2019-09-08T19:20:30.000Z","draft":true,"_content":"\n在处理业务逻辑时，遇到异常回滚数据库操作是非常常见的，但是，在SpringCloud的项目中，如果遇到业务抛异常需要回滚调用的其他模块数据库操作，能否有效呢？<br>\n**1. 使用@Transactional注解在方法上**\n<br>\n发现无法回滚，可以回滚本地自己模块的操作，但无法回滚调用的其他模块的数据库操作。\n<br>\n**2. 使用手动事务**\n<br>\n手动设置回滚点在需要回滚的操作之前，抛异常后手动回滚事务。<br>\n\n```\n//设置回滚点\nObject savePoint = TransactionAspectSupport.currentTransactionStatus().createSavepoint(); \n//数据库代码\n/*\n    代码~~~\n*/\n//手动回滚\nTransactionAspectSupport.currentTransactionStatus().rollbackToSavepoint(savePoint);\n```\n根据最终结果发现，这种方式也是无效的。\n<br><br>\n#### 结论\nSpringCloud模块中，每个模块对于自己模块的事务管理都是独立的，调用其他模块的服务，想要在本地通过回滚的方式回滚数据库操作是不现实的，所以，需要在代码设计之初就要考虑到这种情况，根据某些确定的条件之后再去做数据库操作，如果确实需要根据结果做回滚操作，可以再将数据update回去或者delete掉。也可以采用分布式事务框架。","source":"_posts/SpringCloud中其他模块事务能否回滚.md","raw":"---\ntitle: \"SpringCloud中其他模块事务能否回滚\"\ndate: 2019-09-09T11:20:30+08:00\ndraft: true\ncategories:\n- Spring\n---\n\n在处理业务逻辑时，遇到异常回滚数据库操作是非常常见的，但是，在SpringCloud的项目中，如果遇到业务抛异常需要回滚调用的其他模块数据库操作，能否有效呢？<br>\n**1. 使用@Transactional注解在方法上**\n<br>\n发现无法回滚，可以回滚本地自己模块的操作，但无法回滚调用的其他模块的数据库操作。\n<br>\n**2. 使用手动事务**\n<br>\n手动设置回滚点在需要回滚的操作之前，抛异常后手动回滚事务。<br>\n\n```\n//设置回滚点\nObject savePoint = TransactionAspectSupport.currentTransactionStatus().createSavepoint(); \n//数据库代码\n/*\n    代码~~~\n*/\n//手动回滚\nTransactionAspectSupport.currentTransactionStatus().rollbackToSavepoint(savePoint);\n```\n根据最终结果发现，这种方式也是无效的。\n<br><br>\n#### 结论\nSpringCloud模块中，每个模块对于自己模块的事务管理都是独立的，调用其他模块的服务，想要在本地通过回滚的方式回滚数据库操作是不现实的，所以，需要在代码设计之初就要考虑到这种情况，根据某些确定的条件之后再去做数据库操作，如果确实需要根据结果做回滚操作，可以再将数据update回去或者delete掉。也可以采用分布式事务框架。","slug":"SpringCloud中其他模块事务能否回滚","published":1,"updated":"2021-11-23T14:19:16.395Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckwc7u3mj000etc6c3xtf44ts","content":"<p>在处理业务逻辑时，遇到异常回滚数据库操作是非常常见的，但是，在SpringCloud的项目中，如果遇到业务抛异常需要回滚调用的其他模块数据库操作，能否有效呢？<br><br><strong>1. 使用@Transactional注解在方法上</strong><br><br><br>发现无法回滚，可以回滚本地自己模块的操作，但无法回滚调用的其他模块的数据库操作。<br><br><br><strong>2. 使用手动事务</strong><br><br><br>手动设置回滚点在需要回滚的操作之前，抛异常后手动回滚事务。<br></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;设置回滚点</span><br><span class=\"line\">Object savePoint &#x3D; TransactionAspectSupport.currentTransactionStatus().createSavepoint(); </span><br><span class=\"line\">&#x2F;&#x2F;数据库代码</span><br><span class=\"line\">&#x2F;*</span><br><span class=\"line\">    代码~~~</span><br><span class=\"line\">*&#x2F;</span><br><span class=\"line\">&#x2F;&#x2F;手动回滚</span><br><span class=\"line\">TransactionAspectSupport.currentTransactionStatus().rollbackToSavepoint(savePoint);</span><br></pre></td></tr></table></figure>\n<p>根据最终结果发现，这种方式也是无效的。<br><br><br></p>\n<h4 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h4><p>SpringCloud模块中，每个模块对于自己模块的事务管理都是独立的，调用其他模块的服务，想要在本地通过回滚的方式回滚数据库操作是不现实的，所以，需要在代码设计之初就要考虑到这种情况，根据某些确定的条件之后再去做数据库操作，如果确实需要根据结果做回滚操作，可以再将数据update回去或者delete掉。也可以采用分布式事务框架。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>在处理业务逻辑时，遇到异常回滚数据库操作是非常常见的，但是，在SpringCloud的项目中，如果遇到业务抛异常需要回滚调用的其他模块数据库操作，能否有效呢？<br><br><strong>1. 使用@Transactional注解在方法上</strong><br><br><br>发现无法回滚，可以回滚本地自己模块的操作，但无法回滚调用的其他模块的数据库操作。<br><br><br><strong>2. 使用手动事务</strong><br><br><br>手动设置回滚点在需要回滚的操作之前，抛异常后手动回滚事务。<br></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;设置回滚点</span><br><span class=\"line\">Object savePoint &#x3D; TransactionAspectSupport.currentTransactionStatus().createSavepoint(); </span><br><span class=\"line\">&#x2F;&#x2F;数据库代码</span><br><span class=\"line\">&#x2F;*</span><br><span class=\"line\">    代码~~~</span><br><span class=\"line\">*&#x2F;</span><br><span class=\"line\">&#x2F;&#x2F;手动回滚</span><br><span class=\"line\">TransactionAspectSupport.currentTransactionStatus().rollbackToSavepoint(savePoint);</span><br></pre></td></tr></table></figure>\n<p>根据最终结果发现，这种方式也是无效的。<br><br><br></p>\n<h4 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h4><p>SpringCloud模块中，每个模块对于自己模块的事务管理都是独立的，调用其他模块的服务，想要在本地通过回滚的方式回滚数据库操作是不现实的，所以，需要在代码设计之初就要考虑到这种情况，根据某些确定的条件之后再去做数据库操作，如果确实需要根据结果做回滚操作，可以再将数据update回去或者delete掉。也可以采用分布式事务框架。</p>\n"},{"title":"Git新建一个分支","date":"2019-09-04T00:12:53.000Z","draft":true,"_content":"\n参考：[https://www.cnblogs.com/kaerxifa/p/11045573.html](https://www.cnblogs.com/kaerxifa/p/11045573.html)\n\n1. 进入本地git仓库目录，使用git branch指令，发现只有master分支\n\n   ```shell\n   git branch\n   * master\n   ```\n\n2. 使用git branch 分支名来创建分支，创建完成后再次使用git branch查看，发现本地已经多出了一个新建的分支。\n\n   ```shell\n   输入：git branch 201909\n   输入：git branch\n   输出：201909\n       *master \n   ```\n\n3. 此时远程仓库并没有这个分支，我们需要使用git push origin 分支名 命令将本地修改推送到远程服务器上。\n\n   ```shell\n   输入：git push origin 201909\n   ```\n\n   \n\n4. push完成后就可以在远程服务上看到新建的分支了（原本是1 branches）。\n\n   ```shell\n   2 branchches\n   ```\n\n","source":"_posts/git新建一个分支.md","raw":"---\ntitle: \"Git新建一个分支\"\ndate: 2019-09-04T16:12:53+08:00\ndraft: true\ncategories:\n- 工具\n---\n\n参考：[https://www.cnblogs.com/kaerxifa/p/11045573.html](https://www.cnblogs.com/kaerxifa/p/11045573.html)\n\n1. 进入本地git仓库目录，使用git branch指令，发现只有master分支\n\n   ```shell\n   git branch\n   * master\n   ```\n\n2. 使用git branch 分支名来创建分支，创建完成后再次使用git branch查看，发现本地已经多出了一个新建的分支。\n\n   ```shell\n   输入：git branch 201909\n   输入：git branch\n   输出：201909\n       *master \n   ```\n\n3. 此时远程仓库并没有这个分支，我们需要使用git push origin 分支名 命令将本地修改推送到远程服务器上。\n\n   ```shell\n   输入：git push origin 201909\n   ```\n\n   \n\n4. push完成后就可以在远程服务上看到新建的分支了（原本是1 branches）。\n\n   ```shell\n   2 branchches\n   ```\n\n","slug":"git新建一个分支","published":1,"updated":"2021-11-23T14:19:16.395Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckwc7u3mk000htc6cdz1y42v1","content":"<p>参考：<a href=\"https://www.cnblogs.com/kaerxifa/p/11045573.html\">https://www.cnblogs.com/kaerxifa/p/11045573.html</a></p>\n<ol>\n<li><p>进入本地git仓库目录，使用git branch指令，发现只有master分支</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch</span><br><span class=\"line\">* master</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用git branch 分支名来创建分支，创建完成后再次使用git branch查看，发现本地已经多出了一个新建的分支。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：git branch 201909</span><br><span class=\"line\">输入：git branch</span><br><span class=\"line\">输出：201909</span><br><span class=\"line\">    *master </span><br></pre></td></tr></table></figure>\n</li>\n<li><p>此时远程仓库并没有这个分支，我们需要使用git push origin 分支名 命令将本地修改推送到远程服务器上。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：git push origin 201909</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ol>\n<ol start=\"4\">\n<li><p>push完成后就可以在远程服务上看到新建的分支了（原本是1 branches）。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2 branchches</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>参考：<a href=\"https://www.cnblogs.com/kaerxifa/p/11045573.html\">https://www.cnblogs.com/kaerxifa/p/11045573.html</a></p>\n<ol>\n<li><p>进入本地git仓库目录，使用git branch指令，发现只有master分支</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch</span><br><span class=\"line\">* master</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用git branch 分支名来创建分支，创建完成后再次使用git branch查看，发现本地已经多出了一个新建的分支。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：git branch 201909</span><br><span class=\"line\">输入：git branch</span><br><span class=\"line\">输出：201909</span><br><span class=\"line\">    *master </span><br></pre></td></tr></table></figure>\n</li>\n<li><p>此时远程仓库并没有这个分支，我们需要使用git push origin 分支名 命令将本地修改推送到远程服务器上。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：git push origin 201909</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ol>\n<ol start=\"4\">\n<li><p>push完成后就可以在远程服务上看到新建的分支了（原本是1 branches）。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2 branchches</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n"},{"title":"hexo搭建","date":"2019-09-04T18:07:01.000Z","draft":true,"_content":"\n#### 1.安装依赖环境<br>\n- 需要提前安装git，并拥有一个github账号。\n- 安装Nodejs,npm\n- node -v #查看node版本\n- npm -v #查看npm版本\n- npm install -g cnpm -- registry=http://registry.npm.taobao.org #安装淘宝的cnpm 管理器\n- cnpm -v #查看cnpm版本\n- cnpm install -g hexo-cli #安装hexo框架\n- hexo -v #查看hexo版本\n---\n#### 2.安装本地博客<br>\n- mkdir blog #创建blog目录\n- cd blog #进入blog目录\n- sudo hexo init #生成博客 初始化博客\n- hexo s #启动本地博客服务\nhttp://localhost:4000/ #本地访问地址\n- hexo n \"我的第一篇文章\" #创建新的文章\n\n#### 3.发布到github<br>\n- 返回blog目录\n- hexo clean #清理\n- hexo g #生成\n- #Github创建一个新的仓库 YourGithubName.github.io\n- cnpm install --save hexo-deployer-git #在blog目录下安装git部署插件\n- 配置_config.yml\n- Deployment\n- Docs: https://hexo.io/docs/deployment.html\n\n- 内容\n```java\ndeploy:\n  type: git\n  repo: https://github.com/YourGithubName/YourGithubName.github.io.git\n  branch: master\n```\n- hexo d #部署到Github仓库里\n- https://YourGithubName.github.io/ #访问这个地址可以查看博客\n\n#### 4.个性化主题<br>\n\n- git clone https://github.com/litten/hexo-theme-yilia.git themes/yilia #下载yilia主题到本地\n- 修改hexo根目录下的 _config.yml 文件 ： theme: yilia\n\n#### 5. 每次重新发布<br>\n\n- hexo c #清理一下\n- hexo g #生成\n- hexo d #部署到远程Github仓库\n- https://YourGithubName.github.io/ #查看博客\n\n\n\n","source":"_posts/hexo搭建.md","raw":"---\ntitle: \"hexo搭建\"\ndate: 2019-09-05T10:07:01+08:00\ndraft: true\ncategories:\n- 工具\n---\n\n#### 1.安装依赖环境<br>\n- 需要提前安装git，并拥有一个github账号。\n- 安装Nodejs,npm\n- node -v #查看node版本\n- npm -v #查看npm版本\n- npm install -g cnpm -- registry=http://registry.npm.taobao.org #安装淘宝的cnpm 管理器\n- cnpm -v #查看cnpm版本\n- cnpm install -g hexo-cli #安装hexo框架\n- hexo -v #查看hexo版本\n---\n#### 2.安装本地博客<br>\n- mkdir blog #创建blog目录\n- cd blog #进入blog目录\n- sudo hexo init #生成博客 初始化博客\n- hexo s #启动本地博客服务\nhttp://localhost:4000/ #本地访问地址\n- hexo n \"我的第一篇文章\" #创建新的文章\n\n#### 3.发布到github<br>\n- 返回blog目录\n- hexo clean #清理\n- hexo g #生成\n- #Github创建一个新的仓库 YourGithubName.github.io\n- cnpm install --save hexo-deployer-git #在blog目录下安装git部署插件\n- 配置_config.yml\n- Deployment\n- Docs: https://hexo.io/docs/deployment.html\n\n- 内容\n```java\ndeploy:\n  type: git\n  repo: https://github.com/YourGithubName/YourGithubName.github.io.git\n  branch: master\n```\n- hexo d #部署到Github仓库里\n- https://YourGithubName.github.io/ #访问这个地址可以查看博客\n\n#### 4.个性化主题<br>\n\n- git clone https://github.com/litten/hexo-theme-yilia.git themes/yilia #下载yilia主题到本地\n- 修改hexo根目录下的 _config.yml 文件 ： theme: yilia\n\n#### 5. 每次重新发布<br>\n\n- hexo c #清理一下\n- hexo g #生成\n- hexo d #部署到远程Github仓库\n- https://YourGithubName.github.io/ #查看博客\n\n\n\n","slug":"hexo搭建","published":1,"updated":"2021-11-23T14:19:16.395Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckwc7u3mk000itc6chgtaexyb","content":"<h4 id=\"1-安装依赖环境\"><a href=\"#1-安装依赖环境\" class=\"headerlink\" title=\"1.安装依赖环境\"></a>1.安装依赖环境<br></h4><ul>\n<li>需要提前安装git，并拥有一个github账号。</li>\n<li>安装Nodejs,npm</li>\n<li>node -v #查看node版本</li>\n<li>npm -v #查看npm版本</li>\n<li>npm install -g cnpm – registry=<a href=\"http://registry.npm.taobao.org/\">http://registry.npm.taobao.org</a> #安装淘宝的cnpm 管理器</li>\n<li>cnpm -v #查看cnpm版本</li>\n<li>cnpm install -g hexo-cli #安装hexo框架</li>\n<li>hexo -v #查看hexo版本</li>\n</ul>\n<hr>\n<h4 id=\"2-安装本地博客\"><a href=\"#2-安装本地博客\" class=\"headerlink\" title=\"2.安装本地博客\"></a>2.安装本地博客<br></h4><ul>\n<li>mkdir blog #创建blog目录</li>\n<li>cd blog #进入blog目录</li>\n<li>sudo hexo init #生成博客 初始化博客</li>\n<li>hexo s #启动本地博客服务<br><a href=\"http://localhost:4000/\">http://localhost:4000/</a> #本地访问地址</li>\n<li>hexo n “我的第一篇文章” #创建新的文章</li>\n</ul>\n<h4 id=\"3-发布到github\"><a href=\"#3-发布到github\" class=\"headerlink\" title=\"3.发布到github\"></a>3.发布到github<br></h4><ul>\n<li><p>返回blog目录</p>\n</li>\n<li><p>hexo clean #清理</p>\n</li>\n<li><p>hexo g #生成</p>\n</li>\n<li><p>#Github创建一个新的仓库 YourGithubName.github.io</p>\n</li>\n<li><p>cnpm install –save hexo-deployer-git #在blog目录下安装git部署插件</p>\n</li>\n<li><p>配置_config.yml</p>\n</li>\n<li><p>Deployment</p>\n</li>\n<li><p>Docs: <a href=\"https://hexo.io/docs/deployment.html\">https://hexo.io/docs/deployment.html</a></p>\n</li>\n<li><p>内容</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repo: https:<span class=\"comment\">//github.com/YourGithubName/YourGithubName.github.io.git</span></span><br><span class=\"line\">  branch: master</span><br></pre></td></tr></table></figure></li>\n<li><p>hexo d #部署到Github仓库里</p>\n</li>\n<li><p><a href=\"https://yourgithubname.github.io/\">https://YourGithubName.github.io/</a> #访问这个地址可以查看博客</p>\n</li>\n</ul>\n<h4 id=\"4-个性化主题\"><a href=\"#4-个性化主题\" class=\"headerlink\" title=\"4.个性化主题\"></a>4.个性化主题<br></h4><ul>\n<li>git clone <a href=\"https://github.com/litten/hexo-theme-yilia.git\">https://github.com/litten/hexo-theme-yilia.git</a> themes/yilia #下载yilia主题到本地</li>\n<li>修改hexo根目录下的 _config.yml 文件 ： theme: yilia</li>\n</ul>\n<h4 id=\"5-每次重新发布\"><a href=\"#5-每次重新发布\" class=\"headerlink\" title=\"5. 每次重新发布\"></a>5. 每次重新发布<br></h4><ul>\n<li>hexo c #清理一下</li>\n<li>hexo g #生成</li>\n<li>hexo d #部署到远程Github仓库</li>\n<li><a href=\"https://yourgithubname.github.io/\">https://YourGithubName.github.io/</a> #查看博客</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"1-安装依赖环境\"><a href=\"#1-安装依赖环境\" class=\"headerlink\" title=\"1.安装依赖环境\"></a>1.安装依赖环境<br></h4><ul>\n<li>需要提前安装git，并拥有一个github账号。</li>\n<li>安装Nodejs,npm</li>\n<li>node -v #查看node版本</li>\n<li>npm -v #查看npm版本</li>\n<li>npm install -g cnpm – registry=<a href=\"http://registry.npm.taobao.org/\">http://registry.npm.taobao.org</a> #安装淘宝的cnpm 管理器</li>\n<li>cnpm -v #查看cnpm版本</li>\n<li>cnpm install -g hexo-cli #安装hexo框架</li>\n<li>hexo -v #查看hexo版本</li>\n</ul>\n<hr>\n<h4 id=\"2-安装本地博客\"><a href=\"#2-安装本地博客\" class=\"headerlink\" title=\"2.安装本地博客\"></a>2.安装本地博客<br></h4><ul>\n<li>mkdir blog #创建blog目录</li>\n<li>cd blog #进入blog目录</li>\n<li>sudo hexo init #生成博客 初始化博客</li>\n<li>hexo s #启动本地博客服务<br><a href=\"http://localhost:4000/\">http://localhost:4000/</a> #本地访问地址</li>\n<li>hexo n “我的第一篇文章” #创建新的文章</li>\n</ul>\n<h4 id=\"3-发布到github\"><a href=\"#3-发布到github\" class=\"headerlink\" title=\"3.发布到github\"></a>3.发布到github<br></h4><ul>\n<li><p>返回blog目录</p>\n</li>\n<li><p>hexo clean #清理</p>\n</li>\n<li><p>hexo g #生成</p>\n</li>\n<li><p>#Github创建一个新的仓库 YourGithubName.github.io</p>\n</li>\n<li><p>cnpm install –save hexo-deployer-git #在blog目录下安装git部署插件</p>\n</li>\n<li><p>配置_config.yml</p>\n</li>\n<li><p>Deployment</p>\n</li>\n<li><p>Docs: <a href=\"https://hexo.io/docs/deployment.html\">https://hexo.io/docs/deployment.html</a></p>\n</li>\n<li><p>内容</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repo: https:<span class=\"comment\">//github.com/YourGithubName/YourGithubName.github.io.git</span></span><br><span class=\"line\">  branch: master</span><br></pre></td></tr></table></figure></li>\n<li><p>hexo d #部署到Github仓库里</p>\n</li>\n<li><p><a href=\"https://yourgithubname.github.io/\">https://YourGithubName.github.io/</a> #访问这个地址可以查看博客</p>\n</li>\n</ul>\n<h4 id=\"4-个性化主题\"><a href=\"#4-个性化主题\" class=\"headerlink\" title=\"4.个性化主题\"></a>4.个性化主题<br></h4><ul>\n<li>git clone <a href=\"https://github.com/litten/hexo-theme-yilia.git\">https://github.com/litten/hexo-theme-yilia.git</a> themes/yilia #下载yilia主题到本地</li>\n<li>修改hexo根目录下的 _config.yml 文件 ： theme: yilia</li>\n</ul>\n<h4 id=\"5-每次重新发布\"><a href=\"#5-每次重新发布\" class=\"headerlink\" title=\"5. 每次重新发布\"></a>5. 每次重新发布<br></h4><ul>\n<li>hexo c #清理一下</li>\n<li>hexo g #生成</li>\n<li>hexo d #部署到远程Github仓库</li>\n<li><a href=\"https://yourgithubname.github.io/\">https://YourGithubName.github.io/</a> #查看博客</li>\n</ul>\n"},{"title":"windows系统最简单的Hugo博客搭建","date":"2019-09-03T18:11:02.000Z","draft":true,"_content":"\n#### 1.安装<br>\n- 需要提前安装git，并拥有一个github账号。\n- widows需要在[https://github.com/gohugoio/hugo/releases](https://github.com/gohugoio/hugo/releases)处下载hugo运行需要的二级制码**hugo_0.57.2_Windows-64bit.zip**，并解压配置系统变量。<br>\n在命令行使用如下命令确认是否安装正确：\n\n```\nhugo version\n```\n- 打印如下内容表示安装成功：\n\n```\nHugo Static Site Generator v0.57.2-A849CB2D windows/amd64 BuildDate: 2019-08-17T17:54:13Z\n```\n\n#### 2. 生成站点\n切换至想要创建的目录，运行：\n```\nhugo new site myblog\n```\n打印如下内容表示生成站点成功：\n\n```\nCongratulations! Your new Hugo site is created\n```\n#### 3. 下载主题\n\n```\ncd myblog\ngit clone https://github.com/vaga/hugo-theme-m10c.git themes/m10c\n```\n打印如下内容表示主题下载成功：\n\n```\nCloning into 'themes/m10c'...\nremote: Enumerating objects: 18, done.\nremote: Counting objects: 100% (18/18), done.\nremote: Compressing objects: 100% (17/17), done.\nremote: Total 265 (delta 4), reused 11 (delta 1), pack-reused 247\nReceiving objects:  65% (173/265), 420.01 KiB | 136.00 KiB/s\nReceiving objects: 100% (265/265), 447.54 KiB | 140.00 KiB/s, done.\nResolving deltas: 100% (82/82), done.\n```\n#### 4. 创建文章\n在命令行输入：\n```\nhugo new post/blog.md\n```\n会显示：\n```\nmyblog\\content\\post\\myblog.md created\n```\n创建的文章会自动生成到content目录下，你可以去对应的目录找到刚刚创建的文章，使用markdown编辑器编辑你的博客。\n#### 5. 本地启动\n\n```\nhugo server -t m10c --buildDrafts\n```\n打印如下内容表示本地启动成功：\n\n```\nBuilding sites …\n                   | EN\n+------------------+----+\n  Pages            |  7\n  Paginator pages  |  0\n  Non-page files   |  0\n  Static files     |  1\n  Processed images |  0\n  Aliases          |  3\n  Sitemaps         |  1\n  Cleaned          |  0\n\nTotal in 77 ms\nWatching for changes in D:\\qwwww\\mmmqqq\\{archetypes,content,data,layouts,static,themes}\nWatching for config changes in D:\\qwwww\\mmmqqq\\config.toml\nEnvironment: \"development\"\nServing pages from memory\nRunning in Fast Render Mode. For full rebuilds on change: hugo server --disableFastRender\nWeb Server is available at http://localhost:1313/ (bind address 127.0.0.1)\nPress Ctrl+C to stop\n```\n\n启动后安装提示访问[http://localhost:1313/](http://localhost:1313/)，就可以成功看到你的博客网站啦~\n#### 6. 部署到github \n首先在你的github上创建一个新的仓库，这里命名很重要，否则会导致后续无法访问等问题，Repositor的名称要用**你的github名.github.io**，比如我的是**longzhang0314.github.io**否则会导致后续无法正常访问。<br><br>\n回到本地命令行，返回站点目录，输入如下命令，目的是生成最终页面：\n```\nhugo --theme=m10c --baseUrl=\"https://longzhang0314.github.io\" --buildDrafts\n```\n显示如下：\n```\nBuilding sites …\n                   | EN\n+------------------+----+\n  Pages            | 10\n  Paginator pages  |  0\n  Non-page files   |  0\n  Static files     |  1\n  Processed images |  0\n  Aliases          |  4\n  Sitemaps         |  1\n  Cleaned          |  0\n\nTotal in 63 ms\n```\n此时，在站点目录下会生成一个public文件夹，这个文件夹中的内容就是我们的博客展示的静态资源了，我们只需要把这个文件夹中的内容push到master分支即可，命令如下：\n\n```\ncd public\ngit init\ngit remote add origin https://github.com/longzhang0314/longzhang0314.github.io.git\ngit add .\ngit commit -m \"我的 hugo 博客第一次提交\"\ngit push -u origin master\n```\n命令行中最终显示：\n\n```\nEnumerating objects: 32, done.\nCounting objects: 100% (32/32), done.\nDelta compression using up to 8 threads\nCompressing objects: 100% (23/23), done.\nWriting objects: 100% (32/32), 7.49 KiB | 1.07 MiB/s, done.\nTotal 32 (delta 11), reused 0 (delta 0)\nremote: Resolving deltas: 100% (11/11), done.\nTo https://github.com/longzhang0314/longzhang0314.github.io.git\n * [new branch]      master -> master\nBranch 'master' set up to track remote branch 'master' from 'origin'.\n```\n这就表示一切顺利了~<br>\n浏览器中访问[https://longzhang0314.github.io](https://longzhang0314.github.io)就可以看到你的博客啦~\n#### 注：\n之后更换主题等操作以后可能会需要的指令：\n\n```\ngit pull origin master --allow-unrelated-histories\n```","source":"_posts/hugo搭建.md","raw":"---\ntitle: \"windows系统最简单的Hugo博客搭建\"\ndate: 2019-09-04T10:11:02+08:00\ndraft: true\ncategories:\n- 工具\n---\n\n#### 1.安装<br>\n- 需要提前安装git，并拥有一个github账号。\n- widows需要在[https://github.com/gohugoio/hugo/releases](https://github.com/gohugoio/hugo/releases)处下载hugo运行需要的二级制码**hugo_0.57.2_Windows-64bit.zip**，并解压配置系统变量。<br>\n在命令行使用如下命令确认是否安装正确：\n\n```\nhugo version\n```\n- 打印如下内容表示安装成功：\n\n```\nHugo Static Site Generator v0.57.2-A849CB2D windows/amd64 BuildDate: 2019-08-17T17:54:13Z\n```\n\n#### 2. 生成站点\n切换至想要创建的目录，运行：\n```\nhugo new site myblog\n```\n打印如下内容表示生成站点成功：\n\n```\nCongratulations! Your new Hugo site is created\n```\n#### 3. 下载主题\n\n```\ncd myblog\ngit clone https://github.com/vaga/hugo-theme-m10c.git themes/m10c\n```\n打印如下内容表示主题下载成功：\n\n```\nCloning into 'themes/m10c'...\nremote: Enumerating objects: 18, done.\nremote: Counting objects: 100% (18/18), done.\nremote: Compressing objects: 100% (17/17), done.\nremote: Total 265 (delta 4), reused 11 (delta 1), pack-reused 247\nReceiving objects:  65% (173/265), 420.01 KiB | 136.00 KiB/s\nReceiving objects: 100% (265/265), 447.54 KiB | 140.00 KiB/s, done.\nResolving deltas: 100% (82/82), done.\n```\n#### 4. 创建文章\n在命令行输入：\n```\nhugo new post/blog.md\n```\n会显示：\n```\nmyblog\\content\\post\\myblog.md created\n```\n创建的文章会自动生成到content目录下，你可以去对应的目录找到刚刚创建的文章，使用markdown编辑器编辑你的博客。\n#### 5. 本地启动\n\n```\nhugo server -t m10c --buildDrafts\n```\n打印如下内容表示本地启动成功：\n\n```\nBuilding sites …\n                   | EN\n+------------------+----+\n  Pages            |  7\n  Paginator pages  |  0\n  Non-page files   |  0\n  Static files     |  1\n  Processed images |  0\n  Aliases          |  3\n  Sitemaps         |  1\n  Cleaned          |  0\n\nTotal in 77 ms\nWatching for changes in D:\\qwwww\\mmmqqq\\{archetypes,content,data,layouts,static,themes}\nWatching for config changes in D:\\qwwww\\mmmqqq\\config.toml\nEnvironment: \"development\"\nServing pages from memory\nRunning in Fast Render Mode. For full rebuilds on change: hugo server --disableFastRender\nWeb Server is available at http://localhost:1313/ (bind address 127.0.0.1)\nPress Ctrl+C to stop\n```\n\n启动后安装提示访问[http://localhost:1313/](http://localhost:1313/)，就可以成功看到你的博客网站啦~\n#### 6. 部署到github \n首先在你的github上创建一个新的仓库，这里命名很重要，否则会导致后续无法访问等问题，Repositor的名称要用**你的github名.github.io**，比如我的是**longzhang0314.github.io**否则会导致后续无法正常访问。<br><br>\n回到本地命令行，返回站点目录，输入如下命令，目的是生成最终页面：\n```\nhugo --theme=m10c --baseUrl=\"https://longzhang0314.github.io\" --buildDrafts\n```\n显示如下：\n```\nBuilding sites …\n                   | EN\n+------------------+----+\n  Pages            | 10\n  Paginator pages  |  0\n  Non-page files   |  0\n  Static files     |  1\n  Processed images |  0\n  Aliases          |  4\n  Sitemaps         |  1\n  Cleaned          |  0\n\nTotal in 63 ms\n```\n此时，在站点目录下会生成一个public文件夹，这个文件夹中的内容就是我们的博客展示的静态资源了，我们只需要把这个文件夹中的内容push到master分支即可，命令如下：\n\n```\ncd public\ngit init\ngit remote add origin https://github.com/longzhang0314/longzhang0314.github.io.git\ngit add .\ngit commit -m \"我的 hugo 博客第一次提交\"\ngit push -u origin master\n```\n命令行中最终显示：\n\n```\nEnumerating objects: 32, done.\nCounting objects: 100% (32/32), done.\nDelta compression using up to 8 threads\nCompressing objects: 100% (23/23), done.\nWriting objects: 100% (32/32), 7.49 KiB | 1.07 MiB/s, done.\nTotal 32 (delta 11), reused 0 (delta 0)\nremote: Resolving deltas: 100% (11/11), done.\nTo https://github.com/longzhang0314/longzhang0314.github.io.git\n * [new branch]      master -> master\nBranch 'master' set up to track remote branch 'master' from 'origin'.\n```\n这就表示一切顺利了~<br>\n浏览器中访问[https://longzhang0314.github.io](https://longzhang0314.github.io)就可以看到你的博客啦~\n#### 注：\n之后更换主题等操作以后可能会需要的指令：\n\n```\ngit pull origin master --allow-unrelated-histories\n```","slug":"hugo搭建","published":1,"updated":"2021-11-23T14:19:16.396Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckwc7u3ml000ltc6cbpip1b7a","content":"<h4 id=\"1-安装\"><a href=\"#1-安装\" class=\"headerlink\" title=\"1.安装\"></a>1.安装<br></h4><ul>\n<li>需要提前安装git，并拥有一个github账号。</li>\n<li>widows需要在<a href=\"https://github.com/gohugoio/hugo/releases\">https://github.com/gohugoio/hugo/releases</a>处下载hugo运行需要的二级制码<strong>hugo_0.57.2_Windows-64bit.zip</strong>，并解压配置系统变量。<br><br>在命令行使用如下命令确认是否安装正确：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hugo version</span><br></pre></td></tr></table></figure>\n<ul>\n<li>打印如下内容表示安装成功：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Hugo Static Site Generator v0.57.2-A849CB2D windows&#x2F;amd64 BuildDate: 2019-08-17T17:54:13Z</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-生成站点\"><a href=\"#2-生成站点\" class=\"headerlink\" title=\"2. 生成站点\"></a>2. 生成站点</h4><p>切换至想要创建的目录，运行：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hugo new site myblog</span><br></pre></td></tr></table></figure>\n<p>打印如下内容表示生成站点成功：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Congratulations! Your new Hugo site is created</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-下载主题\"><a href=\"#3-下载主题\" class=\"headerlink\" title=\"3. 下载主题\"></a>3. 下载主题</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd myblog</span><br><span class=\"line\">git clone https:&#x2F;&#x2F;github.com&#x2F;vaga&#x2F;hugo-theme-m10c.git themes&#x2F;m10c</span><br></pre></td></tr></table></figure>\n<p>打印如下内容表示主题下载成功：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Cloning into &#39;themes&#x2F;m10c&#39;...</span><br><span class=\"line\">remote: Enumerating objects: 18, done.</span><br><span class=\"line\">remote: Counting objects: 100% (18&#x2F;18), done.</span><br><span class=\"line\">remote: Compressing objects: 100% (17&#x2F;17), done.</span><br><span class=\"line\">remote: Total 265 (delta 4), reused 11 (delta 1), pack-reused 247</span><br><span class=\"line\">Receiving objects:  65% (173&#x2F;265), 420.01 KiB | 136.00 KiB&#x2F;s</span><br><span class=\"line\">Receiving objects: 100% (265&#x2F;265), 447.54 KiB | 140.00 KiB&#x2F;s, done.</span><br><span class=\"line\">Resolving deltas: 100% (82&#x2F;82), done.</span><br></pre></td></tr></table></figure>\n<h4 id=\"4-创建文章\"><a href=\"#4-创建文章\" class=\"headerlink\" title=\"4. 创建文章\"></a>4. 创建文章</h4><p>在命令行输入：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hugo new post&#x2F;blog.md</span><br></pre></td></tr></table></figure>\n<p>会显示：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myblog\\content\\post\\myblog.md created</span><br></pre></td></tr></table></figure>\n<p>创建的文章会自动生成到content目录下，你可以去对应的目录找到刚刚创建的文章，使用markdown编辑器编辑你的博客。</p>\n<h4 id=\"5-本地启动\"><a href=\"#5-本地启动\" class=\"headerlink\" title=\"5. 本地启动\"></a>5. 本地启动</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hugo server -t m10c --buildDrafts</span><br></pre></td></tr></table></figure>\n<p>打印如下内容表示本地启动成功：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Building sites …</span><br><span class=\"line\">                   | EN</span><br><span class=\"line\">+------------------+----+</span><br><span class=\"line\">  Pages            |  7</span><br><span class=\"line\">  Paginator pages  |  0</span><br><span class=\"line\">  Non-page files   |  0</span><br><span class=\"line\">  Static files     |  1</span><br><span class=\"line\">  Processed images |  0</span><br><span class=\"line\">  Aliases          |  3</span><br><span class=\"line\">  Sitemaps         |  1</span><br><span class=\"line\">  Cleaned          |  0</span><br><span class=\"line\"></span><br><span class=\"line\">Total in 77 ms</span><br><span class=\"line\">Watching for changes in D:\\qwwww\\mmmqqq\\&#123;archetypes,content,data,layouts,static,themes&#125;</span><br><span class=\"line\">Watching for config changes in D:\\qwwww\\mmmqqq\\config.toml</span><br><span class=\"line\">Environment: &quot;development&quot;</span><br><span class=\"line\">Serving pages from memory</span><br><span class=\"line\">Running in Fast Render Mode. For full rebuilds on change: hugo server --disableFastRender</span><br><span class=\"line\">Web Server is available at http:&#x2F;&#x2F;localhost:1313&#x2F; (bind address 127.0.0.1)</span><br><span class=\"line\">Press Ctrl+C to stop</span><br></pre></td></tr></table></figure>\n\n<p>启动后安装提示访问<a href=\"http://localhost:1313/\">http://localhost:1313/</a>，就可以成功看到你的博客网站啦~</p>\n<h4 id=\"6-部署到github\"><a href=\"#6-部署到github\" class=\"headerlink\" title=\"6. 部署到github\"></a>6. 部署到github</h4><p>首先在你的github上创建一个新的仓库，这里命名很重要，否则会导致后续无法访问等问题，Repositor的名称要用<strong>你的github名.github.io</strong>，比如我的是<strong>longzhang0314.github.io</strong>否则会导致后续无法正常访问。<br><br><br>回到本地命令行，返回站点目录，输入如下命令，目的是生成最终页面：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hugo --theme&#x3D;m10c --baseUrl&#x3D;&quot;https:&#x2F;&#x2F;longzhang0314.github.io&quot; --buildDrafts</span><br></pre></td></tr></table></figure>\n<p>显示如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Building sites …</span><br><span class=\"line\">                   | EN</span><br><span class=\"line\">+------------------+----+</span><br><span class=\"line\">  Pages            | 10</span><br><span class=\"line\">  Paginator pages  |  0</span><br><span class=\"line\">  Non-page files   |  0</span><br><span class=\"line\">  Static files     |  1</span><br><span class=\"line\">  Processed images |  0</span><br><span class=\"line\">  Aliases          |  4</span><br><span class=\"line\">  Sitemaps         |  1</span><br><span class=\"line\">  Cleaned          |  0</span><br><span class=\"line\"></span><br><span class=\"line\">Total in 63 ms</span><br></pre></td></tr></table></figure>\n<p>此时，在站点目录下会生成一个public文件夹，这个文件夹中的内容就是我们的博客展示的静态资源了，我们只需要把这个文件夹中的内容push到master分支即可，命令如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd public</span><br><span class=\"line\">git init</span><br><span class=\"line\">git remote add origin https:&#x2F;&#x2F;github.com&#x2F;longzhang0314&#x2F;longzhang0314.github.io.git</span><br><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m &quot;我的 hugo 博客第一次提交&quot;</span><br><span class=\"line\">git push -u origin master</span><br></pre></td></tr></table></figure>\n<p>命令行中最终显示：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Enumerating objects: 32, done.</span><br><span class=\"line\">Counting objects: 100% (32&#x2F;32), done.</span><br><span class=\"line\">Delta compression using up to 8 threads</span><br><span class=\"line\">Compressing objects: 100% (23&#x2F;23), done.</span><br><span class=\"line\">Writing objects: 100% (32&#x2F;32), 7.49 KiB | 1.07 MiB&#x2F;s, done.</span><br><span class=\"line\">Total 32 (delta 11), reused 0 (delta 0)</span><br><span class=\"line\">remote: Resolving deltas: 100% (11&#x2F;11), done.</span><br><span class=\"line\">To https:&#x2F;&#x2F;github.com&#x2F;longzhang0314&#x2F;longzhang0314.github.io.git</span><br><span class=\"line\"> * [new branch]      master -&gt; master</span><br><span class=\"line\">Branch &#39;master&#39; set up to track remote branch &#39;master&#39; from &#39;origin&#39;.</span><br></pre></td></tr></table></figure>\n<p>这就表示一切顺利了<del><br><br>浏览器中访问<a href=\"https://longzhang0314.github.io/\">https://longzhang0314.github.io</a>就可以看到你的博客啦</del></p>\n<h4 id=\"注：\"><a href=\"#注：\" class=\"headerlink\" title=\"注：\"></a>注：</h4><p>之后更换主题等操作以后可能会需要的指令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git pull origin master --allow-unrelated-histories</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h4 id=\"1-安装\"><a href=\"#1-安装\" class=\"headerlink\" title=\"1.安装\"></a>1.安装<br></h4><ul>\n<li>需要提前安装git，并拥有一个github账号。</li>\n<li>widows需要在<a href=\"https://github.com/gohugoio/hugo/releases\">https://github.com/gohugoio/hugo/releases</a>处下载hugo运行需要的二级制码<strong>hugo_0.57.2_Windows-64bit.zip</strong>，并解压配置系统变量。<br><br>在命令行使用如下命令确认是否安装正确：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hugo version</span><br></pre></td></tr></table></figure>\n<ul>\n<li>打印如下内容表示安装成功：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Hugo Static Site Generator v0.57.2-A849CB2D windows&#x2F;amd64 BuildDate: 2019-08-17T17:54:13Z</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-生成站点\"><a href=\"#2-生成站点\" class=\"headerlink\" title=\"2. 生成站点\"></a>2. 生成站点</h4><p>切换至想要创建的目录，运行：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hugo new site myblog</span><br></pre></td></tr></table></figure>\n<p>打印如下内容表示生成站点成功：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Congratulations! Your new Hugo site is created</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-下载主题\"><a href=\"#3-下载主题\" class=\"headerlink\" title=\"3. 下载主题\"></a>3. 下载主题</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd myblog</span><br><span class=\"line\">git clone https:&#x2F;&#x2F;github.com&#x2F;vaga&#x2F;hugo-theme-m10c.git themes&#x2F;m10c</span><br></pre></td></tr></table></figure>\n<p>打印如下内容表示主题下载成功：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Cloning into &#39;themes&#x2F;m10c&#39;...</span><br><span class=\"line\">remote: Enumerating objects: 18, done.</span><br><span class=\"line\">remote: Counting objects: 100% (18&#x2F;18), done.</span><br><span class=\"line\">remote: Compressing objects: 100% (17&#x2F;17), done.</span><br><span class=\"line\">remote: Total 265 (delta 4), reused 11 (delta 1), pack-reused 247</span><br><span class=\"line\">Receiving objects:  65% (173&#x2F;265), 420.01 KiB | 136.00 KiB&#x2F;s</span><br><span class=\"line\">Receiving objects: 100% (265&#x2F;265), 447.54 KiB | 140.00 KiB&#x2F;s, done.</span><br><span class=\"line\">Resolving deltas: 100% (82&#x2F;82), done.</span><br></pre></td></tr></table></figure>\n<h4 id=\"4-创建文章\"><a href=\"#4-创建文章\" class=\"headerlink\" title=\"4. 创建文章\"></a>4. 创建文章</h4><p>在命令行输入：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hugo new post&#x2F;blog.md</span><br></pre></td></tr></table></figure>\n<p>会显示：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myblog\\content\\post\\myblog.md created</span><br></pre></td></tr></table></figure>\n<p>创建的文章会自动生成到content目录下，你可以去对应的目录找到刚刚创建的文章，使用markdown编辑器编辑你的博客。</p>\n<h4 id=\"5-本地启动\"><a href=\"#5-本地启动\" class=\"headerlink\" title=\"5. 本地启动\"></a>5. 本地启动</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hugo server -t m10c --buildDrafts</span><br></pre></td></tr></table></figure>\n<p>打印如下内容表示本地启动成功：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Building sites …</span><br><span class=\"line\">                   | EN</span><br><span class=\"line\">+------------------+----+</span><br><span class=\"line\">  Pages            |  7</span><br><span class=\"line\">  Paginator pages  |  0</span><br><span class=\"line\">  Non-page files   |  0</span><br><span class=\"line\">  Static files     |  1</span><br><span class=\"line\">  Processed images |  0</span><br><span class=\"line\">  Aliases          |  3</span><br><span class=\"line\">  Sitemaps         |  1</span><br><span class=\"line\">  Cleaned          |  0</span><br><span class=\"line\"></span><br><span class=\"line\">Total in 77 ms</span><br><span class=\"line\">Watching for changes in D:\\qwwww\\mmmqqq\\&#123;archetypes,content,data,layouts,static,themes&#125;</span><br><span class=\"line\">Watching for config changes in D:\\qwwww\\mmmqqq\\config.toml</span><br><span class=\"line\">Environment: &quot;development&quot;</span><br><span class=\"line\">Serving pages from memory</span><br><span class=\"line\">Running in Fast Render Mode. For full rebuilds on change: hugo server --disableFastRender</span><br><span class=\"line\">Web Server is available at http:&#x2F;&#x2F;localhost:1313&#x2F; (bind address 127.0.0.1)</span><br><span class=\"line\">Press Ctrl+C to stop</span><br></pre></td></tr></table></figure>\n\n<p>启动后安装提示访问<a href=\"http://localhost:1313/\">http://localhost:1313/</a>，就可以成功看到你的博客网站啦~</p>\n<h4 id=\"6-部署到github\"><a href=\"#6-部署到github\" class=\"headerlink\" title=\"6. 部署到github\"></a>6. 部署到github</h4><p>首先在你的github上创建一个新的仓库，这里命名很重要，否则会导致后续无法访问等问题，Repositor的名称要用<strong>你的github名.github.io</strong>，比如我的是<strong>longzhang0314.github.io</strong>否则会导致后续无法正常访问。<br><br><br>回到本地命令行，返回站点目录，输入如下命令，目的是生成最终页面：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hugo --theme&#x3D;m10c --baseUrl&#x3D;&quot;https:&#x2F;&#x2F;longzhang0314.github.io&quot; --buildDrafts</span><br></pre></td></tr></table></figure>\n<p>显示如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Building sites …</span><br><span class=\"line\">                   | EN</span><br><span class=\"line\">+------------------+----+</span><br><span class=\"line\">  Pages            | 10</span><br><span class=\"line\">  Paginator pages  |  0</span><br><span class=\"line\">  Non-page files   |  0</span><br><span class=\"line\">  Static files     |  1</span><br><span class=\"line\">  Processed images |  0</span><br><span class=\"line\">  Aliases          |  4</span><br><span class=\"line\">  Sitemaps         |  1</span><br><span class=\"line\">  Cleaned          |  0</span><br><span class=\"line\"></span><br><span class=\"line\">Total in 63 ms</span><br></pre></td></tr></table></figure>\n<p>此时，在站点目录下会生成一个public文件夹，这个文件夹中的内容就是我们的博客展示的静态资源了，我们只需要把这个文件夹中的内容push到master分支即可，命令如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd public</span><br><span class=\"line\">git init</span><br><span class=\"line\">git remote add origin https:&#x2F;&#x2F;github.com&#x2F;longzhang0314&#x2F;longzhang0314.github.io.git</span><br><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m &quot;我的 hugo 博客第一次提交&quot;</span><br><span class=\"line\">git push -u origin master</span><br></pre></td></tr></table></figure>\n<p>命令行中最终显示：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Enumerating objects: 32, done.</span><br><span class=\"line\">Counting objects: 100% (32&#x2F;32), done.</span><br><span class=\"line\">Delta compression using up to 8 threads</span><br><span class=\"line\">Compressing objects: 100% (23&#x2F;23), done.</span><br><span class=\"line\">Writing objects: 100% (32&#x2F;32), 7.49 KiB | 1.07 MiB&#x2F;s, done.</span><br><span class=\"line\">Total 32 (delta 11), reused 0 (delta 0)</span><br><span class=\"line\">remote: Resolving deltas: 100% (11&#x2F;11), done.</span><br><span class=\"line\">To https:&#x2F;&#x2F;github.com&#x2F;longzhang0314&#x2F;longzhang0314.github.io.git</span><br><span class=\"line\"> * [new branch]      master -&gt; master</span><br><span class=\"line\">Branch &#39;master&#39; set up to track remote branch &#39;master&#39; from &#39;origin&#39;.</span><br></pre></td></tr></table></figure>\n<p>这就表示一切顺利了<del><br><br>浏览器中访问<a href=\"https://longzhang0314.github.io/\">https://longzhang0314.github.io</a>就可以看到你的博客啦</del></p>\n<h4 id=\"注：\"><a href=\"#注：\" class=\"headerlink\" title=\"注：\"></a>注：</h4><p>之后更换主题等操作以后可能会需要的指令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git pull origin master --allow-unrelated-histories</span><br></pre></td></tr></table></figure>"},{"title":"python学习1","date":"2020-04-22T14:50:21.000Z","_content":"\n**变量定义，输入**\n\n```python\nprint(\"zhanglong\")\nprint('*' * 10)\n#---------------------------------------\nprice = 10\nprice = 20\nrating = 2.9\nname = 'zhanglong'\nis_publish = True\nprint(price)\n#---------------------------------------\nname = input('What is your name?\\n')\nprint('Hi, ' + name)\n#---------------------------------------\nbirth_year = input('Birth year: ')\nprint(type(birth_year))\nage = 2020 - int(birth_year)\nprint(type(age))\nint()\nfloat()\nprint(age)\nweight_lbs = input('Weight (lbs): ')\nweight_kg = float(weight_lbs) * 0.45\nprint(weight_kg)\n```\n**字符串，格式化**\n```python\ncourse = \"Python's course\"\nprint(course)\ncourse = 'Python \"course\"'\nprint(course)\nprint(course[0]+'---'+course[-2])\nprint(course[0:3])\nprint(course[1:])\nprint(course[:5])\nprint(course[1:-1])\nemail = ''' \nHi long.\nThank you\n\nI am leaning python\n'''\nprint(email)\n#---------------------------------------\nfirst = 'John'\nlast = 'Smith'\nmessage = first + ' [' + last +'] is a coder'\nprint(message)\nmsg = f'{first} [{last}] is a coder'\nprint(msg)\n```\n\n**字符串API，数学运算**\n```python\ncourse = 'Python for Beginners'\nprint(len(course))\nprint(course.upper())\nprint(course.lower())\nprint(course)\nprint('----------------------------')\n\nprint(course.find('P'))\nprint(course.find('Beg'))\n\nprint('-------------------------------')\n\nprint(course.replace('Beginners', 'Absolute Begginners'))\n\nprint('Python' in course)\n#---------------------------------------\nprint(10 / 3)\nprint(10 // 3)\nprint(10 % 3)\n# 10的3次幂\nprint(10 ** 3)\n#---------------------------------------\nx = 10\nx = x + 3\nx += 3\nprint(x)\n\ny = 10 + 3 * 2 ** 2\nprint(y)\n```\n    ","source":"_posts/python学习1.md","raw":"---\ntitle: python学习1\ndate: 2020-04-22 22:50:21\ntags:\ncategories:\n- python\n---\n\n**变量定义，输入**\n\n```python\nprint(\"zhanglong\")\nprint('*' * 10)\n#---------------------------------------\nprice = 10\nprice = 20\nrating = 2.9\nname = 'zhanglong'\nis_publish = True\nprint(price)\n#---------------------------------------\nname = input('What is your name?\\n')\nprint('Hi, ' + name)\n#---------------------------------------\nbirth_year = input('Birth year: ')\nprint(type(birth_year))\nage = 2020 - int(birth_year)\nprint(type(age))\nint()\nfloat()\nprint(age)\nweight_lbs = input('Weight (lbs): ')\nweight_kg = float(weight_lbs) * 0.45\nprint(weight_kg)\n```\n**字符串，格式化**\n```python\ncourse = \"Python's course\"\nprint(course)\ncourse = 'Python \"course\"'\nprint(course)\nprint(course[0]+'---'+course[-2])\nprint(course[0:3])\nprint(course[1:])\nprint(course[:5])\nprint(course[1:-1])\nemail = ''' \nHi long.\nThank you\n\nI am leaning python\n'''\nprint(email)\n#---------------------------------------\nfirst = 'John'\nlast = 'Smith'\nmessage = first + ' [' + last +'] is a coder'\nprint(message)\nmsg = f'{first} [{last}] is a coder'\nprint(msg)\n```\n\n**字符串API，数学运算**\n```python\ncourse = 'Python for Beginners'\nprint(len(course))\nprint(course.upper())\nprint(course.lower())\nprint(course)\nprint('----------------------------')\n\nprint(course.find('P'))\nprint(course.find('Beg'))\n\nprint('-------------------------------')\n\nprint(course.replace('Beginners', 'Absolute Begginners'))\n\nprint('Python' in course)\n#---------------------------------------\nprint(10 / 3)\nprint(10 // 3)\nprint(10 % 3)\n# 10的3次幂\nprint(10 ** 3)\n#---------------------------------------\nx = 10\nx = x + 3\nx += 3\nprint(x)\n\ny = 10 + 3 * 2 ** 2\nprint(y)\n```\n    ","slug":"python学习1","published":1,"updated":"2021-11-23T14:19:16.396Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckwc7u3ml000mtc6c9qkg7w2a","content":"<p><strong>变量定义，输入</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(<span class=\"string\">&quot;zhanglong&quot;</span>)</span><br><span class=\"line\">print(<span class=\"string\">&#x27;*&#x27;</span> * <span class=\"number\">10</span>)</span><br><span class=\"line\"><span class=\"comment\">#---------------------------------------</span></span><br><span class=\"line\">price = <span class=\"number\">10</span></span><br><span class=\"line\">price = <span class=\"number\">20</span></span><br><span class=\"line\">rating = <span class=\"number\">2.9</span></span><br><span class=\"line\">name = <span class=\"string\">&#x27;zhanglong&#x27;</span></span><br><span class=\"line\">is_publish = <span class=\"literal\">True</span></span><br><span class=\"line\">print(price)</span><br><span class=\"line\"><span class=\"comment\">#---------------------------------------</span></span><br><span class=\"line\">name = input(<span class=\"string\">&#x27;What is your name?\\n&#x27;</span>)</span><br><span class=\"line\">print(<span class=\"string\">&#x27;Hi, &#x27;</span> + name)</span><br><span class=\"line\"><span class=\"comment\">#---------------------------------------</span></span><br><span class=\"line\">birth_year = input(<span class=\"string\">&#x27;Birth year: &#x27;</span>)</span><br><span class=\"line\">print(type(birth_year))</span><br><span class=\"line\">age = <span class=\"number\">2020</span> - int(birth_year)</span><br><span class=\"line\">print(type(age))</span><br><span class=\"line\">int()</span><br><span class=\"line\">float()</span><br><span class=\"line\">print(age)</span><br><span class=\"line\">weight_lbs = input(<span class=\"string\">&#x27;Weight (lbs): &#x27;</span>)</span><br><span class=\"line\">weight_kg = float(weight_lbs) * <span class=\"number\">0.45</span></span><br><span class=\"line\">print(weight_kg)</span><br></pre></td></tr></table></figure>\n<p><strong>字符串，格式化</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">course = <span class=\"string\">&quot;Python&#x27;s course&quot;</span></span><br><span class=\"line\">print(course)</span><br><span class=\"line\">course = <span class=\"string\">&#x27;Python &quot;course&quot;&#x27;</span></span><br><span class=\"line\">print(course)</span><br><span class=\"line\">print(course[<span class=\"number\">0</span>]+<span class=\"string\">&#x27;---&#x27;</span>+course[<span class=\"number\">-2</span>])</span><br><span class=\"line\">print(course[<span class=\"number\">0</span>:<span class=\"number\">3</span>])</span><br><span class=\"line\">print(course[<span class=\"number\">1</span>:])</span><br><span class=\"line\">print(course[:<span class=\"number\">5</span>])</span><br><span class=\"line\">print(course[<span class=\"number\">1</span>:<span class=\"number\">-1</span>])</span><br><span class=\"line\">email = <span class=\"string\">&#x27;&#x27;&#x27; </span></span><br><span class=\"line\"><span class=\"string\">Hi long.</span></span><br><span class=\"line\"><span class=\"string\">Thank you</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">I am leaning python</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">print(email)</span><br><span class=\"line\"><span class=\"comment\">#---------------------------------------</span></span><br><span class=\"line\">first = <span class=\"string\">&#x27;John&#x27;</span></span><br><span class=\"line\">last = <span class=\"string\">&#x27;Smith&#x27;</span></span><br><span class=\"line\">message = first + <span class=\"string\">&#x27; [&#x27;</span> + last +<span class=\"string\">&#x27;] is a coder&#x27;</span></span><br><span class=\"line\">print(message)</span><br><span class=\"line\">msg = <span class=\"string\">f&#x27;<span class=\"subst\">&#123;first&#125;</span> [<span class=\"subst\">&#123;last&#125;</span>] is a coder&#x27;</span></span><br><span class=\"line\">print(msg)</span><br></pre></td></tr></table></figure>\n\n<p><strong>字符串API，数学运算</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">course = <span class=\"string\">&#x27;Python for Beginners&#x27;</span></span><br><span class=\"line\">print(len(course))</span><br><span class=\"line\">print(course.upper())</span><br><span class=\"line\">print(course.lower())</span><br><span class=\"line\">print(course)</span><br><span class=\"line\">print(<span class=\"string\">&#x27;----------------------------&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">print(course.find(<span class=\"string\">&#x27;P&#x27;</span>))</span><br><span class=\"line\">print(course.find(<span class=\"string\">&#x27;Beg&#x27;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">print(<span class=\"string\">&#x27;-------------------------------&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">print(course.replace(<span class=\"string\">&#x27;Beginners&#x27;</span>, <span class=\"string\">&#x27;Absolute Begginners&#x27;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">print(<span class=\"string\">&#x27;Python&#x27;</span> <span class=\"keyword\">in</span> course)</span><br><span class=\"line\"><span class=\"comment\">#---------------------------------------</span></span><br><span class=\"line\">print(<span class=\"number\">10</span> / <span class=\"number\">3</span>)</span><br><span class=\"line\">print(<span class=\"number\">10</span> // <span class=\"number\">3</span>)</span><br><span class=\"line\">print(<span class=\"number\">10</span> % <span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"comment\"># 10的3次幂</span></span><br><span class=\"line\">print(<span class=\"number\">10</span> ** <span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"comment\">#---------------------------------------</span></span><br><span class=\"line\">x = <span class=\"number\">10</span></span><br><span class=\"line\">x = x + <span class=\"number\">3</span></span><br><span class=\"line\">x += <span class=\"number\">3</span></span><br><span class=\"line\">print(x)</span><br><span class=\"line\"></span><br><span class=\"line\">y = <span class=\"number\">10</span> + <span class=\"number\">3</span> * <span class=\"number\">2</span> ** <span class=\"number\">2</span></span><br><span class=\"line\">print(y)</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>变量定义，输入</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(<span class=\"string\">&quot;zhanglong&quot;</span>)</span><br><span class=\"line\">print(<span class=\"string\">&#x27;*&#x27;</span> * <span class=\"number\">10</span>)</span><br><span class=\"line\"><span class=\"comment\">#---------------------------------------</span></span><br><span class=\"line\">price = <span class=\"number\">10</span></span><br><span class=\"line\">price = <span class=\"number\">20</span></span><br><span class=\"line\">rating = <span class=\"number\">2.9</span></span><br><span class=\"line\">name = <span class=\"string\">&#x27;zhanglong&#x27;</span></span><br><span class=\"line\">is_publish = <span class=\"literal\">True</span></span><br><span class=\"line\">print(price)</span><br><span class=\"line\"><span class=\"comment\">#---------------------------------------</span></span><br><span class=\"line\">name = input(<span class=\"string\">&#x27;What is your name?\\n&#x27;</span>)</span><br><span class=\"line\">print(<span class=\"string\">&#x27;Hi, &#x27;</span> + name)</span><br><span class=\"line\"><span class=\"comment\">#---------------------------------------</span></span><br><span class=\"line\">birth_year = input(<span class=\"string\">&#x27;Birth year: &#x27;</span>)</span><br><span class=\"line\">print(type(birth_year))</span><br><span class=\"line\">age = <span class=\"number\">2020</span> - int(birth_year)</span><br><span class=\"line\">print(type(age))</span><br><span class=\"line\">int()</span><br><span class=\"line\">float()</span><br><span class=\"line\">print(age)</span><br><span class=\"line\">weight_lbs = input(<span class=\"string\">&#x27;Weight (lbs): &#x27;</span>)</span><br><span class=\"line\">weight_kg = float(weight_lbs) * <span class=\"number\">0.45</span></span><br><span class=\"line\">print(weight_kg)</span><br></pre></td></tr></table></figure>\n<p><strong>字符串，格式化</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">course = <span class=\"string\">&quot;Python&#x27;s course&quot;</span></span><br><span class=\"line\">print(course)</span><br><span class=\"line\">course = <span class=\"string\">&#x27;Python &quot;course&quot;&#x27;</span></span><br><span class=\"line\">print(course)</span><br><span class=\"line\">print(course[<span class=\"number\">0</span>]+<span class=\"string\">&#x27;---&#x27;</span>+course[<span class=\"number\">-2</span>])</span><br><span class=\"line\">print(course[<span class=\"number\">0</span>:<span class=\"number\">3</span>])</span><br><span class=\"line\">print(course[<span class=\"number\">1</span>:])</span><br><span class=\"line\">print(course[:<span class=\"number\">5</span>])</span><br><span class=\"line\">print(course[<span class=\"number\">1</span>:<span class=\"number\">-1</span>])</span><br><span class=\"line\">email = <span class=\"string\">&#x27;&#x27;&#x27; </span></span><br><span class=\"line\"><span class=\"string\">Hi long.</span></span><br><span class=\"line\"><span class=\"string\">Thank you</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">I am leaning python</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">print(email)</span><br><span class=\"line\"><span class=\"comment\">#---------------------------------------</span></span><br><span class=\"line\">first = <span class=\"string\">&#x27;John&#x27;</span></span><br><span class=\"line\">last = <span class=\"string\">&#x27;Smith&#x27;</span></span><br><span class=\"line\">message = first + <span class=\"string\">&#x27; [&#x27;</span> + last +<span class=\"string\">&#x27;] is a coder&#x27;</span></span><br><span class=\"line\">print(message)</span><br><span class=\"line\">msg = <span class=\"string\">f&#x27;<span class=\"subst\">&#123;first&#125;</span> [<span class=\"subst\">&#123;last&#125;</span>] is a coder&#x27;</span></span><br><span class=\"line\">print(msg)</span><br></pre></td></tr></table></figure>\n\n<p><strong>字符串API，数学运算</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">course = <span class=\"string\">&#x27;Python for Beginners&#x27;</span></span><br><span class=\"line\">print(len(course))</span><br><span class=\"line\">print(course.upper())</span><br><span class=\"line\">print(course.lower())</span><br><span class=\"line\">print(course)</span><br><span class=\"line\">print(<span class=\"string\">&#x27;----------------------------&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">print(course.find(<span class=\"string\">&#x27;P&#x27;</span>))</span><br><span class=\"line\">print(course.find(<span class=\"string\">&#x27;Beg&#x27;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">print(<span class=\"string\">&#x27;-------------------------------&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">print(course.replace(<span class=\"string\">&#x27;Beginners&#x27;</span>, <span class=\"string\">&#x27;Absolute Begginners&#x27;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">print(<span class=\"string\">&#x27;Python&#x27;</span> <span class=\"keyword\">in</span> course)</span><br><span class=\"line\"><span class=\"comment\">#---------------------------------------</span></span><br><span class=\"line\">print(<span class=\"number\">10</span> / <span class=\"number\">3</span>)</span><br><span class=\"line\">print(<span class=\"number\">10</span> // <span class=\"number\">3</span>)</span><br><span class=\"line\">print(<span class=\"number\">10</span> % <span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"comment\"># 10的3次幂</span></span><br><span class=\"line\">print(<span class=\"number\">10</span> ** <span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"comment\">#---------------------------------------</span></span><br><span class=\"line\">x = <span class=\"number\">10</span></span><br><span class=\"line\">x = x + <span class=\"number\">3</span></span><br><span class=\"line\">x += <span class=\"number\">3</span></span><br><span class=\"line\">print(x)</span><br><span class=\"line\"></span><br><span class=\"line\">y = <span class=\"number\">10</span> + <span class=\"number\">3</span> * <span class=\"number\">2</span> ** <span class=\"number\">2</span></span><br><span class=\"line\">print(y)</span><br></pre></td></tr></table></figure>\n"},{"title":"单链表基本操作（上）","date":"2019-11-10T06:02:07.000Z","_content":"\n##### 链表作为最基本的两大数据结构之一，其重要性不言而喻，今天带大家一起回顾一下单链表最基本的一些操作。\n\n- 节点的定义：链表的基础是单个节点，首先来看节点的代码，比较简单，直接列出。\n\n```java\npublic static class Node {\n    private int data;\n    private Node next;\n\n    public Node(int data, Node next) {\n        this.data = data;\n        this.next = next;\n    }\n\n    public Node(int data){\n        this.data = data;\n    }\n\n    public int getData() {\n        return data;\n    }\n}\n```\n\n- 链表的打印：思路也比较简单，就是从头节点开始遍历并打印。\n\n```java\n// list为头节点\npublic static void printAll(Node list) {\n    Node p = list;\n    while (p != null) {\n        System.out.println(p.data + \" \");\n        p = p.next;\n    }\n    System.out.println();\n}\n```\n\n- 创建一个新节点：这里单独列出，目的是后续做链表添加节点等操作时减少重复代码。\n\n```java\npublic static Node createNode(int value) {\n        return new Node(value, null);\n}\n```\n\n- 尾插：尾插的思路比较简单，就是让原链表的最后一个节点的next指针指向待插入节点即可。将指定的值或节点插入链表尾部，插入值和插入节点最终都会调用插入节点，代码如下。\n\n```java\n// 将指定的值插入链表尾部\npublic static void insertTailByValue(Node list, int value) {\n    Node newNode = createNode(value);\n    // 调用将指定的节点插入链表尾部的方法\n    insertTailByNode(list,newNode);\n}\n\n// 将指定的节点插入链表尾部\npublic static void insertTailByNode(Node list,Node p) {\n    if (list == null) {\n            list = p;\n    } else {\n        Node q = list;\n        while (q.next != null) {\n            q = q.next;\n        }\n        p.next = list.next;\n        list.next = p;\n    }\n}\n```\n\n- 头插：将指定的值或节点插入链表头部，插入值和插入节点最终都会调用插入节点，代码如下。\n\n```java\n// 将指定的值插入链表头部\npublic static void insertHeadByValue(Node list, int value) {\n    Node newNode = createNode(value);\n    // 调用将指定的节点插入链表头部的方法\n    insertHeadByNode(list, newNode);\n}\n\n// 将指定的节点插入链表头部\npublic static void insertHeadByNode(Node list, Node p) {\n    if (list == null) {\n        list = p;\n    } else {\n        p.next = list;\n        list = p;\n    }\n}\n```\n\n- 查找：查找的思路也比较简单，根据链表的特性，从头节点往后遍历，查到就返回。\n\n```java\n//根据value查Node\npublic static Node findByValue(Node list, int value) {\n    Node p = list;\n    while (p != null && p.data != value) {\n        p = p.next;\n    }\n    return p;\n}\n\n//根据index查Node\npublic static Node findByIndex(Node list, int index) {\n    Node p = list;\n    int pos = 0;\n    while (p != null && pos != index) {\n        ++pos;\n        p = p.next;\n    }\n    return p;\n}\n```\n\n- 根据指定的值或指定的节点删除指定的节点：基本思路是遍历链表，找到待删除节点的前一个节点，让待删除节点的前一个节点的next指针值向它的下一个节点，需要注意边界条件的处理，代码如下。\n\n```java\n//根据value删除节点\npublic static void deleteByValue(Node list, int value) {\n    if (list == null)\n        return;\n    Node p = list;\n    Node q = null;\n    while (p != null && p.data != value) {\n        q = p;\n        p = p.next;\n    }\n    if (p == null)\n        return;\n    if (q == null) {\n        list = list.next;\n    } else {\n        q.next = q.next.next;\n    }\n}\n\n//根据Node删除节点\npublic static void deleteByNode(Node list, Node p) {\n    if (list == null || p == null)\n        return;\n    if (list == p) {\n        list = list.next;\n        return;\n    }\n\n    Node q = list;\n    while (q != null && q.next != p) {\n        q = q.next;\n    }\n    if (q == null)\n        return;\n    q.next = q.next.next;\n}\n```\n\n**总结**：单链表的基本操作理解起来还是比较容易的，不过链表代码涉及很多指针的移动以及边界条件的判断，要写出free bug的链表代码需要多写多练。单链表还有一些稍微进阶的代码，在单链表基本操（下）篇进行介绍。\n\n","source":"_posts/单链表基本操作（上）.md","raw":"---\ntitle: 单链表基本操作（上）\ndate: 2019-11-10 14:02:07\ntags:\ncategories:\n- 数据结构\n- 链表\n---\n\n##### 链表作为最基本的两大数据结构之一，其重要性不言而喻，今天带大家一起回顾一下单链表最基本的一些操作。\n\n- 节点的定义：链表的基础是单个节点，首先来看节点的代码，比较简单，直接列出。\n\n```java\npublic static class Node {\n    private int data;\n    private Node next;\n\n    public Node(int data, Node next) {\n        this.data = data;\n        this.next = next;\n    }\n\n    public Node(int data){\n        this.data = data;\n    }\n\n    public int getData() {\n        return data;\n    }\n}\n```\n\n- 链表的打印：思路也比较简单，就是从头节点开始遍历并打印。\n\n```java\n// list为头节点\npublic static void printAll(Node list) {\n    Node p = list;\n    while (p != null) {\n        System.out.println(p.data + \" \");\n        p = p.next;\n    }\n    System.out.println();\n}\n```\n\n- 创建一个新节点：这里单独列出，目的是后续做链表添加节点等操作时减少重复代码。\n\n```java\npublic static Node createNode(int value) {\n        return new Node(value, null);\n}\n```\n\n- 尾插：尾插的思路比较简单，就是让原链表的最后一个节点的next指针指向待插入节点即可。将指定的值或节点插入链表尾部，插入值和插入节点最终都会调用插入节点，代码如下。\n\n```java\n// 将指定的值插入链表尾部\npublic static void insertTailByValue(Node list, int value) {\n    Node newNode = createNode(value);\n    // 调用将指定的节点插入链表尾部的方法\n    insertTailByNode(list,newNode);\n}\n\n// 将指定的节点插入链表尾部\npublic static void insertTailByNode(Node list,Node p) {\n    if (list == null) {\n            list = p;\n    } else {\n        Node q = list;\n        while (q.next != null) {\n            q = q.next;\n        }\n        p.next = list.next;\n        list.next = p;\n    }\n}\n```\n\n- 头插：将指定的值或节点插入链表头部，插入值和插入节点最终都会调用插入节点，代码如下。\n\n```java\n// 将指定的值插入链表头部\npublic static void insertHeadByValue(Node list, int value) {\n    Node newNode = createNode(value);\n    // 调用将指定的节点插入链表头部的方法\n    insertHeadByNode(list, newNode);\n}\n\n// 将指定的节点插入链表头部\npublic static void insertHeadByNode(Node list, Node p) {\n    if (list == null) {\n        list = p;\n    } else {\n        p.next = list;\n        list = p;\n    }\n}\n```\n\n- 查找：查找的思路也比较简单，根据链表的特性，从头节点往后遍历，查到就返回。\n\n```java\n//根据value查Node\npublic static Node findByValue(Node list, int value) {\n    Node p = list;\n    while (p != null && p.data != value) {\n        p = p.next;\n    }\n    return p;\n}\n\n//根据index查Node\npublic static Node findByIndex(Node list, int index) {\n    Node p = list;\n    int pos = 0;\n    while (p != null && pos != index) {\n        ++pos;\n        p = p.next;\n    }\n    return p;\n}\n```\n\n- 根据指定的值或指定的节点删除指定的节点：基本思路是遍历链表，找到待删除节点的前一个节点，让待删除节点的前一个节点的next指针值向它的下一个节点，需要注意边界条件的处理，代码如下。\n\n```java\n//根据value删除节点\npublic static void deleteByValue(Node list, int value) {\n    if (list == null)\n        return;\n    Node p = list;\n    Node q = null;\n    while (p != null && p.data != value) {\n        q = p;\n        p = p.next;\n    }\n    if (p == null)\n        return;\n    if (q == null) {\n        list = list.next;\n    } else {\n        q.next = q.next.next;\n    }\n}\n\n//根据Node删除节点\npublic static void deleteByNode(Node list, Node p) {\n    if (list == null || p == null)\n        return;\n    if (list == p) {\n        list = list.next;\n        return;\n    }\n\n    Node q = list;\n    while (q != null && q.next != p) {\n        q = q.next;\n    }\n    if (q == null)\n        return;\n    q.next = q.next.next;\n}\n```\n\n**总结**：单链表的基本操作理解起来还是比较容易的，不过链表代码涉及很多指针的移动以及边界条件的判断，要写出free bug的链表代码需要多写多练。单链表还有一些稍微进阶的代码，在单链表基本操（下）篇进行介绍。\n\n","slug":"单链表基本操作（上）","published":1,"updated":"2021-11-23T14:19:16.396Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckwc7u3ml000ptc6c9k9t2tgp","content":"<h5 id=\"链表作为最基本的两大数据结构之一，其重要性不言而喻，今天带大家一起回顾一下单链表最基本的一些操作。\"><a href=\"#链表作为最基本的两大数据结构之一，其重要性不言而喻，今天带大家一起回顾一下单链表最基本的一些操作。\" class=\"headerlink\" title=\"链表作为最基本的两大数据结构之一，其重要性不言而喻，今天带大家一起回顾一下单链表最基本的一些操作。\"></a>链表作为最基本的两大数据结构之一，其重要性不言而喻，今天带大家一起回顾一下单链表最基本的一些操作。</h5><ul>\n<li>节点的定义：链表的基础是单个节点，首先来看节点的代码，比较简单，直接列出。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> data;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Node next;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Node</span><span class=\"params\">(<span class=\"keyword\">int</span> data, Node next)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.data = data;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.next = next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Node</span><span class=\"params\">(<span class=\"keyword\">int</span> data)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.data = data;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getData</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> data;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>链表的打印：思路也比较简单，就是从头节点开始遍历并打印。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// list为头节点</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">printAll</span><span class=\"params\">(Node list)</span> </span>&#123;</span><br><span class=\"line\">    Node p = list;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (p != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        System.out.println(p.data + <span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">        p = p.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    System.out.println();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>创建一个新节点：这里单独列出，目的是后续做链表添加节点等操作时减少重复代码。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Node <span class=\"title\">createNode</span><span class=\"params\">(<span class=\"keyword\">int</span> value)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Node(value, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>尾插：尾插的思路比较简单，就是让原链表的最后一个节点的next指针指向待插入节点即可。将指定的值或节点插入链表尾部，插入值和插入节点最终都会调用插入节点，代码如下。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 将指定的值插入链表尾部</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">insertTailByValue</span><span class=\"params\">(Node list, <span class=\"keyword\">int</span> value)</span> </span>&#123;</span><br><span class=\"line\">    Node newNode = createNode(value);</span><br><span class=\"line\">    <span class=\"comment\">// 调用将指定的节点插入链表尾部的方法</span></span><br><span class=\"line\">    insertTailByNode(list,newNode);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将指定的节点插入链表尾部</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">insertTailByNode</span><span class=\"params\">(Node list,Node p)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (list == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            list = p;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        Node q = list;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (q.next != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            q = q.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        p.next = list.next;</span><br><span class=\"line\">        list.next = p;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>头插：将指定的值或节点插入链表头部，插入值和插入节点最终都会调用插入节点，代码如下。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 将指定的值插入链表头部</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">insertHeadByValue</span><span class=\"params\">(Node list, <span class=\"keyword\">int</span> value)</span> </span>&#123;</span><br><span class=\"line\">    Node newNode = createNode(value);</span><br><span class=\"line\">    <span class=\"comment\">// 调用将指定的节点插入链表头部的方法</span></span><br><span class=\"line\">    insertHeadByNode(list, newNode);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将指定的节点插入链表头部</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">insertHeadByNode</span><span class=\"params\">(Node list, Node p)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (list == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        list = p;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        p.next = list;</span><br><span class=\"line\">        list = p;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>查找：查找的思路也比较简单，根据链表的特性，从头节点往后遍历，查到就返回。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//根据value查Node</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Node <span class=\"title\">findByValue</span><span class=\"params\">(Node list, <span class=\"keyword\">int</span> value)</span> </span>&#123;</span><br><span class=\"line\">    Node p = list;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (p != <span class=\"keyword\">null</span> &amp;&amp; p.data != value) &#123;</span><br><span class=\"line\">        p = p.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//根据index查Node</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Node <span class=\"title\">findByIndex</span><span class=\"params\">(Node list, <span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">    Node p = list;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> pos = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (p != <span class=\"keyword\">null</span> &amp;&amp; pos != index) &#123;</span><br><span class=\"line\">        ++pos;</span><br><span class=\"line\">        p = p.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>根据指定的值或指定的节点删除指定的节点：基本思路是遍历链表，找到待删除节点的前一个节点，让待删除节点的前一个节点的next指针值向它的下一个节点，需要注意边界条件的处理，代码如下。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//根据value删除节点</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">deleteByValue</span><span class=\"params\">(Node list, <span class=\"keyword\">int</span> value)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (list == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    Node p = list;</span><br><span class=\"line\">    Node q = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (p != <span class=\"keyword\">null</span> &amp;&amp; p.data != value) &#123;</span><br><span class=\"line\">        q = p;</span><br><span class=\"line\">        p = p.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (p == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (q == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        list = list.next;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        q.next = q.next.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//根据Node删除节点</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">deleteByNode</span><span class=\"params\">(Node list, Node p)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (list == <span class=\"keyword\">null</span> || p == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (list == p) &#123;</span><br><span class=\"line\">        list = list.next;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    Node q = list;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (q != <span class=\"keyword\">null</span> &amp;&amp; q.next != p) &#123;</span><br><span class=\"line\">        q = q.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (q == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    q.next = q.next.next;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>总结</strong>：单链表的基本操作理解起来还是比较容易的，不过链表代码涉及很多指针的移动以及边界条件的判断，要写出free bug的链表代码需要多写多练。单链表还有一些稍微进阶的代码，在单链表基本操（下）篇进行介绍。</p>\n","site":{"data":{}},"excerpt":"","more":"<h5 id=\"链表作为最基本的两大数据结构之一，其重要性不言而喻，今天带大家一起回顾一下单链表最基本的一些操作。\"><a href=\"#链表作为最基本的两大数据结构之一，其重要性不言而喻，今天带大家一起回顾一下单链表最基本的一些操作。\" class=\"headerlink\" title=\"链表作为最基本的两大数据结构之一，其重要性不言而喻，今天带大家一起回顾一下单链表最基本的一些操作。\"></a>链表作为最基本的两大数据结构之一，其重要性不言而喻，今天带大家一起回顾一下单链表最基本的一些操作。</h5><ul>\n<li>节点的定义：链表的基础是单个节点，首先来看节点的代码，比较简单，直接列出。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> data;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Node next;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Node</span><span class=\"params\">(<span class=\"keyword\">int</span> data, Node next)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.data = data;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.next = next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Node</span><span class=\"params\">(<span class=\"keyword\">int</span> data)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.data = data;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getData</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> data;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>链表的打印：思路也比较简单，就是从头节点开始遍历并打印。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// list为头节点</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">printAll</span><span class=\"params\">(Node list)</span> </span>&#123;</span><br><span class=\"line\">    Node p = list;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (p != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        System.out.println(p.data + <span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">        p = p.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    System.out.println();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>创建一个新节点：这里单独列出，目的是后续做链表添加节点等操作时减少重复代码。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Node <span class=\"title\">createNode</span><span class=\"params\">(<span class=\"keyword\">int</span> value)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Node(value, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>尾插：尾插的思路比较简单，就是让原链表的最后一个节点的next指针指向待插入节点即可。将指定的值或节点插入链表尾部，插入值和插入节点最终都会调用插入节点，代码如下。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 将指定的值插入链表尾部</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">insertTailByValue</span><span class=\"params\">(Node list, <span class=\"keyword\">int</span> value)</span> </span>&#123;</span><br><span class=\"line\">    Node newNode = createNode(value);</span><br><span class=\"line\">    <span class=\"comment\">// 调用将指定的节点插入链表尾部的方法</span></span><br><span class=\"line\">    insertTailByNode(list,newNode);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将指定的节点插入链表尾部</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">insertTailByNode</span><span class=\"params\">(Node list,Node p)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (list == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            list = p;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        Node q = list;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (q.next != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            q = q.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        p.next = list.next;</span><br><span class=\"line\">        list.next = p;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>头插：将指定的值或节点插入链表头部，插入值和插入节点最终都会调用插入节点，代码如下。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 将指定的值插入链表头部</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">insertHeadByValue</span><span class=\"params\">(Node list, <span class=\"keyword\">int</span> value)</span> </span>&#123;</span><br><span class=\"line\">    Node newNode = createNode(value);</span><br><span class=\"line\">    <span class=\"comment\">// 调用将指定的节点插入链表头部的方法</span></span><br><span class=\"line\">    insertHeadByNode(list, newNode);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将指定的节点插入链表头部</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">insertHeadByNode</span><span class=\"params\">(Node list, Node p)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (list == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        list = p;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        p.next = list;</span><br><span class=\"line\">        list = p;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>查找：查找的思路也比较简单，根据链表的特性，从头节点往后遍历，查到就返回。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//根据value查Node</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Node <span class=\"title\">findByValue</span><span class=\"params\">(Node list, <span class=\"keyword\">int</span> value)</span> </span>&#123;</span><br><span class=\"line\">    Node p = list;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (p != <span class=\"keyword\">null</span> &amp;&amp; p.data != value) &#123;</span><br><span class=\"line\">        p = p.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//根据index查Node</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Node <span class=\"title\">findByIndex</span><span class=\"params\">(Node list, <span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">    Node p = list;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> pos = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (p != <span class=\"keyword\">null</span> &amp;&amp; pos != index) &#123;</span><br><span class=\"line\">        ++pos;</span><br><span class=\"line\">        p = p.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>根据指定的值或指定的节点删除指定的节点：基本思路是遍历链表，找到待删除节点的前一个节点，让待删除节点的前一个节点的next指针值向它的下一个节点，需要注意边界条件的处理，代码如下。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//根据value删除节点</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">deleteByValue</span><span class=\"params\">(Node list, <span class=\"keyword\">int</span> value)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (list == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    Node p = list;</span><br><span class=\"line\">    Node q = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (p != <span class=\"keyword\">null</span> &amp;&amp; p.data != value) &#123;</span><br><span class=\"line\">        q = p;</span><br><span class=\"line\">        p = p.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (p == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (q == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        list = list.next;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        q.next = q.next.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//根据Node删除节点</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">deleteByNode</span><span class=\"params\">(Node list, Node p)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (list == <span class=\"keyword\">null</span> || p == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (list == p) &#123;</span><br><span class=\"line\">        list = list.next;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    Node q = list;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (q != <span class=\"keyword\">null</span> &amp;&amp; q.next != p) &#123;</span><br><span class=\"line\">        q = q.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (q == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    q.next = q.next.next;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>总结</strong>：单链表的基本操作理解起来还是比较容易的，不过链表代码涉及很多指针的移动以及边界条件的判断，要写出free bug的链表代码需要多写多练。单链表还有一些稍微进阶的代码，在单链表基本操（下）篇进行介绍。</p>\n"},{"title":"单链表基本操作（下）","date":"2019-11-11T02:18:10.000Z","_content":"\n##### 在单链表基本操作（上）介绍了单链表最基本的操作，这节介绍一些相对进阶的操作。\n\n- 单链表反转：遍历当前链表，首先创造一个临时节点保存当前节点的下一个节点，然后让当前节点的指针指向前一个节点，依次遍历，直到所有的指针反转，代码相对比较简单，时间复杂度是O(n)，空间复杂度是O(n)。\n\n```java\npublic static Node reverse(Node list) {\n    Node cur = list, pre = null;\n    while (cur != null) {\n        Node next = cur.next;\n        cur.next = pre;\n\n        pre = cur;\n        cur = next;\n    }\n    return pre;\n}\n```\n\n- 检测链表是否有环：\n  - 方法一：每遍历一个新的节点，都和之前的所有节点进行比较，如果存在相同的节点，说明有环。这种方式的时间复杂度是O(n*n)；\n  - 方法二：创建一个HashSet集合，用来存储遍历过的节点，每遍历一个新节点，都add进HashSet中，如果HashSet中存在相同的节点，返回false，链表成环。这种方式的时间复杂度是O(n)，空间复杂度是O(n)。\n  - 方法三：采用快慢指针，快指针一次走两步，慢指针一次走一步，如果链表成环，快慢指针总会相遇，数学证明这里就不介绍了，直接上代码，代码的时间复杂度是O(n)，空间复杂度是O(1)。(这里很多快慢指针其实都可以从起点开始，但是因为快慢指针总会相遇，快指针先走一步，会相应的减少方法所用的时长)。\n\n```java\npublic static boolean checkCircle(Node lsit){\n    if(list == null)return false;\n    Node fast = list.next;\n    Node slow = list;\n    while(fast != null && fast.next != null){\n        fast = fast.next.next;\n        slow = slow.next;\n        if(slow == fast){\n            return true;\n        }\n    }\n    return false;\n}\n```\n\n- 求链表的中间节点：技巧和检测链表成环相似，也是使用快慢指针，快指针一次走两步，慢指针一次走一步，当快指针走完整个链表时，慢指针刚好走到链表的中点。代码的时间复杂度是O(n)，空间复杂度是O(1)。\n\n```java\npublic static Node findMiddleNode(Node list){\n    if(list == null)return null;\n    Node slow = list;\n    Node fast = list;\n    while(fast != null && fast.next != null){\n        fast = fast.next.next;\n        slow = slow.next;\n    }\n    return slow;\n}\n```\n\n- 删除链表的倒数第K个节点（K为正数）：\n  - 方法一：先遍历链表求出链表的长度n，然后将问题转化为删除正数第n-K个节点，这种方法遍历了两次链表，时间复杂度是O(n)。\n  - 方法二：采用快慢指针法：快慢指针每次都走一步，快指针先走。先让快指针达到正数第K的位置，然后慢指针从链表头开始出发，当快指针走完整个链表时，慢指针刚好走到n-K的位置，即倒数第K的位置，删除该节点，这种方法的时间复杂度也是O(n)，但是因为只遍历了一次链表，所以要比第一种方法更快。代码如下。\n\n```java\npublic static Node deleteLastKth(Node list, int k){\n    Node fast = list;\n    int i = 1;\n    // fast指针到达正数第k个位置\n    while(fast != null && i<k){\n        fast = fast.next;\n        ++i;\n    }\n    // list为null或k大于链表长度\n    if(fast == null){\n        return list;\n    }\n    \n    Node slow = list;//慢指针，同时也是待删除节点\n    Node pre  = null;//待删除节点的前一个节点\n    // 走过n-k个位置，slow到达倒数第k的位置\n    while(fast != null){\n        fast = fast.next;\n        pre = slow;\n        slow = slow.next;\n    }\n    \n    if(pre==null){//删除头节点\n        list = list.next;\n    }else{//删除其他节点\n        pre.next = pre.next.next;\n    }\n    return list;\n}\n```\n\n- 判断两个链表是否一致：遍历两个链表，然后比较每个位置的值是否一致即可。时间复杂度时O(n)，空间复杂度时O(1)。\n\n```java\npublic static boolean TFResult(Node left,Node right){\n\tNode l = left;\n\tNode r = right;\n\twhile(l!=null && r!=null){\n\t\tif(l.data == r.data){\n\t\t\tl = l.next;\n\t\t\tr = r.next;\n\t\t}else{\n\t\t\tbreak;\n\t\t}\n\t}\n\tif(l==null && r==null)return true;\n\treturn false;\n}\n```\n\n- 两个有序链表合并成一个有序链表：思路就是新创建一个链表，然后遍历比较两个有序链表的每一个节点的值，更小的放入新节点中，最后将剩余的链表中的剩余节点依次放入新链表中即可。时间复杂度O(n)，空间复杂度O(n)。\n\n```java\n//方式一：从两个链表中获得更小的头节点\npublic Node mergeTwoLisrts(Node l1,Node l2){\n    if(l1 == null)return l2;\n    if(l2 == null)return l1;\n    Node head;\n    Node p = l1;\n    Node q = l2;\n    if(l1.data<l2.data){\n        head = l1;\n        p = p.next;\n    }else{\n        head = l2;\n        q = q.next;\n    }\n    Node r = head;\n    while(p != null && q != null){\n        if(p.daa<q.data){\n            r.next = p;\n            p = p.next;\n        }else{\n            r.next = q;\n            q = q.next;\n        }\n    }\n    if(p != null){\n        r..next = p;\n    }else{\n        r.next = q;\n    }\n    return head;\n}\n\n//方式二：考虑到方式一中对于头节点的选择做了大量的判断，所以方式二使用哨兵的方式进行改进\npublic Node mergeTwoLists2(Node l1, Node l2){\n    Node solider = new Node(0);\n    Node p = solider;\n    while(l1 != null && l2 != null){\n        if(l1.data<l2.data){\n            p.next = l1;\n            l1 = l1.next;\n        }else{\n            p.next = l2;\n            l2 = l2.next;\n        }\n        p = p.next;\n    }\n    if(l1 == null){\n        p.next = l2;\n    }else{\n        p.next = l1;\n    }\n    return solider.next;\n}\n```\n\n**总结**：今天介绍了单链表比较常用的一些进阶操作，单链表操作的本质无非就是根据每个节点都保存有下一个节点的内存地址，通过遍历等操作找到要操作的节点，思路不是很难。其中涉及到了一些技巧，包括临时存储后面要用的节点，快慢双指针，哨兵。在改变指针指向的时候尤其需要注意不要丢失原本可用节点的地址，注意细节，就能写好单链表代码。","source":"_posts/单链表基本操作（下）.md","raw":"---\ntitle: 单链表基本操作（下）\ndate: 2019-11-11 10:18:10\ntags:\ncategories:\n- 数据结构\n- 链表\n---\n\n##### 在单链表基本操作（上）介绍了单链表最基本的操作，这节介绍一些相对进阶的操作。\n\n- 单链表反转：遍历当前链表，首先创造一个临时节点保存当前节点的下一个节点，然后让当前节点的指针指向前一个节点，依次遍历，直到所有的指针反转，代码相对比较简单，时间复杂度是O(n)，空间复杂度是O(n)。\n\n```java\npublic static Node reverse(Node list) {\n    Node cur = list, pre = null;\n    while (cur != null) {\n        Node next = cur.next;\n        cur.next = pre;\n\n        pre = cur;\n        cur = next;\n    }\n    return pre;\n}\n```\n\n- 检测链表是否有环：\n  - 方法一：每遍历一个新的节点，都和之前的所有节点进行比较，如果存在相同的节点，说明有环。这种方式的时间复杂度是O(n*n)；\n  - 方法二：创建一个HashSet集合，用来存储遍历过的节点，每遍历一个新节点，都add进HashSet中，如果HashSet中存在相同的节点，返回false，链表成环。这种方式的时间复杂度是O(n)，空间复杂度是O(n)。\n  - 方法三：采用快慢指针，快指针一次走两步，慢指针一次走一步，如果链表成环，快慢指针总会相遇，数学证明这里就不介绍了，直接上代码，代码的时间复杂度是O(n)，空间复杂度是O(1)。(这里很多快慢指针其实都可以从起点开始，但是因为快慢指针总会相遇，快指针先走一步，会相应的减少方法所用的时长)。\n\n```java\npublic static boolean checkCircle(Node lsit){\n    if(list == null)return false;\n    Node fast = list.next;\n    Node slow = list;\n    while(fast != null && fast.next != null){\n        fast = fast.next.next;\n        slow = slow.next;\n        if(slow == fast){\n            return true;\n        }\n    }\n    return false;\n}\n```\n\n- 求链表的中间节点：技巧和检测链表成环相似，也是使用快慢指针，快指针一次走两步，慢指针一次走一步，当快指针走完整个链表时，慢指针刚好走到链表的中点。代码的时间复杂度是O(n)，空间复杂度是O(1)。\n\n```java\npublic static Node findMiddleNode(Node list){\n    if(list == null)return null;\n    Node slow = list;\n    Node fast = list;\n    while(fast != null && fast.next != null){\n        fast = fast.next.next;\n        slow = slow.next;\n    }\n    return slow;\n}\n```\n\n- 删除链表的倒数第K个节点（K为正数）：\n  - 方法一：先遍历链表求出链表的长度n，然后将问题转化为删除正数第n-K个节点，这种方法遍历了两次链表，时间复杂度是O(n)。\n  - 方法二：采用快慢指针法：快慢指针每次都走一步，快指针先走。先让快指针达到正数第K的位置，然后慢指针从链表头开始出发，当快指针走完整个链表时，慢指针刚好走到n-K的位置，即倒数第K的位置，删除该节点，这种方法的时间复杂度也是O(n)，但是因为只遍历了一次链表，所以要比第一种方法更快。代码如下。\n\n```java\npublic static Node deleteLastKth(Node list, int k){\n    Node fast = list;\n    int i = 1;\n    // fast指针到达正数第k个位置\n    while(fast != null && i<k){\n        fast = fast.next;\n        ++i;\n    }\n    // list为null或k大于链表长度\n    if(fast == null){\n        return list;\n    }\n    \n    Node slow = list;//慢指针，同时也是待删除节点\n    Node pre  = null;//待删除节点的前一个节点\n    // 走过n-k个位置，slow到达倒数第k的位置\n    while(fast != null){\n        fast = fast.next;\n        pre = slow;\n        slow = slow.next;\n    }\n    \n    if(pre==null){//删除头节点\n        list = list.next;\n    }else{//删除其他节点\n        pre.next = pre.next.next;\n    }\n    return list;\n}\n```\n\n- 判断两个链表是否一致：遍历两个链表，然后比较每个位置的值是否一致即可。时间复杂度时O(n)，空间复杂度时O(1)。\n\n```java\npublic static boolean TFResult(Node left,Node right){\n\tNode l = left;\n\tNode r = right;\n\twhile(l!=null && r!=null){\n\t\tif(l.data == r.data){\n\t\t\tl = l.next;\n\t\t\tr = r.next;\n\t\t}else{\n\t\t\tbreak;\n\t\t}\n\t}\n\tif(l==null && r==null)return true;\n\treturn false;\n}\n```\n\n- 两个有序链表合并成一个有序链表：思路就是新创建一个链表，然后遍历比较两个有序链表的每一个节点的值，更小的放入新节点中，最后将剩余的链表中的剩余节点依次放入新链表中即可。时间复杂度O(n)，空间复杂度O(n)。\n\n```java\n//方式一：从两个链表中获得更小的头节点\npublic Node mergeTwoLisrts(Node l1,Node l2){\n    if(l1 == null)return l2;\n    if(l2 == null)return l1;\n    Node head;\n    Node p = l1;\n    Node q = l2;\n    if(l1.data<l2.data){\n        head = l1;\n        p = p.next;\n    }else{\n        head = l2;\n        q = q.next;\n    }\n    Node r = head;\n    while(p != null && q != null){\n        if(p.daa<q.data){\n            r.next = p;\n            p = p.next;\n        }else{\n            r.next = q;\n            q = q.next;\n        }\n    }\n    if(p != null){\n        r..next = p;\n    }else{\n        r.next = q;\n    }\n    return head;\n}\n\n//方式二：考虑到方式一中对于头节点的选择做了大量的判断，所以方式二使用哨兵的方式进行改进\npublic Node mergeTwoLists2(Node l1, Node l2){\n    Node solider = new Node(0);\n    Node p = solider;\n    while(l1 != null && l2 != null){\n        if(l1.data<l2.data){\n            p.next = l1;\n            l1 = l1.next;\n        }else{\n            p.next = l2;\n            l2 = l2.next;\n        }\n        p = p.next;\n    }\n    if(l1 == null){\n        p.next = l2;\n    }else{\n        p.next = l1;\n    }\n    return solider.next;\n}\n```\n\n**总结**：今天介绍了单链表比较常用的一些进阶操作，单链表操作的本质无非就是根据每个节点都保存有下一个节点的内存地址，通过遍历等操作找到要操作的节点，思路不是很难。其中涉及到了一些技巧，包括临时存储后面要用的节点，快慢双指针，哨兵。在改变指针指向的时候尤其需要注意不要丢失原本可用节点的地址，注意细节，就能写好单链表代码。","slug":"单链表基本操作（下）","published":1,"updated":"2021-11-23T14:19:16.396Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckwc7u3mm000qtc6c8eyy8lsv","content":"<h5 id=\"在单链表基本操作（上）介绍了单链表最基本的操作，这节介绍一些相对进阶的操作。\"><a href=\"#在单链表基本操作（上）介绍了单链表最基本的操作，这节介绍一些相对进阶的操作。\" class=\"headerlink\" title=\"在单链表基本操作（上）介绍了单链表最基本的操作，这节介绍一些相对进阶的操作。\"></a>在单链表基本操作（上）介绍了单链表最基本的操作，这节介绍一些相对进阶的操作。</h5><ul>\n<li>单链表反转：遍历当前链表，首先创造一个临时节点保存当前节点的下一个节点，然后让当前节点的指针指向前一个节点，依次遍历，直到所有的指针反转，代码相对比较简单，时间复杂度是O(n)，空间复杂度是O(n)。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Node <span class=\"title\">reverse</span><span class=\"params\">(Node list)</span> </span>&#123;</span><br><span class=\"line\">    Node cur = list, pre = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (cur != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        Node next = cur.next;</span><br><span class=\"line\">        cur.next = pre;</span><br><span class=\"line\"></span><br><span class=\"line\">        pre = cur;</span><br><span class=\"line\">        cur = next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> pre;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>检测链表是否有环：<ul>\n<li>方法一：每遍历一个新的节点，都和之前的所有节点进行比较，如果存在相同的节点，说明有环。这种方式的时间复杂度是O(n*n)；</li>\n<li>方法二：创建一个HashSet集合，用来存储遍历过的节点，每遍历一个新节点，都add进HashSet中，如果HashSet中存在相同的节点，返回false，链表成环。这种方式的时间复杂度是O(n)，空间复杂度是O(n)。</li>\n<li>方法三：采用快慢指针，快指针一次走两步，慢指针一次走一步，如果链表成环，快慢指针总会相遇，数学证明这里就不介绍了，直接上代码，代码的时间复杂度是O(n)，空间复杂度是O(1)。(这里很多快慢指针其实都可以从起点开始，但是因为快慢指针总会相遇，快指针先走一步，会相应的减少方法所用的时长)。</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">checkCircle</span><span class=\"params\">(Node lsit)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(list == <span class=\"keyword\">null</span>)<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    Node fast = list.next;</span><br><span class=\"line\">    Node slow = list;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(fast != <span class=\"keyword\">null</span> &amp;&amp; fast.next != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        fast = fast.next.next;</span><br><span class=\"line\">        slow = slow.next;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(slow == fast)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>求链表的中间节点：技巧和检测链表成环相似，也是使用快慢指针，快指针一次走两步，慢指针一次走一步，当快指针走完整个链表时，慢指针刚好走到链表的中点。代码的时间复杂度是O(n)，空间复杂度是O(1)。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Node <span class=\"title\">findMiddleNode</span><span class=\"params\">(Node list)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(list == <span class=\"keyword\">null</span>)<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    Node slow = list;</span><br><span class=\"line\">    Node fast = list;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(fast != <span class=\"keyword\">null</span> &amp;&amp; fast.next != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        fast = fast.next.next;</span><br><span class=\"line\">        slow = slow.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> slow;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>删除链表的倒数第K个节点（K为正数）：<ul>\n<li>方法一：先遍历链表求出链表的长度n，然后将问题转化为删除正数第n-K个节点，这种方法遍历了两次链表，时间复杂度是O(n)。</li>\n<li>方法二：采用快慢指针法：快慢指针每次都走一步，快指针先走。先让快指针达到正数第K的位置，然后慢指针从链表头开始出发，当快指针走完整个链表时，慢指针刚好走到n-K的位置，即倒数第K的位置，删除该节点，这种方法的时间复杂度也是O(n)，但是因为只遍历了一次链表，所以要比第一种方法更快。代码如下。</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Node <span class=\"title\">deleteLastKth</span><span class=\"params\">(Node list, <span class=\"keyword\">int</span> k)</span></span>&#123;</span><br><span class=\"line\">    Node fast = list;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"comment\">// fast指针到达正数第k个位置</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(fast != <span class=\"keyword\">null</span> &amp;&amp; i&lt;k)&#123;</span><br><span class=\"line\">        fast = fast.next;</span><br><span class=\"line\">        ++i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// list为null或k大于链表长度</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(fast == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> list;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    Node slow = list;<span class=\"comment\">//慢指针，同时也是待删除节点</span></span><br><span class=\"line\">    Node pre  = <span class=\"keyword\">null</span>;<span class=\"comment\">//待删除节点的前一个节点</span></span><br><span class=\"line\">    <span class=\"comment\">// 走过n-k个位置，slow到达倒数第k的位置</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(fast != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        fast = fast.next;</span><br><span class=\"line\">        pre = slow;</span><br><span class=\"line\">        slow = slow.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(pre==<span class=\"keyword\">null</span>)&#123;<span class=\"comment\">//删除头节点</span></span><br><span class=\"line\">        list = list.next;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;<span class=\"comment\">//删除其他节点</span></span><br><span class=\"line\">        pre.next = pre.next.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> list;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>判断两个链表是否一致：遍历两个链表，然后比较每个位置的值是否一致即可。时间复杂度时O(n)，空间复杂度时O(1)。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">TFResult</span><span class=\"params\">(Node left,Node right)</span></span>&#123;</span><br><span class=\"line\">\tNode l = left;</span><br><span class=\"line\">\tNode r = right;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(l!=<span class=\"keyword\">null</span> &amp;&amp; r!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(l.data == r.data)&#123;</span><br><span class=\"line\">\t\t\tl = l.next;</span><br><span class=\"line\">\t\t\tr = r.next;</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(l==<span class=\"keyword\">null</span> &amp;&amp; r==<span class=\"keyword\">null</span>)<span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>两个有序链表合并成一个有序链表：思路就是新创建一个链表，然后遍历比较两个有序链表的每一个节点的值，更小的放入新节点中，最后将剩余的链表中的剩余节点依次放入新链表中即可。时间复杂度O(n)，空间复杂度O(n)。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//方式一：从两个链表中获得更小的头节点</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Node <span class=\"title\">mergeTwoLisrts</span><span class=\"params\">(Node l1,Node l2)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l1 == <span class=\"keyword\">null</span>)<span class=\"keyword\">return</span> l2;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l2 == <span class=\"keyword\">null</span>)<span class=\"keyword\">return</span> l1;</span><br><span class=\"line\">    Node head;</span><br><span class=\"line\">    Node p = l1;</span><br><span class=\"line\">    Node q = l2;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l1.data&lt;l2.data)&#123;</span><br><span class=\"line\">        head = l1;</span><br><span class=\"line\">        p = p.next;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        head = l2;</span><br><span class=\"line\">        q = q.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Node r = head;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(p != <span class=\"keyword\">null</span> &amp;&amp; q != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(p.daa&lt;q.data)&#123;</span><br><span class=\"line\">            r.next = p;</span><br><span class=\"line\">            p = p.next;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            r.next = q;</span><br><span class=\"line\">            q = q.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(p != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        r..next = p;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        r.next = q;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//方式二：考虑到方式一中对于头节点的选择做了大量的判断，所以方式二使用哨兵的方式进行改进</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Node <span class=\"title\">mergeTwoLists2</span><span class=\"params\">(Node l1, Node l2)</span></span>&#123;</span><br><span class=\"line\">    Node solider = <span class=\"keyword\">new</span> Node(<span class=\"number\">0</span>);</span><br><span class=\"line\">    Node p = solider;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(l1 != <span class=\"keyword\">null</span> &amp;&amp; l2 != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(l1.data&lt;l2.data)&#123;</span><br><span class=\"line\">            p.next = l1;</span><br><span class=\"line\">            l1 = l1.next;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            p.next = l2;</span><br><span class=\"line\">            l2 = l2.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        p = p.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l1 == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        p.next = l2;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        p.next = l1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> solider.next;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>总结</strong>：今天介绍了单链表比较常用的一些进阶操作，单链表操作的本质无非就是根据每个节点都保存有下一个节点的内存地址，通过遍历等操作找到要操作的节点，思路不是很难。其中涉及到了一些技巧，包括临时存储后面要用的节点，快慢双指针，哨兵。在改变指针指向的时候尤其需要注意不要丢失原本可用节点的地址，注意细节，就能写好单链表代码。</p>\n","site":{"data":{}},"excerpt":"","more":"<h5 id=\"在单链表基本操作（上）介绍了单链表最基本的操作，这节介绍一些相对进阶的操作。\"><a href=\"#在单链表基本操作（上）介绍了单链表最基本的操作，这节介绍一些相对进阶的操作。\" class=\"headerlink\" title=\"在单链表基本操作（上）介绍了单链表最基本的操作，这节介绍一些相对进阶的操作。\"></a>在单链表基本操作（上）介绍了单链表最基本的操作，这节介绍一些相对进阶的操作。</h5><ul>\n<li>单链表反转：遍历当前链表，首先创造一个临时节点保存当前节点的下一个节点，然后让当前节点的指针指向前一个节点，依次遍历，直到所有的指针反转，代码相对比较简单，时间复杂度是O(n)，空间复杂度是O(n)。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Node <span class=\"title\">reverse</span><span class=\"params\">(Node list)</span> </span>&#123;</span><br><span class=\"line\">    Node cur = list, pre = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (cur != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        Node next = cur.next;</span><br><span class=\"line\">        cur.next = pre;</span><br><span class=\"line\"></span><br><span class=\"line\">        pre = cur;</span><br><span class=\"line\">        cur = next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> pre;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>检测链表是否有环：<ul>\n<li>方法一：每遍历一个新的节点，都和之前的所有节点进行比较，如果存在相同的节点，说明有环。这种方式的时间复杂度是O(n*n)；</li>\n<li>方法二：创建一个HashSet集合，用来存储遍历过的节点，每遍历一个新节点，都add进HashSet中，如果HashSet中存在相同的节点，返回false，链表成环。这种方式的时间复杂度是O(n)，空间复杂度是O(n)。</li>\n<li>方法三：采用快慢指针，快指针一次走两步，慢指针一次走一步，如果链表成环，快慢指针总会相遇，数学证明这里就不介绍了，直接上代码，代码的时间复杂度是O(n)，空间复杂度是O(1)。(这里很多快慢指针其实都可以从起点开始，但是因为快慢指针总会相遇，快指针先走一步，会相应的减少方法所用的时长)。</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">checkCircle</span><span class=\"params\">(Node lsit)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(list == <span class=\"keyword\">null</span>)<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    Node fast = list.next;</span><br><span class=\"line\">    Node slow = list;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(fast != <span class=\"keyword\">null</span> &amp;&amp; fast.next != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        fast = fast.next.next;</span><br><span class=\"line\">        slow = slow.next;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(slow == fast)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>求链表的中间节点：技巧和检测链表成环相似，也是使用快慢指针，快指针一次走两步，慢指针一次走一步，当快指针走完整个链表时，慢指针刚好走到链表的中点。代码的时间复杂度是O(n)，空间复杂度是O(1)。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Node <span class=\"title\">findMiddleNode</span><span class=\"params\">(Node list)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(list == <span class=\"keyword\">null</span>)<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    Node slow = list;</span><br><span class=\"line\">    Node fast = list;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(fast != <span class=\"keyword\">null</span> &amp;&amp; fast.next != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        fast = fast.next.next;</span><br><span class=\"line\">        slow = slow.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> slow;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>删除链表的倒数第K个节点（K为正数）：<ul>\n<li>方法一：先遍历链表求出链表的长度n，然后将问题转化为删除正数第n-K个节点，这种方法遍历了两次链表，时间复杂度是O(n)。</li>\n<li>方法二：采用快慢指针法：快慢指针每次都走一步，快指针先走。先让快指针达到正数第K的位置，然后慢指针从链表头开始出发，当快指针走完整个链表时，慢指针刚好走到n-K的位置，即倒数第K的位置，删除该节点，这种方法的时间复杂度也是O(n)，但是因为只遍历了一次链表，所以要比第一种方法更快。代码如下。</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Node <span class=\"title\">deleteLastKth</span><span class=\"params\">(Node list, <span class=\"keyword\">int</span> k)</span></span>&#123;</span><br><span class=\"line\">    Node fast = list;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"comment\">// fast指针到达正数第k个位置</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(fast != <span class=\"keyword\">null</span> &amp;&amp; i&lt;k)&#123;</span><br><span class=\"line\">        fast = fast.next;</span><br><span class=\"line\">        ++i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// list为null或k大于链表长度</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(fast == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> list;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    Node slow = list;<span class=\"comment\">//慢指针，同时也是待删除节点</span></span><br><span class=\"line\">    Node pre  = <span class=\"keyword\">null</span>;<span class=\"comment\">//待删除节点的前一个节点</span></span><br><span class=\"line\">    <span class=\"comment\">// 走过n-k个位置，slow到达倒数第k的位置</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(fast != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        fast = fast.next;</span><br><span class=\"line\">        pre = slow;</span><br><span class=\"line\">        slow = slow.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(pre==<span class=\"keyword\">null</span>)&#123;<span class=\"comment\">//删除头节点</span></span><br><span class=\"line\">        list = list.next;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;<span class=\"comment\">//删除其他节点</span></span><br><span class=\"line\">        pre.next = pre.next.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> list;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>判断两个链表是否一致：遍历两个链表，然后比较每个位置的值是否一致即可。时间复杂度时O(n)，空间复杂度时O(1)。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">TFResult</span><span class=\"params\">(Node left,Node right)</span></span>&#123;</span><br><span class=\"line\">\tNode l = left;</span><br><span class=\"line\">\tNode r = right;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(l!=<span class=\"keyword\">null</span> &amp;&amp; r!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(l.data == r.data)&#123;</span><br><span class=\"line\">\t\t\tl = l.next;</span><br><span class=\"line\">\t\t\tr = r.next;</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(l==<span class=\"keyword\">null</span> &amp;&amp; r==<span class=\"keyword\">null</span>)<span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>两个有序链表合并成一个有序链表：思路就是新创建一个链表，然后遍历比较两个有序链表的每一个节点的值，更小的放入新节点中，最后将剩余的链表中的剩余节点依次放入新链表中即可。时间复杂度O(n)，空间复杂度O(n)。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//方式一：从两个链表中获得更小的头节点</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Node <span class=\"title\">mergeTwoLisrts</span><span class=\"params\">(Node l1,Node l2)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l1 == <span class=\"keyword\">null</span>)<span class=\"keyword\">return</span> l2;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l2 == <span class=\"keyword\">null</span>)<span class=\"keyword\">return</span> l1;</span><br><span class=\"line\">    Node head;</span><br><span class=\"line\">    Node p = l1;</span><br><span class=\"line\">    Node q = l2;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l1.data&lt;l2.data)&#123;</span><br><span class=\"line\">        head = l1;</span><br><span class=\"line\">        p = p.next;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        head = l2;</span><br><span class=\"line\">        q = q.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Node r = head;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(p != <span class=\"keyword\">null</span> &amp;&amp; q != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(p.daa&lt;q.data)&#123;</span><br><span class=\"line\">            r.next = p;</span><br><span class=\"line\">            p = p.next;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            r.next = q;</span><br><span class=\"line\">            q = q.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(p != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        r..next = p;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        r.next = q;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//方式二：考虑到方式一中对于头节点的选择做了大量的判断，所以方式二使用哨兵的方式进行改进</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Node <span class=\"title\">mergeTwoLists2</span><span class=\"params\">(Node l1, Node l2)</span></span>&#123;</span><br><span class=\"line\">    Node solider = <span class=\"keyword\">new</span> Node(<span class=\"number\">0</span>);</span><br><span class=\"line\">    Node p = solider;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(l1 != <span class=\"keyword\">null</span> &amp;&amp; l2 != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(l1.data&lt;l2.data)&#123;</span><br><span class=\"line\">            p.next = l1;</span><br><span class=\"line\">            l1 = l1.next;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            p.next = l2;</span><br><span class=\"line\">            l2 = l2.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        p = p.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l1 == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        p.next = l2;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        p.next = l1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> solider.next;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>总结</strong>：今天介绍了单链表比较常用的一些进阶操作，单链表操作的本质无非就是根据每个节点都保存有下一个节点的内存地址，通过遍历等操作找到要操作的节点，思路不是很难。其中涉及到了一些技巧，包括临时存储后面要用的节点，快慢双指针，哨兵。在改变指针指向的时候尤其需要注意不要丢失原本可用节点的地址，注意细节，就能写好单链表代码。</p>\n"},{"title":"线程间同步与协作","date":"2020-05-06T13:17:22.000Z","_content":"\n##### 同步互斥\n\n- sychnorized:\n\n    - 同步代码块：\n    ```java\n    public void func() {\n        sychnorized(this) {\n            // ...    \n        }\n    }\n    ```\n    上面的代码作用于**同一个对象**执行该方法的同步代码块时，会进行串行操作。\n    \n    - 同步方法\n    ```java\n    public sychnorized void func() {\n        // ...\n    }\n    ```\n    和同步代码块一样，作用于同一个对象。\n    \n    - 同步类\n    ```java\n    public class SynchronizedExample {\n        \n        public void func() {\n            sychnorized(SynchronizedExample.class) {\n                // ...\n            }\n        }\n    }\n    ```\n    上面的同步代码块作用于整个类。\n    \n    - 同步静态方法\n    ```java\n    public sychnorized static void func() {\n        // ...\n    }\n    ```\n    作用于整个类。\n    \n- ReentrantLock\n\n```java\npublic class LockExample {\n\n    private Lock lock = new ReentrantLock();\n\n    public void func() {\n        lock.lock();\n        try {\n            for (int i = 0; i < 10; i++) {\n                System.out.print(i + \" \");\n            }\n        } finally {\n            lock.unlock(); // 确保释放锁，从而避免发生死锁。\n        }\n    }\n}\n```\n\n\n- 比较\n\n    - 实现：synchronized是由实现的功能，ReentrantLock是jdk实现的。\n    \n    - 性能：新版本的synchronized性能进行了优化，加入了自旋锁等功能，性能和ReentrantLock差不多。\n    \n    - 等待可中断：synchronized在等待锁的过程中不可中断，ReentrantLock可中断。\n    \n    - 公平锁：sychronized是非公平锁，ReentrantLock默认是非公平锁，也可以设置成按照申请锁的时间来获取锁的公平锁。\n    \n    - 支持绑定多个条件：ReentrantLock支持绑定多个Condition。\n    \n    - 选择：如果不需要使用ReentrantLock的高级功能，建议使用synchronized，防止在jdk版本发生变化时带来的困扰，或者忘记释放锁。\n\n##### 协作\n\n- join：在一个线程中调用另一个线程的join方法，会等待另一个线程执行完毕后再执行该线程的后续方法。\n- wait() notify() notifyAll():\n\n    - 调用wait()方法使当前线程挂起，并释放持有的锁；当其他线程运行到满足这个线程唤醒的条件时，会调用\n    notify()或者notifyAll()方法来唤醒被挂起的线程。\n    \n    - 这三个方法属于Object类的方法，不属于Thread；\n    \n    - 只能在同步代码块或同步方法中使用，否则会抛出IllegalMonitorStateException。\n\n    ```java\n    public class WaitNotifyExample {\n    \n        public synchronized void before() {\n            System.out.println(\"before\");\n            notifyAll();\n        }\n    \n        public synchronized void after() {\n            try {\n                wait();\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n            System.out.println(\"after\");\n        }\n    }\n    \n    \n    public static void main(String[] args) {\n        ExecutorService executorService = Executors.newCachedThreadPool();\n        WaitNotifyExample example = new WaitNotifyExample();\n        executorService.execute(() -> example.after());\n        executorService.execute(() -> example.before());\n    }\n    \n    // print\n    before\n    after\n    \n    ```\n    \n    - wait()和sleep()的区别：\n    \n        - wait()是Object的方法，sleep()是Thread的方法;\n        - wait()会释放锁，sleep()不会。\n        \n- await() signal() signalAll()\n\nJ.U.C包中Condition类提供的方法，粒度更细。\n\n```java\npublic class AwaitSignalExample {\n\n    private Lock lock = new ReentrantLock();\n    private Condition condition = lock.newCondition();\n\n    public void before() {\n        lock.lock();\n        try {\n            System.out.println(\"before\");\n            condition.signalAll();\n        } finally {\n            lock.unlock();\n        }\n    }\n\n    public void after() {\n        lock.lock();\n        try {\n            condition.await();\n            System.out.println(\"after\");\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        } finally {\n            lock.unlock();\n        }\n    }\n}\n\n\npublic static void main(String[] args) {\n    ExecutorService executorService = Executors.newCachedThreadPool();\n    AwaitSignalExample example = new AwaitSignalExample();\n    executorService.execute(() -> example.after());\n    executorService.execute(() -> example.before());\n}\n\n\n// print\nbefore\nafter\n\n\n```\n\n","source":"_posts/线程间同步与协作.md","raw":"---\ntitle: 线程间同步与协作\ndate: 2020-05-06 21:17:22\ntags:\ncategories:\n- 多线程\n---\n\n##### 同步互斥\n\n- sychnorized:\n\n    - 同步代码块：\n    ```java\n    public void func() {\n        sychnorized(this) {\n            // ...    \n        }\n    }\n    ```\n    上面的代码作用于**同一个对象**执行该方法的同步代码块时，会进行串行操作。\n    \n    - 同步方法\n    ```java\n    public sychnorized void func() {\n        // ...\n    }\n    ```\n    和同步代码块一样，作用于同一个对象。\n    \n    - 同步类\n    ```java\n    public class SynchronizedExample {\n        \n        public void func() {\n            sychnorized(SynchronizedExample.class) {\n                // ...\n            }\n        }\n    }\n    ```\n    上面的同步代码块作用于整个类。\n    \n    - 同步静态方法\n    ```java\n    public sychnorized static void func() {\n        // ...\n    }\n    ```\n    作用于整个类。\n    \n- ReentrantLock\n\n```java\npublic class LockExample {\n\n    private Lock lock = new ReentrantLock();\n\n    public void func() {\n        lock.lock();\n        try {\n            for (int i = 0; i < 10; i++) {\n                System.out.print(i + \" \");\n            }\n        } finally {\n            lock.unlock(); // 确保释放锁，从而避免发生死锁。\n        }\n    }\n}\n```\n\n\n- 比较\n\n    - 实现：synchronized是由实现的功能，ReentrantLock是jdk实现的。\n    \n    - 性能：新版本的synchronized性能进行了优化，加入了自旋锁等功能，性能和ReentrantLock差不多。\n    \n    - 等待可中断：synchronized在等待锁的过程中不可中断，ReentrantLock可中断。\n    \n    - 公平锁：sychronized是非公平锁，ReentrantLock默认是非公平锁，也可以设置成按照申请锁的时间来获取锁的公平锁。\n    \n    - 支持绑定多个条件：ReentrantLock支持绑定多个Condition。\n    \n    - 选择：如果不需要使用ReentrantLock的高级功能，建议使用synchronized，防止在jdk版本发生变化时带来的困扰，或者忘记释放锁。\n\n##### 协作\n\n- join：在一个线程中调用另一个线程的join方法，会等待另一个线程执行完毕后再执行该线程的后续方法。\n- wait() notify() notifyAll():\n\n    - 调用wait()方法使当前线程挂起，并释放持有的锁；当其他线程运行到满足这个线程唤醒的条件时，会调用\n    notify()或者notifyAll()方法来唤醒被挂起的线程。\n    \n    - 这三个方法属于Object类的方法，不属于Thread；\n    \n    - 只能在同步代码块或同步方法中使用，否则会抛出IllegalMonitorStateException。\n\n    ```java\n    public class WaitNotifyExample {\n    \n        public synchronized void before() {\n            System.out.println(\"before\");\n            notifyAll();\n        }\n    \n        public synchronized void after() {\n            try {\n                wait();\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n            System.out.println(\"after\");\n        }\n    }\n    \n    \n    public static void main(String[] args) {\n        ExecutorService executorService = Executors.newCachedThreadPool();\n        WaitNotifyExample example = new WaitNotifyExample();\n        executorService.execute(() -> example.after());\n        executorService.execute(() -> example.before());\n    }\n    \n    // print\n    before\n    after\n    \n    ```\n    \n    - wait()和sleep()的区别：\n    \n        - wait()是Object的方法，sleep()是Thread的方法;\n        - wait()会释放锁，sleep()不会。\n        \n- await() signal() signalAll()\n\nJ.U.C包中Condition类提供的方法，粒度更细。\n\n```java\npublic class AwaitSignalExample {\n\n    private Lock lock = new ReentrantLock();\n    private Condition condition = lock.newCondition();\n\n    public void before() {\n        lock.lock();\n        try {\n            System.out.println(\"before\");\n            condition.signalAll();\n        } finally {\n            lock.unlock();\n        }\n    }\n\n    public void after() {\n        lock.lock();\n        try {\n            condition.await();\n            System.out.println(\"after\");\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        } finally {\n            lock.unlock();\n        }\n    }\n}\n\n\npublic static void main(String[] args) {\n    ExecutorService executorService = Executors.newCachedThreadPool();\n    AwaitSignalExample example = new AwaitSignalExample();\n    executorService.execute(() -> example.after());\n    executorService.execute(() -> example.before());\n}\n\n\n// print\nbefore\nafter\n\n\n```\n\n","slug":"线程间同步与协作","published":1,"updated":"2021-11-23T14:19:16.396Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckwc7u3mm000ttc6cduesa1kj","content":"<h5 id=\"同步互斥\"><a href=\"#同步互斥\" class=\"headerlink\" title=\"同步互斥\"></a>同步互斥</h5><ul>\n<li><p>sychnorized:</p>\n<ul>\n<li><p>同步代码块：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">func</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    sychnorized(<span class=\"keyword\">this</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// ...    </span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面的代码作用于<strong>同一个对象</strong>执行该方法的同步代码块时，会进行串行操作。</p>\n</li>\n<li><p>同步方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> sychnorized <span class=\"keyword\">void</span> <span class=\"title\">func</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>和同步代码块一样，作用于同一个对象。</p>\n</li>\n<li><p>同步类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SynchronizedExample</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">func</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        sychnorized(SynchronizedExample.class) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// ...</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面的同步代码块作用于整个类。</p>\n</li>\n<li><p>同步静态方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> sychnorized <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">func</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>作用于整个类。</p>\n</li>\n</ul>\n</li>\n<li><p>ReentrantLock</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LockExample</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Lock lock = <span class=\"keyword\">new</span> ReentrantLock();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">func</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        lock.lock();</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">                System.out.print(i + <span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            lock.unlock(); <span class=\"comment\">// 确保释放锁，从而避免发生死锁。</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<ul>\n<li><p>比较</p>\n<ul>\n<li><p>实现：synchronized是由实现的功能，ReentrantLock是jdk实现的。</p>\n</li>\n<li><p>性能：新版本的synchronized性能进行了优化，加入了自旋锁等功能，性能和ReentrantLock差不多。</p>\n</li>\n<li><p>等待可中断：synchronized在等待锁的过程中不可中断，ReentrantLock可中断。</p>\n</li>\n<li><p>公平锁：sychronized是非公平锁，ReentrantLock默认是非公平锁，也可以设置成按照申请锁的时间来获取锁的公平锁。</p>\n</li>\n<li><p>支持绑定多个条件：ReentrantLock支持绑定多个Condition。</p>\n</li>\n<li><p>选择：如果不需要使用ReentrantLock的高级功能，建议使用synchronized，防止在jdk版本发生变化时带来的困扰，或者忘记释放锁。</p>\n</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"协作\"><a href=\"#协作\" class=\"headerlink\" title=\"协作\"></a>协作</h5><ul>\n<li><p>join：在一个线程中调用另一个线程的join方法，会等待另一个线程执行完毕后再执行该线程的后续方法。</p>\n</li>\n<li><p>wait() notify() notifyAll():</p>\n<ul>\n<li><p>调用wait()方法使当前线程挂起，并释放持有的锁；当其他线程运行到满足这个线程唤醒的条件时，会调用<br>notify()或者notifyAll()方法来唤醒被挂起的线程。</p>\n</li>\n<li><p>这三个方法属于Object类的方法，不属于Thread；</p>\n</li>\n<li><p>只能在同步代码块或同步方法中使用，否则会抛出IllegalMonitorStateException。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WaitNotifyExample</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">before</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;before&quot;</span>);</span><br><span class=\"line\">        notifyAll();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">after</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            wait();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;after&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    ExecutorService executorService = Executors.newCachedThreadPool();</span><br><span class=\"line\">    WaitNotifyExample example = <span class=\"keyword\">new</span> WaitNotifyExample();</span><br><span class=\"line\">    executorService.execute(() -&gt; example.after());</span><br><span class=\"line\">    executorService.execute(() -&gt; example.before());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// print</span></span><br><span class=\"line\">before</span><br><span class=\"line\">after</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>wait()和sleep()的区别：</p>\n<ul>\n<li>wait()是Object的方法，sleep()是Thread的方法;</li>\n<li>wait()会释放锁，sleep()不会。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>await() signal() signalAll()</p>\n</li>\n</ul>\n<p>J.U.C包中Condition类提供的方法，粒度更细。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AwaitSignalExample</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Lock lock = <span class=\"keyword\">new</span> ReentrantLock();</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Condition condition = lock.newCondition();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">before</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        lock.lock();</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;before&quot;</span>);</span><br><span class=\"line\">            condition.signalAll();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            lock.unlock();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">after</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        lock.lock();</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            condition.await();</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;after&quot;</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            lock.unlock();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    ExecutorService executorService = Executors.newCachedThreadPool();</span><br><span class=\"line\">    AwaitSignalExample example = <span class=\"keyword\">new</span> AwaitSignalExample();</span><br><span class=\"line\">    executorService.execute(() -&gt; example.after());</span><br><span class=\"line\">    executorService.execute(() -&gt; example.before());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// print</span></span><br><span class=\"line\">before</span><br><span class=\"line\">after</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h5 id=\"同步互斥\"><a href=\"#同步互斥\" class=\"headerlink\" title=\"同步互斥\"></a>同步互斥</h5><ul>\n<li><p>sychnorized:</p>\n<ul>\n<li><p>同步代码块：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">func</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    sychnorized(<span class=\"keyword\">this</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// ...    </span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面的代码作用于<strong>同一个对象</strong>执行该方法的同步代码块时，会进行串行操作。</p>\n</li>\n<li><p>同步方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> sychnorized <span class=\"keyword\">void</span> <span class=\"title\">func</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>和同步代码块一样，作用于同一个对象。</p>\n</li>\n<li><p>同步类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SynchronizedExample</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">func</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        sychnorized(SynchronizedExample.class) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// ...</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面的同步代码块作用于整个类。</p>\n</li>\n<li><p>同步静态方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> sychnorized <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">func</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>作用于整个类。</p>\n</li>\n</ul>\n</li>\n<li><p>ReentrantLock</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LockExample</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Lock lock = <span class=\"keyword\">new</span> ReentrantLock();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">func</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        lock.lock();</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">                System.out.print(i + <span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            lock.unlock(); <span class=\"comment\">// 确保释放锁，从而避免发生死锁。</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<ul>\n<li><p>比较</p>\n<ul>\n<li><p>实现：synchronized是由实现的功能，ReentrantLock是jdk实现的。</p>\n</li>\n<li><p>性能：新版本的synchronized性能进行了优化，加入了自旋锁等功能，性能和ReentrantLock差不多。</p>\n</li>\n<li><p>等待可中断：synchronized在等待锁的过程中不可中断，ReentrantLock可中断。</p>\n</li>\n<li><p>公平锁：sychronized是非公平锁，ReentrantLock默认是非公平锁，也可以设置成按照申请锁的时间来获取锁的公平锁。</p>\n</li>\n<li><p>支持绑定多个条件：ReentrantLock支持绑定多个Condition。</p>\n</li>\n<li><p>选择：如果不需要使用ReentrantLock的高级功能，建议使用synchronized，防止在jdk版本发生变化时带来的困扰，或者忘记释放锁。</p>\n</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"协作\"><a href=\"#协作\" class=\"headerlink\" title=\"协作\"></a>协作</h5><ul>\n<li><p>join：在一个线程中调用另一个线程的join方法，会等待另一个线程执行完毕后再执行该线程的后续方法。</p>\n</li>\n<li><p>wait() notify() notifyAll():</p>\n<ul>\n<li><p>调用wait()方法使当前线程挂起，并释放持有的锁；当其他线程运行到满足这个线程唤醒的条件时，会调用<br>notify()或者notifyAll()方法来唤醒被挂起的线程。</p>\n</li>\n<li><p>这三个方法属于Object类的方法，不属于Thread；</p>\n</li>\n<li><p>只能在同步代码块或同步方法中使用，否则会抛出IllegalMonitorStateException。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WaitNotifyExample</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">before</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;before&quot;</span>);</span><br><span class=\"line\">        notifyAll();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">after</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            wait();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;after&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    ExecutorService executorService = Executors.newCachedThreadPool();</span><br><span class=\"line\">    WaitNotifyExample example = <span class=\"keyword\">new</span> WaitNotifyExample();</span><br><span class=\"line\">    executorService.execute(() -&gt; example.after());</span><br><span class=\"line\">    executorService.execute(() -&gt; example.before());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// print</span></span><br><span class=\"line\">before</span><br><span class=\"line\">after</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>wait()和sleep()的区别：</p>\n<ul>\n<li>wait()是Object的方法，sleep()是Thread的方法;</li>\n<li>wait()会释放锁，sleep()不会。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>await() signal() signalAll()</p>\n</li>\n</ul>\n<p>J.U.C包中Condition类提供的方法，粒度更细。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AwaitSignalExample</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Lock lock = <span class=\"keyword\">new</span> ReentrantLock();</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Condition condition = lock.newCondition();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">before</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        lock.lock();</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;before&quot;</span>);</span><br><span class=\"line\">            condition.signalAll();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            lock.unlock();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">after</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        lock.lock();</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            condition.await();</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;after&quot;</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            lock.unlock();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    ExecutorService executorService = Executors.newCachedThreadPool();</span><br><span class=\"line\">    AwaitSignalExample example = <span class=\"keyword\">new</span> AwaitSignalExample();</span><br><span class=\"line\">    executorService.execute(() -&gt; example.after());</span><br><span class=\"line\">    executorService.execute(() -&gt; example.before());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// print</span></span><br><span class=\"line\">before</span><br><span class=\"line\">after</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n"},{"title":"线程基础机制","date":"2020-04-18T14:22:08.000Z","_content":"\n- Daemon：线程守护。默认为false，可以在线程start前设置。\n```java\nthread.setDaemon(true);\nthread.start();\n```\n在所有非守护线程结束时，程序会杀死所有守护线程。\n\n- Sleep：Thread.sleep(millisec)会休眠当前执行线程。\n\n休眠状态可以抛出InterruptException异常;\n\n线程中需要对InterruptException进行处理，因为当前异常无法抛出到其他线程。\n\n- Yield：当前执行线程执行Thread.yield()方法代表线程礼让，可以切换其他线程执行，但是该方法只是对线程调度器进行建议，切换其他具有相同优先级的线程可以运行，但是实际哪个线程执行要看哪个线程抢占到时间片。\n\n\n- **线程中断**\n\n    - **interrupt()**：\n    \n    调用一个线程的interrupt()方法，如果该线程当前处于阻塞或有限期等待或无限期等待状态时（不包括IO阻塞和等待锁的情况），会抛出InterruptException异常，该线程不会继续往下执行，直接结束线程。\n\n    ```java\n    public class InterruptExample {\n    \n        private static class MyThread1 extends Thread {\n            @Override\n            public void run() {\n                try {\n                    Thread.sleep(2000);\n                    System.out.println(\"Thread run\");\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n    }\n    \n    public static void main(String[] args) throws InterruptedException {\n        Thread thread1 = new MyThread1();\n        thread1.start();\n        thread1.interrupt();\n        System.out.println(\"Main run\");\n    }\n    \n    // print\n    Main run\n    java.lang.InterruptedException: sleep interrupted\n        at java.lang.Thread.sleep(Native Method)\n        at InterruptExample.lambda$main$0(InterruptExample.java:5)\n        at InterruptExample$$Lambda$1/713338599.run(Unknown Source)\n        at java.lang.Thread.run(Thread.java:745)\n    \n    ```\n\n    - **interrupted()**\n    \n    如果一个线程并未处于休眠或等待状态时，其他线程调用interrupt()方法并不会让该线程抛出InterruptException异常；此时该线程调用interrupted()方法会返回true，用来标记其他线程调用了该线程的中断方法，可以根据标记决定是否结束线程执行。\n    \n    一般适用于固定时长的无限循环中。\n    \n    ```java\n    public class InterruptExample {\n\n        private static class MyThread2 extends Thread {\n            @Override\n            public void run() {\n                while (!interrupted()) {\n                    // ..\n                }\n                System.out.println(\"Thread end\");\n            }\n        }\n    }\n    \n    \n    public static void main(String[] args) throws     InterruptedException {\n        Thread thread2 = new MyThread2();\n        thread2.start();\n        thread2.interrupt();\n    }\n    \n    // print\n    Thread end\n    ```\n    \n    - **Executor的中断方法**\n    \n    直接调用executor的shutdown()方法会等待所有线程都执行完毕后关闭线程池；\n    \n    调用showdownNow()方法相当于在给每个线程执行interrupt()方法;\n    \n    ```java\n    public static void main(String[] args) {\n        ExecutorService executorService = Executors.newCachedThreadPool();\n        executorService.execute(() -> {\n            try {\n                Thread.sleep(2000);\n                System.out.println(\"Thread run\");\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n        executorService.shutdownNow();\n        System.out.println(\"Main run\");\n    }\n    \n    // print\n    // 并未执行Thread run,因为执行shutdownNow()方法相当于给该线程执行了interrupt()方法\n    Main run\n    java.lang.InterruptedException: sleep interrupted\n        at java.lang.Thread.sleep(Native Method)\n        at ExecutorInterruptExample.lambda$main$0(ExecutorInterruptExample.java:9)\n        at ExecutorInterruptExample$$Lambda$1/1160460865.run(Unknown Source)\n        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\n        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\n        at java.lang.Thread.run(Thread.java:745)\n    ```\n    \n    如果想中断线程池中某个具体线程，可以采用submit方法进行线程执行，返回Future<?>类，调用该类的cancel(true)方法来中断该线程。\n    \n    ```java\n    Future<?> future = executorService.submit(() -> {\n        // ..\n    });\n    future.cancel(true);\n    ```\n\n- 线程状态：\n    - 新建\n    - 就绪\n    - 运行\n    - 阻塞（等待获取到锁）\n    - 无限期等待：没有设置时间参数的wait, join等。\n    - 有限期等待：设置了timeout参数的wait, join等。\n    ","source":"_posts/线程基础机制.md","raw":"---\ntitle: 线程基础机制\ndate: 2020-04-18 22:22:08\ntags:\ncategories:\n- 多线程\n---\n\n- Daemon：线程守护。默认为false，可以在线程start前设置。\n```java\nthread.setDaemon(true);\nthread.start();\n```\n在所有非守护线程结束时，程序会杀死所有守护线程。\n\n- Sleep：Thread.sleep(millisec)会休眠当前执行线程。\n\n休眠状态可以抛出InterruptException异常;\n\n线程中需要对InterruptException进行处理，因为当前异常无法抛出到其他线程。\n\n- Yield：当前执行线程执行Thread.yield()方法代表线程礼让，可以切换其他线程执行，但是该方法只是对线程调度器进行建议，切换其他具有相同优先级的线程可以运行，但是实际哪个线程执行要看哪个线程抢占到时间片。\n\n\n- **线程中断**\n\n    - **interrupt()**：\n    \n    调用一个线程的interrupt()方法，如果该线程当前处于阻塞或有限期等待或无限期等待状态时（不包括IO阻塞和等待锁的情况），会抛出InterruptException异常，该线程不会继续往下执行，直接结束线程。\n\n    ```java\n    public class InterruptExample {\n    \n        private static class MyThread1 extends Thread {\n            @Override\n            public void run() {\n                try {\n                    Thread.sleep(2000);\n                    System.out.println(\"Thread run\");\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n    }\n    \n    public static void main(String[] args) throws InterruptedException {\n        Thread thread1 = new MyThread1();\n        thread1.start();\n        thread1.interrupt();\n        System.out.println(\"Main run\");\n    }\n    \n    // print\n    Main run\n    java.lang.InterruptedException: sleep interrupted\n        at java.lang.Thread.sleep(Native Method)\n        at InterruptExample.lambda$main$0(InterruptExample.java:5)\n        at InterruptExample$$Lambda$1/713338599.run(Unknown Source)\n        at java.lang.Thread.run(Thread.java:745)\n    \n    ```\n\n    - **interrupted()**\n    \n    如果一个线程并未处于休眠或等待状态时，其他线程调用interrupt()方法并不会让该线程抛出InterruptException异常；此时该线程调用interrupted()方法会返回true，用来标记其他线程调用了该线程的中断方法，可以根据标记决定是否结束线程执行。\n    \n    一般适用于固定时长的无限循环中。\n    \n    ```java\n    public class InterruptExample {\n\n        private static class MyThread2 extends Thread {\n            @Override\n            public void run() {\n                while (!interrupted()) {\n                    // ..\n                }\n                System.out.println(\"Thread end\");\n            }\n        }\n    }\n    \n    \n    public static void main(String[] args) throws     InterruptedException {\n        Thread thread2 = new MyThread2();\n        thread2.start();\n        thread2.interrupt();\n    }\n    \n    // print\n    Thread end\n    ```\n    \n    - **Executor的中断方法**\n    \n    直接调用executor的shutdown()方法会等待所有线程都执行完毕后关闭线程池；\n    \n    调用showdownNow()方法相当于在给每个线程执行interrupt()方法;\n    \n    ```java\n    public static void main(String[] args) {\n        ExecutorService executorService = Executors.newCachedThreadPool();\n        executorService.execute(() -> {\n            try {\n                Thread.sleep(2000);\n                System.out.println(\"Thread run\");\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n        executorService.shutdownNow();\n        System.out.println(\"Main run\");\n    }\n    \n    // print\n    // 并未执行Thread run,因为执行shutdownNow()方法相当于给该线程执行了interrupt()方法\n    Main run\n    java.lang.InterruptedException: sleep interrupted\n        at java.lang.Thread.sleep(Native Method)\n        at ExecutorInterruptExample.lambda$main$0(ExecutorInterruptExample.java:9)\n        at ExecutorInterruptExample$$Lambda$1/1160460865.run(Unknown Source)\n        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\n        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\n        at java.lang.Thread.run(Thread.java:745)\n    ```\n    \n    如果想中断线程池中某个具体线程，可以采用submit方法进行线程执行，返回Future<?>类，调用该类的cancel(true)方法来中断该线程。\n    \n    ```java\n    Future<?> future = executorService.submit(() -> {\n        // ..\n    });\n    future.cancel(true);\n    ```\n\n- 线程状态：\n    - 新建\n    - 就绪\n    - 运行\n    - 阻塞（等待获取到锁）\n    - 无限期等待：没有设置时间参数的wait, join等。\n    - 有限期等待：设置了timeout参数的wait, join等。\n    ","slug":"线程基础机制","published":1,"updated":"2021-11-23T14:19:16.396Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckwc7u3mn000utc6c25akgbmk","content":"<ul>\n<li><p>Daemon：线程守护。默认为false，可以在线程start前设置。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">thread.setDaemon(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">thread.start();</span><br></pre></td></tr></table></figure>\n<p>在所有非守护线程结束时，程序会杀死所有守护线程。</p>\n</li>\n<li><p>Sleep：Thread.sleep(millisec)会休眠当前执行线程。</p>\n</li>\n</ul>\n<p>休眠状态可以抛出InterruptException异常;</p>\n<p>线程中需要对InterruptException进行处理，因为当前异常无法抛出到其他线程。</p>\n<ul>\n<li>Yield：当前执行线程执行Thread.yield()方法代表线程礼让，可以切换其他线程执行，但是该方法只是对线程调度器进行建议，切换其他具有相同优先级的线程可以运行，但是实际哪个线程执行要看哪个线程抢占到时间片。</li>\n</ul>\n<ul>\n<li><p><strong>线程中断</strong></p>\n<ul>\n<li><p>**interrupt()**：</p>\n<p>调用一个线程的interrupt()方法，如果该线程当前处于阻塞或有限期等待或无限期等待状态时（不包括IO阻塞和等待锁的情况），会抛出InterruptException异常，该线程不会继续往下执行，直接结束线程。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InterruptExample</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyThread1</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                Thread.sleep(<span class=\"number\">2000</span>);</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;Thread run&quot;</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">    Thread thread1 = <span class=\"keyword\">new</span> MyThread1();</span><br><span class=\"line\">    thread1.start();</span><br><span class=\"line\">    thread1.interrupt();</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;Main run&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// print</span></span><br><span class=\"line\">Main run</span><br><span class=\"line\">java.lang.InterruptedException: sleep interrupted</span><br><span class=\"line\">    at java.lang.Thread.sleep(Native Method)</span><br><span class=\"line\">    at InterruptExample.lambda$main$<span class=\"number\">0</span>(InterruptExample.java:<span class=\"number\">5</span>)</span><br><span class=\"line\">    at InterruptExample$$Lambda$<span class=\"number\">1</span>/<span class=\"number\">713338599.</span>run(Unknown Source)</span><br><span class=\"line\">    at java.lang.Thread.run(Thread.java:<span class=\"number\">745</span>)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>interrupted()</strong></p>\n<p>如果一个线程并未处于休眠或等待状态时，其他线程调用interrupt()方法并不会让该线程抛出InterruptException异常；此时该线程调用interrupted()方法会返回true，用来标记其他线程调用了该线程的中断方法，可以根据标记决定是否结束线程执行。</p>\n<p>一般适用于固定时长的无限循环中。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InterruptExample</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyThread2</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (!interrupted()) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// ..</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;Thread end&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span>     InterruptedException </span>&#123;</span><br><span class=\"line\">    Thread thread2 = <span class=\"keyword\">new</span> MyThread2();</span><br><span class=\"line\">    thread2.start();</span><br><span class=\"line\">    thread2.interrupt();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// print</span></span><br><span class=\"line\">Thread end</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>Executor的中断方法</strong></p>\n<p>直接调用executor的shutdown()方法会等待所有线程都执行完毕后关闭线程池；</p>\n<p>调用showdownNow()方法相当于在给每个线程执行interrupt()方法;</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    ExecutorService executorService = Executors.newCachedThreadPool();</span><br><span class=\"line\">    executorService.execute(() -&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Thread.sleep(<span class=\"number\">2000</span>);</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;Thread run&quot;</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    executorService.shutdownNow();</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;Main run&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// print</span></span><br><span class=\"line\"><span class=\"comment\">// 并未执行Thread run,因为执行shutdownNow()方法相当于给该线程执行了interrupt()方法</span></span><br><span class=\"line\">Main run</span><br><span class=\"line\">java.lang.InterruptedException: sleep interrupted</span><br><span class=\"line\">    at java.lang.Thread.sleep(Native Method)</span><br><span class=\"line\">    at ExecutorInterruptExample.lambda$main$<span class=\"number\">0</span>(ExecutorInterruptExample.java:<span class=\"number\">9</span>)</span><br><span class=\"line\">    at ExecutorInterruptExample$$Lambda$<span class=\"number\">1</span>/<span class=\"number\">1160460865.</span>run(Unknown Source)</span><br><span class=\"line\">    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:<span class=\"number\">1142</span>)</span><br><span class=\"line\">    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:<span class=\"number\">617</span>)</span><br><span class=\"line\">    at java.lang.Thread.run(Thread.java:<span class=\"number\">745</span>)</span><br></pre></td></tr></table></figure>\n\n<p>如果想中断线程池中某个具体线程，可以采用submit方法进行线程执行，返回Future&lt;?&gt;类，调用该类的cancel(true)方法来中断该线程。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Future&lt;?&gt; future = executorService.submit(() -&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ..</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">future.cancel(<span class=\"keyword\">true</span>);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>线程状态：</p>\n<ul>\n<li>新建</li>\n<li>就绪</li>\n<li>运行</li>\n<li>阻塞（等待获取到锁）</li>\n<li>无限期等待：没有设置时间参数的wait, join等。</li>\n<li>有限期等待：设置了timeout参数的wait, join等。</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li><p>Daemon：线程守护。默认为false，可以在线程start前设置。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">thread.setDaemon(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">thread.start();</span><br></pre></td></tr></table></figure>\n<p>在所有非守护线程结束时，程序会杀死所有守护线程。</p>\n</li>\n<li><p>Sleep：Thread.sleep(millisec)会休眠当前执行线程。</p>\n</li>\n</ul>\n<p>休眠状态可以抛出InterruptException异常;</p>\n<p>线程中需要对InterruptException进行处理，因为当前异常无法抛出到其他线程。</p>\n<ul>\n<li>Yield：当前执行线程执行Thread.yield()方法代表线程礼让，可以切换其他线程执行，但是该方法只是对线程调度器进行建议，切换其他具有相同优先级的线程可以运行，但是实际哪个线程执行要看哪个线程抢占到时间片。</li>\n</ul>\n<ul>\n<li><p><strong>线程中断</strong></p>\n<ul>\n<li><p>**interrupt()**：</p>\n<p>调用一个线程的interrupt()方法，如果该线程当前处于阻塞或有限期等待或无限期等待状态时（不包括IO阻塞和等待锁的情况），会抛出InterruptException异常，该线程不会继续往下执行，直接结束线程。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InterruptExample</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyThread1</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                Thread.sleep(<span class=\"number\">2000</span>);</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;Thread run&quot;</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">    Thread thread1 = <span class=\"keyword\">new</span> MyThread1();</span><br><span class=\"line\">    thread1.start();</span><br><span class=\"line\">    thread1.interrupt();</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;Main run&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// print</span></span><br><span class=\"line\">Main run</span><br><span class=\"line\">java.lang.InterruptedException: sleep interrupted</span><br><span class=\"line\">    at java.lang.Thread.sleep(Native Method)</span><br><span class=\"line\">    at InterruptExample.lambda$main$<span class=\"number\">0</span>(InterruptExample.java:<span class=\"number\">5</span>)</span><br><span class=\"line\">    at InterruptExample$$Lambda$<span class=\"number\">1</span>/<span class=\"number\">713338599.</span>run(Unknown Source)</span><br><span class=\"line\">    at java.lang.Thread.run(Thread.java:<span class=\"number\">745</span>)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>interrupted()</strong></p>\n<p>如果一个线程并未处于休眠或等待状态时，其他线程调用interrupt()方法并不会让该线程抛出InterruptException异常；此时该线程调用interrupted()方法会返回true，用来标记其他线程调用了该线程的中断方法，可以根据标记决定是否结束线程执行。</p>\n<p>一般适用于固定时长的无限循环中。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InterruptExample</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyThread2</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (!interrupted()) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// ..</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;Thread end&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span>     InterruptedException </span>&#123;</span><br><span class=\"line\">    Thread thread2 = <span class=\"keyword\">new</span> MyThread2();</span><br><span class=\"line\">    thread2.start();</span><br><span class=\"line\">    thread2.interrupt();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// print</span></span><br><span class=\"line\">Thread end</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>Executor的中断方法</strong></p>\n<p>直接调用executor的shutdown()方法会等待所有线程都执行完毕后关闭线程池；</p>\n<p>调用showdownNow()方法相当于在给每个线程执行interrupt()方法;</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    ExecutorService executorService = Executors.newCachedThreadPool();</span><br><span class=\"line\">    executorService.execute(() -&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Thread.sleep(<span class=\"number\">2000</span>);</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;Thread run&quot;</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    executorService.shutdownNow();</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;Main run&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// print</span></span><br><span class=\"line\"><span class=\"comment\">// 并未执行Thread run,因为执行shutdownNow()方法相当于给该线程执行了interrupt()方法</span></span><br><span class=\"line\">Main run</span><br><span class=\"line\">java.lang.InterruptedException: sleep interrupted</span><br><span class=\"line\">    at java.lang.Thread.sleep(Native Method)</span><br><span class=\"line\">    at ExecutorInterruptExample.lambda$main$<span class=\"number\">0</span>(ExecutorInterruptExample.java:<span class=\"number\">9</span>)</span><br><span class=\"line\">    at ExecutorInterruptExample$$Lambda$<span class=\"number\">1</span>/<span class=\"number\">1160460865.</span>run(Unknown Source)</span><br><span class=\"line\">    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:<span class=\"number\">1142</span>)</span><br><span class=\"line\">    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:<span class=\"number\">617</span>)</span><br><span class=\"line\">    at java.lang.Thread.run(Thread.java:<span class=\"number\">745</span>)</span><br></pre></td></tr></table></figure>\n\n<p>如果想中断线程池中某个具体线程，可以采用submit方法进行线程执行，返回Future&lt;?&gt;类，调用该类的cancel(true)方法来中断该线程。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Future&lt;?&gt; future = executorService.submit(() -&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ..</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">future.cancel(<span class=\"keyword\">true</span>);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>线程状态：</p>\n<ul>\n<li>新建</li>\n<li>就绪</li>\n<li>运行</li>\n<li>阻塞（等待获取到锁）</li>\n<li>无限期等待：没有设置时间参数的wait, join等。</li>\n<li>有限期等待：设置了timeout参数的wait, join等。</li>\n</ul>\n</li>\n</ul>\n"},{"title":"python学习2","date":"2020-04-24T14:33:02.000Z","_content":"\n**if控制语句**\n\n```python\nis_hot = True\nis_cold = True\n\nif is_hot:\n    print(\"It's a hot dat!\")\n    print(\"Drink water\")\nelif is_cold:\n    print(\"It's a cold day\")\nelse:\n    print(\"It's a lovely day\")\nprint(\"Enjoy you day\")\n#--------------------------\nhas_high_income = True\nhas_good_credit = False\nhas_criminal = False\n\nif has_high_income and has_good_credit:\n    print(\"loan\")\nelif has_high_income or has_good_credit:\n    print(\"loan too\")\n\nif has_high_income and not has_criminal:\n    print(\"enjoy for loan\")\n#---------------------------------\ntemperature = 30\n\nif temperature > 30:\n    print(\"haha\")\nelse:\n    print(\"hihihi\")\n\nprint('------------------------------')\n\nname = 'J'\n\nif len(name) < 3:\n    print('name is haha')\n```\n\n**if小练习**\n\n```python\nweight = int(input('Weight: '))\nunit = input('L(bs) or K(g): ')\n\nif unit.upper() == 'L':\n    covert = weight * 0.45\n    print(f\"You are {covert} kilos\")\nelse:\n    covert = weight / 0.45\n    print(f\"You are {covert} Kg\")\n```\n\n**while循环**\n\n注意while..else的使用\n\n```python\ni  = 1\n\nwhile i <= 10:\n    print('*' * i)\n    i += 1\n    if i == 8:\n        print(\"haha dao 8 le\")\n        break\n# while执行完执行else，遇到break就失效\nelse:\n    print('9999999')\nprint(\"Done\")\n\nprint('------------------------------')\n```\n\n**for循环**\n\n```python\nfor item in 'Python':\n    print(item)\n\nprint('-----------------------')\n\nfor item in [2, 1, 3, 4]:\n    print(item)\n\nprint('-----------------------')\n\nfor item in range(10):\n    print(item)\n\nprint('----------------')\n\nfor item in range(4,6):\n    print(item)\nprint('-------------------------')\n\nfor item in range(5, 10, 2):\n    print(item)\n```\n\n**一维数组（长度可变）**\n\n```python\nprices = [10, 20, 30]\nprint(prices)\nsum = 0\nfor i in prices:\n    sum += i\nprint(sum)\n\nprint('------------------')\n\nfor i in range(4):\n    for j in range(5):\n        print(f\"{i},{j}\")\n```\n\n**二维数组**\n\n```python\nmatrix = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n]\nprint(matrix[0])\n\nfor i in matrix:\n    for j in i:\n        print(j)\n```\n\n**数组基本操作**\n\n```python\nnumbers = [5, 2, 1, 7, 2, 4]\nnumbers.append(20)\nnumbers.insert(0, 10)\nprint(numbers)\nnumbers.remove(5)\nprint(numbers)\nprint(numbers.index(2))\nprint(numbers.pop())\nprint(numbers.count(2))\nnumbers.sort()\nnumbers.reverse()\nprint(numbers)\n\nnumbers2 = numbers.copy()\n\nnumbers.clear()\nprint(numbers)\n```\n\n**元组（不能修改）**\n\n```python\n# 元组：不能修改\nnumbers = (1, 2, 3)\nprint(numbers[0])\nprint('-----------------------------')\n# 解压缩特性\ncoor = (1, 2, 3)\n# x = coor[0]\n# y = coor[1]\n# z = coor[2]\n# 等价于上面的写法，这个特性也可以用于数组\nx, y, z = coor\n```\n\n**字典**\n\n```python\ncustomers = {\n    \"name\": \"zhanglong\",\n    \"age\": 18,\n    \"is_verfied\": True\n}\n# 如果不存在key会抛异常\nprint(customers['name'])\n# 如果不存在key不会抛异常\nprint(customers.get('Name'))\n# 如果不存在就赋默认值\nprint(customers.get(\"birthday\", \"Jan 1 1994\"))\n# 更新值\ncustomers[\"name\"] = \"令狐冲\"\nprint(customers[\"name\"])\n\n#----------------------------------\n\nphone = input(\"Phone: \")\ndigits_mapping = {\n    '1': 'One',\n    '2': 'Two',\n    '3': 'Three',\n    '4': 'Four',\n}\noutput = \"\"\nfor ch in phone:\n    output += digits_mapping.get(ch, \"!\") + \" \"\nprint(output)\n```\n\n**math**\n\n```python\nimport math\n\nprint(math.ceil(2.9))\nprint(math.floor(2.9))\n\nx = 2.9\nprint(round(2.9))\nprint(abs(-2.9))\n```\n\n    ","source":"_posts/python学习2.md","raw":"---\ntitle: python学习2\ndate: 2020-04-24 22:33:02\ntags:\ncategories:\n- python\n---\n\n**if控制语句**\n\n```python\nis_hot = True\nis_cold = True\n\nif is_hot:\n    print(\"It's a hot dat!\")\n    print(\"Drink water\")\nelif is_cold:\n    print(\"It's a cold day\")\nelse:\n    print(\"It's a lovely day\")\nprint(\"Enjoy you day\")\n#--------------------------\nhas_high_income = True\nhas_good_credit = False\nhas_criminal = False\n\nif has_high_income and has_good_credit:\n    print(\"loan\")\nelif has_high_income or has_good_credit:\n    print(\"loan too\")\n\nif has_high_income and not has_criminal:\n    print(\"enjoy for loan\")\n#---------------------------------\ntemperature = 30\n\nif temperature > 30:\n    print(\"haha\")\nelse:\n    print(\"hihihi\")\n\nprint('------------------------------')\n\nname = 'J'\n\nif len(name) < 3:\n    print('name is haha')\n```\n\n**if小练习**\n\n```python\nweight = int(input('Weight: '))\nunit = input('L(bs) or K(g): ')\n\nif unit.upper() == 'L':\n    covert = weight * 0.45\n    print(f\"You are {covert} kilos\")\nelse:\n    covert = weight / 0.45\n    print(f\"You are {covert} Kg\")\n```\n\n**while循环**\n\n注意while..else的使用\n\n```python\ni  = 1\n\nwhile i <= 10:\n    print('*' * i)\n    i += 1\n    if i == 8:\n        print(\"haha dao 8 le\")\n        break\n# while执行完执行else，遇到break就失效\nelse:\n    print('9999999')\nprint(\"Done\")\n\nprint('------------------------------')\n```\n\n**for循环**\n\n```python\nfor item in 'Python':\n    print(item)\n\nprint('-----------------------')\n\nfor item in [2, 1, 3, 4]:\n    print(item)\n\nprint('-----------------------')\n\nfor item in range(10):\n    print(item)\n\nprint('----------------')\n\nfor item in range(4,6):\n    print(item)\nprint('-------------------------')\n\nfor item in range(5, 10, 2):\n    print(item)\n```\n\n**一维数组（长度可变）**\n\n```python\nprices = [10, 20, 30]\nprint(prices)\nsum = 0\nfor i in prices:\n    sum += i\nprint(sum)\n\nprint('------------------')\n\nfor i in range(4):\n    for j in range(5):\n        print(f\"{i},{j}\")\n```\n\n**二维数组**\n\n```python\nmatrix = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n]\nprint(matrix[0])\n\nfor i in matrix:\n    for j in i:\n        print(j)\n```\n\n**数组基本操作**\n\n```python\nnumbers = [5, 2, 1, 7, 2, 4]\nnumbers.append(20)\nnumbers.insert(0, 10)\nprint(numbers)\nnumbers.remove(5)\nprint(numbers)\nprint(numbers.index(2))\nprint(numbers.pop())\nprint(numbers.count(2))\nnumbers.sort()\nnumbers.reverse()\nprint(numbers)\n\nnumbers2 = numbers.copy()\n\nnumbers.clear()\nprint(numbers)\n```\n\n**元组（不能修改）**\n\n```python\n# 元组：不能修改\nnumbers = (1, 2, 3)\nprint(numbers[0])\nprint('-----------------------------')\n# 解压缩特性\ncoor = (1, 2, 3)\n# x = coor[0]\n# y = coor[1]\n# z = coor[2]\n# 等价于上面的写法，这个特性也可以用于数组\nx, y, z = coor\n```\n\n**字典**\n\n```python\ncustomers = {\n    \"name\": \"zhanglong\",\n    \"age\": 18,\n    \"is_verfied\": True\n}\n# 如果不存在key会抛异常\nprint(customers['name'])\n# 如果不存在key不会抛异常\nprint(customers.get('Name'))\n# 如果不存在就赋默认值\nprint(customers.get(\"birthday\", \"Jan 1 1994\"))\n# 更新值\ncustomers[\"name\"] = \"令狐冲\"\nprint(customers[\"name\"])\n\n#----------------------------------\n\nphone = input(\"Phone: \")\ndigits_mapping = {\n    '1': 'One',\n    '2': 'Two',\n    '3': 'Three',\n    '4': 'Four',\n}\noutput = \"\"\nfor ch in phone:\n    output += digits_mapping.get(ch, \"!\") + \" \"\nprint(output)\n```\n\n**math**\n\n```python\nimport math\n\nprint(math.ceil(2.9))\nprint(math.floor(2.9))\n\nx = 2.9\nprint(round(2.9))\nprint(abs(-2.9))\n```\n\n    ","slug":"python学习2","published":1,"updated":"2021-11-23T14:19:16.396Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckwc7u3mn000xtc6chha71p2u","content":"<p><strong>if控制语句</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">is_hot = <span class=\"literal\">True</span></span><br><span class=\"line\">is_cold = <span class=\"literal\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> is_hot:</span><br><span class=\"line\">    print(<span class=\"string\">&quot;It&#x27;s a hot dat!&quot;</span>)</span><br><span class=\"line\">    print(<span class=\"string\">&quot;Drink water&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">elif</span> is_cold:</span><br><span class=\"line\">    print(<span class=\"string\">&quot;It&#x27;s a cold day&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    print(<span class=\"string\">&quot;It&#x27;s a lovely day&quot;</span>)</span><br><span class=\"line\">print(<span class=\"string\">&quot;Enjoy you day&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\">#--------------------------</span></span><br><span class=\"line\">has_high_income = <span class=\"literal\">True</span></span><br><span class=\"line\">has_good_credit = <span class=\"literal\">False</span></span><br><span class=\"line\">has_criminal = <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> has_high_income <span class=\"keyword\">and</span> has_good_credit:</span><br><span class=\"line\">    print(<span class=\"string\">&quot;loan&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">elif</span> has_high_income <span class=\"keyword\">or</span> has_good_credit:</span><br><span class=\"line\">    print(<span class=\"string\">&quot;loan too&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> has_high_income <span class=\"keyword\">and</span> <span class=\"keyword\">not</span> has_criminal:</span><br><span class=\"line\">    print(<span class=\"string\">&quot;enjoy for loan&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\">#---------------------------------</span></span><br><span class=\"line\">temperature = <span class=\"number\">30</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> temperature &gt; <span class=\"number\">30</span>:</span><br><span class=\"line\">    print(<span class=\"string\">&quot;haha&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    print(<span class=\"string\">&quot;hihihi&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">print(<span class=\"string\">&#x27;------------------------------&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">name = <span class=\"string\">&#x27;J&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> len(name) &lt; <span class=\"number\">3</span>:</span><br><span class=\"line\">    print(<span class=\"string\">&#x27;name is haha&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<p><strong>if小练习</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">weight = int(input(<span class=\"string\">&#x27;Weight: &#x27;</span>))</span><br><span class=\"line\">unit = input(<span class=\"string\">&#x27;L(bs) or K(g): &#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> unit.upper() == <span class=\"string\">&#x27;L&#x27;</span>:</span><br><span class=\"line\">    covert = weight * <span class=\"number\">0.45</span></span><br><span class=\"line\">    print(<span class=\"string\">f&quot;You are <span class=\"subst\">&#123;covert&#125;</span> kilos&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    covert = weight / <span class=\"number\">0.45</span></span><br><span class=\"line\">    print(<span class=\"string\">f&quot;You are <span class=\"subst\">&#123;covert&#125;</span> Kg&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<p><strong>while循环</strong></p>\n<p>注意while..else的使用</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">i  = <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> i &lt;= <span class=\"number\">10</span>:</span><br><span class=\"line\">    print(<span class=\"string\">&#x27;*&#x27;</span> * i)</span><br><span class=\"line\">    i += <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> i == <span class=\"number\">8</span>:</span><br><span class=\"line\">        print(<span class=\"string\">&quot;haha dao 8 le&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\"><span class=\"comment\"># while执行完执行else，遇到break就失效</span></span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    print(<span class=\"string\">&#x27;9999999&#x27;</span>)</span><br><span class=\"line\">print(<span class=\"string\">&quot;Done&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">print(<span class=\"string\">&#x27;------------------------------&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<p><strong>for循环</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> <span class=\"string\">&#x27;Python&#x27;</span>:</span><br><span class=\"line\">    print(item)</span><br><span class=\"line\"></span><br><span class=\"line\">print(<span class=\"string\">&#x27;-----------------------&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> [<span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]:</span><br><span class=\"line\">    print(item)</span><br><span class=\"line\"></span><br><span class=\"line\">print(<span class=\"string\">&#x27;-----------------------&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> range(<span class=\"number\">10</span>):</span><br><span class=\"line\">    print(item)</span><br><span class=\"line\"></span><br><span class=\"line\">print(<span class=\"string\">&#x27;----------------&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> range(<span class=\"number\">4</span>,<span class=\"number\">6</span>):</span><br><span class=\"line\">    print(item)</span><br><span class=\"line\">print(<span class=\"string\">&#x27;-------------------------&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> range(<span class=\"number\">5</span>, <span class=\"number\">10</span>, <span class=\"number\">2</span>):</span><br><span class=\"line\">    print(item)</span><br></pre></td></tr></table></figure>\n\n<p><strong>一维数组（长度可变）</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">prices = [<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">30</span>]</span><br><span class=\"line\">print(prices)</span><br><span class=\"line\">sum = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> prices:</span><br><span class=\"line\">    sum += i</span><br><span class=\"line\">print(sum)</span><br><span class=\"line\"></span><br><span class=\"line\">print(<span class=\"string\">&#x27;------------------&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">4</span>):</span><br><span class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(<span class=\"number\">5</span>):</span><br><span class=\"line\">        print(<span class=\"string\">f&quot;<span class=\"subst\">&#123;i&#125;</span>,<span class=\"subst\">&#123;j&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<p><strong>二维数组</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">matrix = [</span><br><span class=\"line\">    [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>],</span><br><span class=\"line\">    [<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>],</span><br><span class=\"line\">    [<span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>]</span><br><span class=\"line\">]</span><br><span class=\"line\">print(matrix[<span class=\"number\">0</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> matrix:</span><br><span class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> i:</span><br><span class=\"line\">        print(j)</span><br></pre></td></tr></table></figure>\n\n<p><strong>数组基本操作</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">numbers = [<span class=\"number\">5</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">7</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>]</span><br><span class=\"line\">numbers.append(<span class=\"number\">20</span>)</span><br><span class=\"line\">numbers.insert(<span class=\"number\">0</span>, <span class=\"number\">10</span>)</span><br><span class=\"line\">print(numbers)</span><br><span class=\"line\">numbers.remove(<span class=\"number\">5</span>)</span><br><span class=\"line\">print(numbers)</span><br><span class=\"line\">print(numbers.index(<span class=\"number\">2</span>))</span><br><span class=\"line\">print(numbers.pop())</span><br><span class=\"line\">print(numbers.count(<span class=\"number\">2</span>))</span><br><span class=\"line\">numbers.sort()</span><br><span class=\"line\">numbers.reverse()</span><br><span class=\"line\">print(numbers)</span><br><span class=\"line\"></span><br><span class=\"line\">numbers2 = numbers.copy()</span><br><span class=\"line\"></span><br><span class=\"line\">numbers.clear()</span><br><span class=\"line\">print(numbers)</span><br></pre></td></tr></table></figure>\n\n<p><strong>元组（不能修改）</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 元组：不能修改</span></span><br><span class=\"line\">numbers = (<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\">print(numbers[<span class=\"number\">0</span>])</span><br><span class=\"line\">print(<span class=\"string\">&#x27;-----------------------------&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\"># 解压缩特性</span></span><br><span class=\"line\">coor = (<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"comment\"># x = coor[0]</span></span><br><span class=\"line\"><span class=\"comment\"># y = coor[1]</span></span><br><span class=\"line\"><span class=\"comment\"># z = coor[2]</span></span><br><span class=\"line\"><span class=\"comment\"># 等价于上面的写法，这个特性也可以用于数组</span></span><br><span class=\"line\">x, y, z = coor</span><br></pre></td></tr></table></figure>\n\n<p><strong>字典</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">customers = &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;zhanglong&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;age&quot;</span>: <span class=\"number\">18</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;is_verfied&quot;</span>: <span class=\"literal\">True</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\"># 如果不存在key会抛异常</span></span><br><span class=\"line\">print(customers[<span class=\"string\">&#x27;name&#x27;</span>])</span><br><span class=\"line\"><span class=\"comment\"># 如果不存在key不会抛异常</span></span><br><span class=\"line\">print(customers.get(<span class=\"string\">&#x27;Name&#x27;</span>))</span><br><span class=\"line\"><span class=\"comment\"># 如果不存在就赋默认值</span></span><br><span class=\"line\">print(customers.get(<span class=\"string\">&quot;birthday&quot;</span>, <span class=\"string\">&quot;Jan 1 1994&quot;</span>))</span><br><span class=\"line\"><span class=\"comment\"># 更新值</span></span><br><span class=\"line\">customers[<span class=\"string\">&quot;name&quot;</span>] = <span class=\"string\">&quot;令狐冲&quot;</span></span><br><span class=\"line\">print(customers[<span class=\"string\">&quot;name&quot;</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#----------------------------------</span></span><br><span class=\"line\"></span><br><span class=\"line\">phone = input(<span class=\"string\">&quot;Phone: &quot;</span>)</span><br><span class=\"line\">digits_mapping = &#123;</span><br><span class=\"line\">    <span class=\"string\">&#x27;1&#x27;</span>: <span class=\"string\">&#x27;One&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;2&#x27;</span>: <span class=\"string\">&#x27;Two&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;3&#x27;</span>: <span class=\"string\">&#x27;Three&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;4&#x27;</span>: <span class=\"string\">&#x27;Four&#x27;</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">output = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> ch <span class=\"keyword\">in</span> phone:</span><br><span class=\"line\">    output += digits_mapping.get(ch, <span class=\"string\">&quot;!&quot;</span>) + <span class=\"string\">&quot; &quot;</span></span><br><span class=\"line\">print(output)</span><br></pre></td></tr></table></figure>\n\n<p><strong>math</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> math</span><br><span class=\"line\"></span><br><span class=\"line\">print(math.ceil(<span class=\"number\">2.9</span>))</span><br><span class=\"line\">print(math.floor(<span class=\"number\">2.9</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">x = <span class=\"number\">2.9</span></span><br><span class=\"line\">print(round(<span class=\"number\">2.9</span>))</span><br><span class=\"line\">print(abs(<span class=\"number\">-2.9</span>))</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<p><strong>if控制语句</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">is_hot = <span class=\"literal\">True</span></span><br><span class=\"line\">is_cold = <span class=\"literal\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> is_hot:</span><br><span class=\"line\">    print(<span class=\"string\">&quot;It&#x27;s a hot dat!&quot;</span>)</span><br><span class=\"line\">    print(<span class=\"string\">&quot;Drink water&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">elif</span> is_cold:</span><br><span class=\"line\">    print(<span class=\"string\">&quot;It&#x27;s a cold day&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    print(<span class=\"string\">&quot;It&#x27;s a lovely day&quot;</span>)</span><br><span class=\"line\">print(<span class=\"string\">&quot;Enjoy you day&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\">#--------------------------</span></span><br><span class=\"line\">has_high_income = <span class=\"literal\">True</span></span><br><span class=\"line\">has_good_credit = <span class=\"literal\">False</span></span><br><span class=\"line\">has_criminal = <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> has_high_income <span class=\"keyword\">and</span> has_good_credit:</span><br><span class=\"line\">    print(<span class=\"string\">&quot;loan&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">elif</span> has_high_income <span class=\"keyword\">or</span> has_good_credit:</span><br><span class=\"line\">    print(<span class=\"string\">&quot;loan too&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> has_high_income <span class=\"keyword\">and</span> <span class=\"keyword\">not</span> has_criminal:</span><br><span class=\"line\">    print(<span class=\"string\">&quot;enjoy for loan&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\">#---------------------------------</span></span><br><span class=\"line\">temperature = <span class=\"number\">30</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> temperature &gt; <span class=\"number\">30</span>:</span><br><span class=\"line\">    print(<span class=\"string\">&quot;haha&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    print(<span class=\"string\">&quot;hihihi&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">print(<span class=\"string\">&#x27;------------------------------&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">name = <span class=\"string\">&#x27;J&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> len(name) &lt; <span class=\"number\">3</span>:</span><br><span class=\"line\">    print(<span class=\"string\">&#x27;name is haha&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<p><strong>if小练习</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">weight = int(input(<span class=\"string\">&#x27;Weight: &#x27;</span>))</span><br><span class=\"line\">unit = input(<span class=\"string\">&#x27;L(bs) or K(g): &#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> unit.upper() == <span class=\"string\">&#x27;L&#x27;</span>:</span><br><span class=\"line\">    covert = weight * <span class=\"number\">0.45</span></span><br><span class=\"line\">    print(<span class=\"string\">f&quot;You are <span class=\"subst\">&#123;covert&#125;</span> kilos&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    covert = weight / <span class=\"number\">0.45</span></span><br><span class=\"line\">    print(<span class=\"string\">f&quot;You are <span class=\"subst\">&#123;covert&#125;</span> Kg&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<p><strong>while循环</strong></p>\n<p>注意while..else的使用</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">i  = <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> i &lt;= <span class=\"number\">10</span>:</span><br><span class=\"line\">    print(<span class=\"string\">&#x27;*&#x27;</span> * i)</span><br><span class=\"line\">    i += <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> i == <span class=\"number\">8</span>:</span><br><span class=\"line\">        print(<span class=\"string\">&quot;haha dao 8 le&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\"><span class=\"comment\"># while执行完执行else，遇到break就失效</span></span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    print(<span class=\"string\">&#x27;9999999&#x27;</span>)</span><br><span class=\"line\">print(<span class=\"string\">&quot;Done&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">print(<span class=\"string\">&#x27;------------------------------&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<p><strong>for循环</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> <span class=\"string\">&#x27;Python&#x27;</span>:</span><br><span class=\"line\">    print(item)</span><br><span class=\"line\"></span><br><span class=\"line\">print(<span class=\"string\">&#x27;-----------------------&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> [<span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]:</span><br><span class=\"line\">    print(item)</span><br><span class=\"line\"></span><br><span class=\"line\">print(<span class=\"string\">&#x27;-----------------------&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> range(<span class=\"number\">10</span>):</span><br><span class=\"line\">    print(item)</span><br><span class=\"line\"></span><br><span class=\"line\">print(<span class=\"string\">&#x27;----------------&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> range(<span class=\"number\">4</span>,<span class=\"number\">6</span>):</span><br><span class=\"line\">    print(item)</span><br><span class=\"line\">print(<span class=\"string\">&#x27;-------------------------&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> range(<span class=\"number\">5</span>, <span class=\"number\">10</span>, <span class=\"number\">2</span>):</span><br><span class=\"line\">    print(item)</span><br></pre></td></tr></table></figure>\n\n<p><strong>一维数组（长度可变）</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">prices = [<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">30</span>]</span><br><span class=\"line\">print(prices)</span><br><span class=\"line\">sum = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> prices:</span><br><span class=\"line\">    sum += i</span><br><span class=\"line\">print(sum)</span><br><span class=\"line\"></span><br><span class=\"line\">print(<span class=\"string\">&#x27;------------------&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">4</span>):</span><br><span class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(<span class=\"number\">5</span>):</span><br><span class=\"line\">        print(<span class=\"string\">f&quot;<span class=\"subst\">&#123;i&#125;</span>,<span class=\"subst\">&#123;j&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<p><strong>二维数组</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">matrix = [</span><br><span class=\"line\">    [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>],</span><br><span class=\"line\">    [<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>],</span><br><span class=\"line\">    [<span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>]</span><br><span class=\"line\">]</span><br><span class=\"line\">print(matrix[<span class=\"number\">0</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> matrix:</span><br><span class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> i:</span><br><span class=\"line\">        print(j)</span><br></pre></td></tr></table></figure>\n\n<p><strong>数组基本操作</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">numbers = [<span class=\"number\">5</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">7</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>]</span><br><span class=\"line\">numbers.append(<span class=\"number\">20</span>)</span><br><span class=\"line\">numbers.insert(<span class=\"number\">0</span>, <span class=\"number\">10</span>)</span><br><span class=\"line\">print(numbers)</span><br><span class=\"line\">numbers.remove(<span class=\"number\">5</span>)</span><br><span class=\"line\">print(numbers)</span><br><span class=\"line\">print(numbers.index(<span class=\"number\">2</span>))</span><br><span class=\"line\">print(numbers.pop())</span><br><span class=\"line\">print(numbers.count(<span class=\"number\">2</span>))</span><br><span class=\"line\">numbers.sort()</span><br><span class=\"line\">numbers.reverse()</span><br><span class=\"line\">print(numbers)</span><br><span class=\"line\"></span><br><span class=\"line\">numbers2 = numbers.copy()</span><br><span class=\"line\"></span><br><span class=\"line\">numbers.clear()</span><br><span class=\"line\">print(numbers)</span><br></pre></td></tr></table></figure>\n\n<p><strong>元组（不能修改）</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 元组：不能修改</span></span><br><span class=\"line\">numbers = (<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\">print(numbers[<span class=\"number\">0</span>])</span><br><span class=\"line\">print(<span class=\"string\">&#x27;-----------------------------&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\"># 解压缩特性</span></span><br><span class=\"line\">coor = (<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"comment\"># x = coor[0]</span></span><br><span class=\"line\"><span class=\"comment\"># y = coor[1]</span></span><br><span class=\"line\"><span class=\"comment\"># z = coor[2]</span></span><br><span class=\"line\"><span class=\"comment\"># 等价于上面的写法，这个特性也可以用于数组</span></span><br><span class=\"line\">x, y, z = coor</span><br></pre></td></tr></table></figure>\n\n<p><strong>字典</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">customers = &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;zhanglong&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;age&quot;</span>: <span class=\"number\">18</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;is_verfied&quot;</span>: <span class=\"literal\">True</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\"># 如果不存在key会抛异常</span></span><br><span class=\"line\">print(customers[<span class=\"string\">&#x27;name&#x27;</span>])</span><br><span class=\"line\"><span class=\"comment\"># 如果不存在key不会抛异常</span></span><br><span class=\"line\">print(customers.get(<span class=\"string\">&#x27;Name&#x27;</span>))</span><br><span class=\"line\"><span class=\"comment\"># 如果不存在就赋默认值</span></span><br><span class=\"line\">print(customers.get(<span class=\"string\">&quot;birthday&quot;</span>, <span class=\"string\">&quot;Jan 1 1994&quot;</span>))</span><br><span class=\"line\"><span class=\"comment\"># 更新值</span></span><br><span class=\"line\">customers[<span class=\"string\">&quot;name&quot;</span>] = <span class=\"string\">&quot;令狐冲&quot;</span></span><br><span class=\"line\">print(customers[<span class=\"string\">&quot;name&quot;</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#----------------------------------</span></span><br><span class=\"line\"></span><br><span class=\"line\">phone = input(<span class=\"string\">&quot;Phone: &quot;</span>)</span><br><span class=\"line\">digits_mapping = &#123;</span><br><span class=\"line\">    <span class=\"string\">&#x27;1&#x27;</span>: <span class=\"string\">&#x27;One&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;2&#x27;</span>: <span class=\"string\">&#x27;Two&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;3&#x27;</span>: <span class=\"string\">&#x27;Three&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;4&#x27;</span>: <span class=\"string\">&#x27;Four&#x27;</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">output = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> ch <span class=\"keyword\">in</span> phone:</span><br><span class=\"line\">    output += digits_mapping.get(ch, <span class=\"string\">&quot;!&quot;</span>) + <span class=\"string\">&quot; &quot;</span></span><br><span class=\"line\">print(output)</span><br></pre></td></tr></table></figure>\n\n<p><strong>math</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> math</span><br><span class=\"line\"></span><br><span class=\"line\">print(math.ceil(<span class=\"number\">2.9</span>))</span><br><span class=\"line\">print(math.floor(<span class=\"number\">2.9</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">x = <span class=\"number\">2.9</span></span><br><span class=\"line\">print(round(<span class=\"number\">2.9</span>))</span><br><span class=\"line\">print(abs(<span class=\"number\">-2.9</span>))</span><br></pre></td></tr></table></figure>\n\n"},{"title":"支付系统对于异步通知的处理","date":"2019-09-08T23:53:59.000Z","draft":true,"_content":"\n##### 1. 传统做法\n\n调用第三方支付时，支付成功后通过第三方回调来获取最终的支付结果，之后处理支付成功的业务。\n##### 2. 如果接不到异步通知怎么办？\n- 一般来说，第三方支付，比如支付宝，新浪支付都会提供相应的交易查询接口，用来对该笔订单的最终结果进行查询。所以，部分企业采用发起交易之后，调用第三方查询来主动查询支付结果，彻底抛弃异步通知机制，保证不会因为网络等原因丢失交易结果。\n- 但是，这种方式也存在一些问题：调用第三支付查询接口时，交易不一定结束，查询到的可能是不确定的结果，比如交易已经在第三方创建成功，但是是否交易成功的结果还没有拿到。针对这种情况，有些企业会采取创建交易后，线程睡眠1秒或2秒进行查询，但这种方式势必会导致用户不必要的等待，降低用户体验，并且，到底等几秒才是最合理的也没有定论。并且，大多数第三方支付的交易查询接口所返回的参数一般都比异步通知的参数要少，比如新浪支付在主动调用交易查询时，无法获得内部交易流失号等，这样会导致获取参数不全的问题。\n- 所以，作者采用以异步通知为主，以定时任务运行交易查询作为异步通知的辅助措施。\n##### 3. 具体操作\n在异步通知中处理所有的业务逻辑，包括对于必要参数的更新，以及通知订单或其他业务系统做后续的业务操作。使用分布式定时任务调度框架，添加定时查询任务，查询商户系统的流水表，对未拿到异步通知的订单主动去调用第三方查询，拿到最终的结果。作者这里使用的是XXL-JOB分布式任务调度平台。\n\n##### 4.注意事项\n- 定时任务设置多久一次，查询哪个时间段的订单？ <br><br>\n我们需要以异步通知的结果为准，所以定时任务查询的订单需要查询创建时间在当前时间一段时间之前的订单，仅作为没接到异步通知的保护措施。作者这里设置的是每两分钟一次定时任务，查询当前时间1分钟前到6分钟前的订单，这样可以保证每个待查询订单都有两次机会被定时任务保护，防止查询时仍然是待支付等不确定结果。<br><br>\n- 定时任务中也进行业务逻辑，是否会和异步通知中重复，导致业务逻辑执行两次，比如两次发货等？\n<br><br>\n可以给异步处理和定时查询的具体逻辑中加锁，作者采用的是mysql更新乐观锁，通过唯一请求号更新具体的交易状态，以update结果是否为1作为条件进行后续逻辑。","source":"_posts/支付系统对于异步通知的处理.md","raw":"---\ntitle: \"支付系统对于异步通知的处理\"\ndate: 2019-09-09T15:53:59+08:00\ndraft: true\ncategories:\n- 系统设计\n---\n\n##### 1. 传统做法\n\n调用第三方支付时，支付成功后通过第三方回调来获取最终的支付结果，之后处理支付成功的业务。\n##### 2. 如果接不到异步通知怎么办？\n- 一般来说，第三方支付，比如支付宝，新浪支付都会提供相应的交易查询接口，用来对该笔订单的最终结果进行查询。所以，部分企业采用发起交易之后，调用第三方查询来主动查询支付结果，彻底抛弃异步通知机制，保证不会因为网络等原因丢失交易结果。\n- 但是，这种方式也存在一些问题：调用第三支付查询接口时，交易不一定结束，查询到的可能是不确定的结果，比如交易已经在第三方创建成功，但是是否交易成功的结果还没有拿到。针对这种情况，有些企业会采取创建交易后，线程睡眠1秒或2秒进行查询，但这种方式势必会导致用户不必要的等待，降低用户体验，并且，到底等几秒才是最合理的也没有定论。并且，大多数第三方支付的交易查询接口所返回的参数一般都比异步通知的参数要少，比如新浪支付在主动调用交易查询时，无法获得内部交易流失号等，这样会导致获取参数不全的问题。\n- 所以，作者采用以异步通知为主，以定时任务运行交易查询作为异步通知的辅助措施。\n##### 3. 具体操作\n在异步通知中处理所有的业务逻辑，包括对于必要参数的更新，以及通知订单或其他业务系统做后续的业务操作。使用分布式定时任务调度框架，添加定时查询任务，查询商户系统的流水表，对未拿到异步通知的订单主动去调用第三方查询，拿到最终的结果。作者这里使用的是XXL-JOB分布式任务调度平台。\n\n##### 4.注意事项\n- 定时任务设置多久一次，查询哪个时间段的订单？ <br><br>\n我们需要以异步通知的结果为准，所以定时任务查询的订单需要查询创建时间在当前时间一段时间之前的订单，仅作为没接到异步通知的保护措施。作者这里设置的是每两分钟一次定时任务，查询当前时间1分钟前到6分钟前的订单，这样可以保证每个待查询订单都有两次机会被定时任务保护，防止查询时仍然是待支付等不确定结果。<br><br>\n- 定时任务中也进行业务逻辑，是否会和异步通知中重复，导致业务逻辑执行两次，比如两次发货等？\n<br><br>\n可以给异步处理和定时查询的具体逻辑中加锁，作者采用的是mysql更新乐观锁，通过唯一请求号更新具体的交易状态，以update结果是否为1作为条件进行后续逻辑。","slug":"支付系统对于异步通知的处理","published":1,"updated":"2021-11-23T14:19:16.396Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckwc7u3mn000ytc6c3wh08uzw","content":"<h5 id=\"1-传统做法\"><a href=\"#1-传统做法\" class=\"headerlink\" title=\"1. 传统做法\"></a>1. 传统做法</h5><p>调用第三方支付时，支付成功后通过第三方回调来获取最终的支付结果，之后处理支付成功的业务。</p>\n<h5 id=\"2-如果接不到异步通知怎么办？\"><a href=\"#2-如果接不到异步通知怎么办？\" class=\"headerlink\" title=\"2. 如果接不到异步通知怎么办？\"></a>2. 如果接不到异步通知怎么办？</h5><ul>\n<li>一般来说，第三方支付，比如支付宝，新浪支付都会提供相应的交易查询接口，用来对该笔订单的最终结果进行查询。所以，部分企业采用发起交易之后，调用第三方查询来主动查询支付结果，彻底抛弃异步通知机制，保证不会因为网络等原因丢失交易结果。</li>\n<li>但是，这种方式也存在一些问题：调用第三支付查询接口时，交易不一定结束，查询到的可能是不确定的结果，比如交易已经在第三方创建成功，但是是否交易成功的结果还没有拿到。针对这种情况，有些企业会采取创建交易后，线程睡眠1秒或2秒进行查询，但这种方式势必会导致用户不必要的等待，降低用户体验，并且，到底等几秒才是最合理的也没有定论。并且，大多数第三方支付的交易查询接口所返回的参数一般都比异步通知的参数要少，比如新浪支付在主动调用交易查询时，无法获得内部交易流失号等，这样会导致获取参数不全的问题。</li>\n<li>所以，作者采用以异步通知为主，以定时任务运行交易查询作为异步通知的辅助措施。<h5 id=\"3-具体操作\"><a href=\"#3-具体操作\" class=\"headerlink\" title=\"3. 具体操作\"></a>3. 具体操作</h5>在异步通知中处理所有的业务逻辑，包括对于必要参数的更新，以及通知订单或其他业务系统做后续的业务操作。使用分布式定时任务调度框架，添加定时查询任务，查询商户系统的流水表，对未拿到异步通知的订单主动去调用第三方查询，拿到最终的结果。作者这里使用的是XXL-JOB分布式任务调度平台。</li>\n</ul>\n<h5 id=\"4-注意事项\"><a href=\"#4-注意事项\" class=\"headerlink\" title=\"4.注意事项\"></a>4.注意事项</h5><ul>\n<li>定时任务设置多久一次，查询哪个时间段的订单？ <br><br><br>我们需要以异步通知的结果为准，所以定时任务查询的订单需要查询创建时间在当前时间一段时间之前的订单，仅作为没接到异步通知的保护措施。作者这里设置的是每两分钟一次定时任务，查询当前时间1分钟前到6分钟前的订单，这样可以保证每个待查询订单都有两次机会被定时任务保护，防止查询时仍然是待支付等不确定结果。<br><br></li>\n<li>定时任务中也进行业务逻辑，是否会和异步通知中重复，导致业务逻辑执行两次，比如两次发货等？<br><br><br><br>可以给异步处理和定时查询的具体逻辑中加锁，作者采用的是mysql更新乐观锁，通过唯一请求号更新具体的交易状态，以update结果是否为1作为条件进行后续逻辑。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h5 id=\"1-传统做法\"><a href=\"#1-传统做法\" class=\"headerlink\" title=\"1. 传统做法\"></a>1. 传统做法</h5><p>调用第三方支付时，支付成功后通过第三方回调来获取最终的支付结果，之后处理支付成功的业务。</p>\n<h5 id=\"2-如果接不到异步通知怎么办？\"><a href=\"#2-如果接不到异步通知怎么办？\" class=\"headerlink\" title=\"2. 如果接不到异步通知怎么办？\"></a>2. 如果接不到异步通知怎么办？</h5><ul>\n<li>一般来说，第三方支付，比如支付宝，新浪支付都会提供相应的交易查询接口，用来对该笔订单的最终结果进行查询。所以，部分企业采用发起交易之后，调用第三方查询来主动查询支付结果，彻底抛弃异步通知机制，保证不会因为网络等原因丢失交易结果。</li>\n<li>但是，这种方式也存在一些问题：调用第三支付查询接口时，交易不一定结束，查询到的可能是不确定的结果，比如交易已经在第三方创建成功，但是是否交易成功的结果还没有拿到。针对这种情况，有些企业会采取创建交易后，线程睡眠1秒或2秒进行查询，但这种方式势必会导致用户不必要的等待，降低用户体验，并且，到底等几秒才是最合理的也没有定论。并且，大多数第三方支付的交易查询接口所返回的参数一般都比异步通知的参数要少，比如新浪支付在主动调用交易查询时，无法获得内部交易流失号等，这样会导致获取参数不全的问题。</li>\n<li>所以，作者采用以异步通知为主，以定时任务运行交易查询作为异步通知的辅助措施。<h5 id=\"3-具体操作\"><a href=\"#3-具体操作\" class=\"headerlink\" title=\"3. 具体操作\"></a>3. 具体操作</h5>在异步通知中处理所有的业务逻辑，包括对于必要参数的更新，以及通知订单或其他业务系统做后续的业务操作。使用分布式定时任务调度框架，添加定时查询任务，查询商户系统的流水表，对未拿到异步通知的订单主动去调用第三方查询，拿到最终的结果。作者这里使用的是XXL-JOB分布式任务调度平台。</li>\n</ul>\n<h5 id=\"4-注意事项\"><a href=\"#4-注意事项\" class=\"headerlink\" title=\"4.注意事项\"></a>4.注意事项</h5><ul>\n<li>定时任务设置多久一次，查询哪个时间段的订单？ <br><br><br>我们需要以异步通知的结果为准，所以定时任务查询的订单需要查询创建时间在当前时间一段时间之前的订单，仅作为没接到异步通知的保护措施。作者这里设置的是每两分钟一次定时任务，查询当前时间1分钟前到6分钟前的订单，这样可以保证每个待查询订单都有两次机会被定时任务保护，防止查询时仍然是待支付等不确定结果。<br><br></li>\n<li>定时任务中也进行业务逻辑，是否会和异步通知中重复，导致业务逻辑执行两次，比如两次发货等？<br><br><br><br>可以给异步处理和定时查询的具体逻辑中加锁，作者采用的是mysql更新乐观锁，通过唯一请求号更新具体的交易状态，以update结果是否为1作为条件进行后续逻辑。</li>\n</ul>\n"},{"title":"行为型设计模式.md","date":"2021-11-23T14:43:16.000Z","_content":"\n### 观察者模式\n\n#### 定义\n\n又称为发布订阅模式。在对象之间定义一个一对多的依赖，当一个对象状态改变的时候，所有依赖的对象都会自动收到通知。\n\n被依赖的对象叫做被观察者（Observable），依赖的对象叫做观察者（Observer）。\n\n#### 作用\n\n不同行为之间（观察者和被观察者）进行解耦，对扩展开放，对修改关闭。\n\n#### 实现1\n\n**一个p2p投资理财系统，用户注册成功之后，我们给用户发放投资体验金。**\n\n使用普通的方法调用：用户注册Service，发放体验金Service，在Controller中依次调用这两个方法。\n\n```java\npublic class UserController {\n    private UserService userService;\n    private PromotionService promotionService;\n\n    public Long register(String telephone, String password) {\n        // ...参数校验\n\n        // 注册\n        long userId = userService.register(telephone, password);\n        // 发放投资体验金\n        promotionService.issueNewUserExperienceCash(userId);\n        return userId;\n    }\n\n}\n```\n\n注册接口做了两件事：注册和发放投资体验金，如果需求改动频繁，注册成功后改为发放优惠券，发短信提醒等等，这段代码就违背了开闭原则，后续如果需要在注册只会增加其他功能，比如：给用户发送新人红包，发送注册成功短信等。下面使用观察者模式进行重构。\n\n#### 实现2\n\n使用观察者模式实现。\n\n- 定义一个观察者接口\n\n```java\npublic interface RegObserver {\n    void handleRegSuccess(long userId);\n}\n```\n\n- 具体需要做哪些事定义为接口的实现类\n\n```java\npublic class RegPromotionObserver implements RegObserver {\n    private PromotionService promotionService;\n\n    @Override\n    public void handleRegSuccess(long userId) {\n        // 发放投资体验金\n        promotionService.issueNewUserExperienceCash(userId);\n    }\n}\n```\n\n```java\npublic class RegNoitificationObserver implements RegObserver {\n    private NotificationService notificationService;\n\n    @Override\n    public void handleRegSuccess(long userId) {\n        // 发送欢迎短信\n        notificationService.sendInboxMessage(userId, \"Welcome...\");\n    }\n}\n```\n\n```java\npublic class UserController {\n    private UserService userService;\n    private List<RegObserver> regObservers = new ArrayList<>();\n\n    // 一次设置好，之后不会再动态更改\n    public void setRegObserves(List<RegObserver> observes) {\n        regObservers.addAll(observes);\n    }\n\n    public Long register(String telephone, String password) {\n        // ...参数校验\n\n        // 注册\n        long userId = userService.register(telephone, password);\n\n        // 通知观察者\n        for (RegObserver regObserver : regObservers) {\n            regObserver.handleRegSuccess(userId);\n        }\n\n        return userId;\n    }\n}\n```\n\n使用这种方式实现，对于注册之后的行为，注册方法不需要去关注。\n\n这种方式使用了同步阻塞的方式，依然有缺陷，观察者代码会被阻塞执行，观察者代码的执行结果会影响注册逻辑的成功执行。\n\n#### 实现3\n\n异步非阻塞方式实现。\n\n- 线程池\n  \n  这种方式将线程池和异步执行逻辑耦合在注册代码中，提高了维护成本；并且如果需求在同步和异步之间来回切换，就需要频繁改动注册代码。\n  \n- Guava EventBus\n\n  ```java\n  public class UserController {\n      private UserService userService = new UserService();\n  \n      private EventBus eventBus;\n      private static final int DEFAULT_EVENTBUS_THREAD_POOL_SIZE = 20;\n  \n      public UserController() {\n          // this.eventBus = new EventBus(); 同步阻塞模式\n          this.eventBus = new AsyncEventBus(Executors.newFixedThreadPool(DEFAULT_EVENTBUS_THREAD_POOL_SIZE));\n      }\n  \n      // 一次设置好，之后不会再动态更改\n      public void setRegObserves(List<Object> observes) {\n          for (Object obj : observes) {\n              eventBus.register(obj);\n          }\n      }\n  \n      public Long register(String telephone, String password) {\n          // ...参数校验\n  \n          // 注册\n          long userId = userService.register(telephone, password);\n  \n          // 通知观察者\n          eventBus.post(userId);\n  \n          return userId;\n      }\n  }\n  \n  public class RegNoitificationObserver{\n      private NotificationService notificationService = new NotificationService() {\n          @Override\n          public void sendInboxMessage(long userId, String message) {\n              // ...\n              System.out.println(userId + \", \" + message);\n          }\n      };\n  \n      @Subscribe\n      public void handleRegSuccess(Long userId) {\n          notificationService.sendInboxMessage(userId, \"Welcome...\");\n      }\n  }\n  \n  public class RegPromotionObserver{\n      private PromotionService promotionService = new PromotionService() {\n          @Override\n          public void issueNewUserExperienceCash(long userId) {\n              System.out.println(userId + \", Promotion is done\");\n          }\n      };\n  \n      @Subscribe\n      public void handleRegSuccess(Long userId) {\n          promotionService.issueNewUserExperienceCash(userId);\n      }\n      \n      //    @Subscribe\n  //    public void handleRegSuccess2(Integer userId) {\n  //        System.out.println(\"hello pro\");\n  //    }\n  }\n  ```\n  \n  使用这种方式不需要定义Observer接口，只需要通过@Subscribe表明哪个方法可以接收被观察者发送的消息即可，如果注册之后不再需要发放体验金，去掉该注解即可。\n  \n  但需要注意，观察者的入参需要是eventBus.register(obj)中obj对象及父类的包装类。\n\n#### 实现4\n\nSpring也提供了针对观察者模式的扩展。\n\n#### 实现5\n\n通过消息队列实现。\n\n这种方式更有利于观察者和被观察者的解耦，但是额外引入了中间件，增加了系统的复杂性；一般分布式系统中不同项目间的通信使用这种方式。\n\n---\n\n### 模板模式\n\n#### 定义\n\n模板模式在一个方法中定义一个算法骨架，并将某些步骤推迟到子类中实现。模板模式可以让子类在不改变算法整体结构的情况下，重新定义算法中的某些步骤。\n\n#### 作用\n\n代码的复用和扩展。\n\n#### 实现\n\n通过抽象类中定义算法骨架，具体实现中对某些步骤进行实现。\n\n模板方法定义为final，可以避免被子类重写；需要重写的方法定义为abstract，可以强迫子类去实现。\n\n```java\npublic abstract class AbstarctClass {\n\n    public final void templateMethod() {\n        // ...\n        \n        method1();\n        //...\n        method2();\n        //...\n    }\n\n    protected abstract void method2();\n\n    protected abstract void method1();\n\n}\n\npublic class ConcreteClass1 extends AbstarctClass {\n\n    @Override\n    protected void method2() {\n\n    }\n\n    @Override\n    protected void method1() {\n\n    }\n}\n\npublic class ConcreteClass2 extends AbstarctClass {\n\n    @Override\n    protected void method2() {\n        \n    }\n\n    @Override\n    protected void method1() {\n\n    }\n}\n\npublic class Demo {\n\n    public static void main(String[] args) {\n        AbstarctClass demo = new ConcreteClass1();\n        demo.templateMethod();\n    }\n}\n```\n\n#### JDK中的实现\n\n##### 集合\n\n在AbstractList中，addAll()方法提供了算法骨架，add()方法需要子类实现，虽然没有声明为abstract，但是如果子类不实现就直接抛出异常。\n\n```java\npublic boolean addAll(int index, Collection<? extends E> c) {\n    rangeCheckForAdd(index);\n    boolean modified = false;\n    for (E e : c) {\n        add(index++, e);\n        modified = true;\n    }\n    return modified;\n}\n\npublic void add(int index, E element) {\n    throw new UnsupportedOperationException();\n}\n```\n\n##### 排序\n\n模板模式提供了框架的扩展点，让框架使用者，在不修改框架源码的情况下，基于扩展点定制化框架的功能。Java 中的 Collections 类的 sort() 函数也利用了模板模式的这个扩展特性。\n\nCollections.sort() 实现了对集合的排序。为了扩展性，它将其中“比较大小”这部分逻辑，委派给用户来实现。如果我们把比较大小这部分逻辑看作整个排序逻辑的其中一个步骤，那我们就可以把它看作模板模式。不过，从代码实现的角度来看，并不是模板模式的经典代码实现，而是基于 Callback 回调机制来实现的。\n\nA 类（Demo）事先注册某个函数 F（Comparator的具体实现） 到 B 类（Collections），A 类在调用 B 类的 P 函数（sort）的时候，B 类反过来调用 A 类注册给它的 F 函数。回调也具有复用和扩展的功能。\n\n```java\npublic static <T> void sort(List<T> list, Comparator<? super T> c) {\n    list.sort(c);\n}\n\n// 使用\npublic class Demo {\n    public static void main(String[] args) {\n        List<Student> students = new ArrayList<>();\n        students.add(new Student(\"Alice\", 19, 89.0f));\n        students.add(new Student(\"Peter\", 20, 78.0f));\n        students.add(new Student(\"Leo\", 18, 99.0f));\n\n        Collections.sort(students, new AgeAscComparator());\n        print(students);\n\n        System.out.println(\"-----------------------------------\");\n\n        Collections.sort(students, new NameAscComparator());\n        print(students);\n\n        System.out.println(\"-----------------------------------\");\n\n        Collections.sort(students, new ScoreDescComparator());\n        print(students);\n    }\n\n    public static void print(List<Student> students) {\n        for (Student s : students) {\n            System.out.println(s.getName() + \" \" + s.getAge() + \" \" + s.getScore());\n        }\n    }\n\n    public static class AgeAscComparator implements Comparator<Student> {\n        @Override\n        public int compare(Student o1, Student o2) {\n            return o1.getAge() - o2.getAge();\n        }\n    }\n\n    public static class NameAscComparator implements Comparator<Student> {\n        @Override\n        public int compare(Student o1, Student o2) {\n            return o1.getName().compareTo(o2.getName());\n        }\n    }\n\n    public static class ScoreDescComparator implements Comparator<Student> {\n        @Override\n        public int compare(Student o1, Student o2) {\n            if (Math.abs(o1.getScore() - o2.getScore()) < 0.001) {\n                return 0;\n            } else if (o1.getScore() < o2.getScore()) {\n                return 1;\n            } else {\n                return -1;\n            }\n        }\n    }\n}\n\n```\n\n##### HttpServlet\n\n```java\npublic class HelloServlet extends HttpServlet {\n  @Override\n  protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n    this.doPost(req, resp);\n  }\n  \n  @Override\n  protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n    resp.getWriter().write(\"Hello World.\");\n  }\n}\n```\n\n当我们在浏览器中输入网址（比如，http://127.0.0.1:8080/hello ）的时候，Servlet 容器会接收到相应的请求，并且根据 URL 和 Servlet 之间的映射关系，找到相应的 Servlet（HelloServlet），然后执行它的 service() 方法。service() 方法定义在父类 HttpServlet 中，它会调用 doGet() 或 doPost() 方法，然后输出数据（“Hello world”）到网页。\n\n```java\npublic void service(ServletRequest req, ServletResponse res)\n    throws ServletException, IOException\n{\n    HttpServletRequest  request;\n    HttpServletResponse response;\n    if (!(req instanceof HttpServletRequest &&\n            res instanceof HttpServletResponse)) {\n        throw new ServletException(\"non-HTTP request or response\");\n    }\n    request = (HttpServletRequest) req;\n    response = (HttpServletResponse) res;\n    service(request, response);\n}\n\nprotected void service(HttpServletRequest req, HttpServletResponse resp)\n    throws ServletException, IOException\n{\n    String method = req.getMethod();\n    if (method.equals(METHOD_GET)) {\n        long lastModified = getLastModified(req);\n        if (lastModified == -1) {\n            // servlet doesn't support if-modified-since, no reason\n            // to go through further expensive logic\n            doGet(req, resp);\n        } else {\n            long ifModifiedSince = req.getDateHeader(HEADER_IFMODSINCE);\n            if (ifModifiedSince < lastModified) {\n                // If the servlet mod time is later, call doGet()\n                // Round down to the nearest second for a proper compare\n                // A ifModifiedSince of -1 will always be less\n                maybeSetLastModified(resp, lastModified);\n                doGet(req, resp);\n            } else {\n                resp.setStatus(HttpServletResponse.SC_NOT_MODIFIED);\n            }\n        }\n    } else if (method.equals(METHOD_HEAD)) {\n        long lastModified = getLastModified(req);\n        maybeSetLastModified(resp, lastModified);\n        doHead(req, resp);\n    } else if (method.equals(METHOD_POST)) {\n        doPost(req, resp);\n    } else if (method.equals(METHOD_PUT)) {\n        doPut(req, resp);\n    } else if (method.equals(METHOD_DELETE)) {\n        doDelete(req, resp);\n    } else if (method.equals(METHOD_OPTIONS)) {\n        doOptions(req,resp);\n    } else if (method.equals(METHOD_TRACE)) {\n        doTrace(req,resp);\n    } else {\n        String errMsg = lStrings.getString(\"http.method_not_implemented\");\n        Object[] errArgs = new Object[1];\n        errArgs[0] = method;\n        errMsg = MessageFormat.format(errMsg, errArgs);\n        resp.sendError(HttpServletResponse.SC_NOT_IMPLEMENTED, errMsg);\n    }\n}\n```\n\n从上面的代码中我们可以看出，HttpServlet 的 service() 方法就是一个模板方法，它实现了整个 HTTP 请求的执行流程，doGet()、doPost() 是模板中可以由子类来定制的部分。实际上，这就相当于 Servlet 框架提供了一个扩展点（doGet()、doPost() 方法），让框架用户在不用修改 Servlet 框架源码的情况下，将业务代码通过扩展点镶嵌到框架中执行。\n\n#### 扩展\n\n如果我们某个实现只用到其中的一个模板方法，也需要把所有抽象方法都实现一遍，怎么优化？\n\n```java\npublic abstract AbstractClass {\n    public final void templateMethod1() {\n        // ...\n        method1();\n        //...\n        method2();\n        //...\n    }\n    \n    public final void templateMethod() {\n        // ...\n        method3();\n        // ...\n        method4();\n        //...\n    }\n    \n    public abstract void method1();\n    public abstract void method2();\n    public abstract void method3();\n    public abstract void method4();\n}\n```\n\n第一种：如果某个实现只用到一个模板方法，说明这个类不应该设置这么多的抽象方法，应该拆分成更细粒度的两个类；\n\n第二种：给不常用（不是每个子类都需要实现一遍）的抽象方法设置默认实现。\n\n---\n\n### 策略模式\n\n#### 定义\n\n定义一族算法类，将每个算法分别封装起来，让它们可以互相替换。策略模式可以使算法的变化独立于使用它们的客户端。\n\n#### 作用\n\n对策略的定义、创建和使用进行解耦。\n\n#### 实现\n\n##### 普通实现\n\n```java\npublic static void main(String[] args) throws IOException {\n    String type = \"A\";\n    if ('A'.equals(type)) {\n        // A逻辑\n        \n    } else if ('B'.equals(type)) {\n        // B逻辑\n        \n    }\n}\n```\n\n##### 策略的定义\n\n包含一个策略接口和一组实现这个接口的策略类。\n\n```java\npublic interface Strategy {\n    void algoInterface();\n}\n\npublic class ConcreteStrartegyA implements Strategy {\n    @Override\n    public void algoInterface() {\n        //...具体算法\n        System.out.println(\"this is A\");\n    }\n}\n\npublic class ConcreteStrartegyB implements Strategy {\n    @Override\n    public void algoInterface() {\n        //...具体算法\n        System.out.println(\"this is B\");\n    }\n}\n```\n\n##### 策略的创建\n\n一般在使用的时候，会通过类型（type）来判断创建哪个策略来进行使用；为了封装创建逻辑，我们把根据type创建策略的逻辑抽出来放到工厂类中。\n\n- 无状态策略\n\n  如果策略对象可以被共享使用（单例），那么可以采用如下的工厂方法创建策略。\n\n  ```java\n  public class StrategyFactory {\n  \n      private static final Map<String, Strategy> strategies = new HashMap<>();\n  \n      static {\n          strategies.put(\"A\", new ConcreteStrartegyA());\n          strategies.put(\"B\", new ConcreteStrartegyB());\n      }\n  \n      public static Strategy getStrategy(String type) {\n          if (type == null || type.isEmpty()) {\n              throw new IllegalArgumentException(\"type should not be empty.\");\n          }\n          return strategies.get(type);\n      }\n  }\n  ```\n  \n- 有状态策略\n\n  如果策略是有状态的，我们希望每次都获取的是新创建的策略对象，那么采用如下方式。\n\n  ```java\n  public class StrategyFactory2 {\n  \n      public static Strategy getStrategy(String type) {\n          if (type == null || type.isEmpty()) {\n              throw new IllegalArgumentException(\"type should not be empty.\");\n          }\n  \n          if (\"A\".equals(type)) {\n              return new ConcreteStrartegyA();\n          } else if (\"B\".equals(type)) {\n              return new ConcreteStrartegyB();\n          }\n          return null;\n      }\n  }\n  ```\n\n##### 策略的使用\n\n根据传入的参数，运行时动态确定。\n\n```java\npublic class StrategyDemo {\n\n    public static void main(String[] args) {\n        String type = args[0];\n        Strategy strategy = StrategyFactory.getStrategy(type);\n        strategy.algoInterface();\n    }\n}\n```\n---\n\n### 职责链模式\n\n#### 定义\n\n将请求的发送和接收解耦，让多个对象都有机会处理这个请求。将这些接收对象串成一条链，并沿着这条链传递这个请求，直到链上的某个接收对象能够处理它为止。\n\n多个处理器依次处理同一个请求，一个请求先经过A处理器处理，然后再把请求传递给B处理器，以此类推，形成一个链条。链条上的每个处理器处理各自的处理职责，所以叫做职责链模式。\n\n#### 实现1\n\n链表方式实现。\n\n```java\npublic abstract class Handler {\n    // 下一级处理器\n    protected Handler successor;\n\n    public void setSuccessor(Handler successor) {\n        this.successor = successor;\n    }\n\n    // 结合模板模式\n    public final void handle() {\n        // 当前处理器处理请求\n        boolean handled = doHandle();\n        // 如果当前能处理，就不往下传递，如果还有下一处理器 并且 当前处理失败，交给下一处理器处理\n        // 变体：如果想让所有处理器都处理一遍，修改此处的if条件即可\n        if (successor != null && !handled) {\n            successor.handle();\n        }\n    }\n\n    // 处理结果为false，当前不能处理，继续交给下一级处理器；如果为true，直接返回结果\n    protected abstract boolean doHandle();\n}\n\npublic class HandlerA extends Handler {\n\n    @Override\n    protected boolean doHandle() {\n        boolean handled = false;\n        // ...当前处理器处理逻辑，如果当前处理成功，不需要下一级处理，返回true\n        System.out.println(\"A处理失败，向下传递...\");\n        return handled;\n    }\n}\n\npublic class HandlerB extends Handler {\n\n    @Override\n    protected boolean doHandle() {\n        boolean handled = false;\n        // ...当前处理器处理逻辑，如果当前处理成功，不需要下一级处理，返回true\n        System.out.println(\"B处理成功...\");\n        return handled;\n    }\n}\n\npublic class HandlerChain {\n    private Handler head;\n    private Handler tail;\n\n    public void addHandler(Handler handler) {\n        handler.setSuccessor(null);\n\n        if (head == null) {\n            head = handler;\n            tail = handler;\n            return;\n        }\n\n        tail.setSuccessor(handler);\n        tail = handler;\n    }\n\n    public void handle() {\n        if (head != null) {\n            head.handle();\n        }\n    }\n}\n\npublic class Demo {\n\n    public static void main(String[] args) {\n        HandlerChain chain = new HandlerChain();\n        chain.addHandler(new HandlerA());\n        chain.addHandler(new HandlerB());\n        chain.handle();\n    }\n}\n```\n\n#### 实现2\n\n数组方式实现。\n\n```java\npublic interface IHandler {\n    boolean handle();\n}\n\npublic class HandlerA implements IHandler {\n    @Override\n    public boolean handle() {\n        boolean handled = false;\n        // ...当前处理器处理逻辑，如果当前处理成功，不需要下一级处理，返回true\n        System.out.println(\"A处理失败，向下传递...\");\n        return handled;\n    }\n}\n\npublic class HandlerB implements IHandler {\n    @Override\n    public boolean handle() {\n        boolean handled = false;\n        // ...当前处理器处理逻辑，如果当前处理成功，不需要下一级处理，返回true\n        System.out.println(\"B处理失败，向下传递...\");\n        return handled;\n    }\n}\n\npublic class HandlerChain {\n    private List<IHandler> handlers = new ArrayList<>();\n\n    public void addHandler(IHandler handler) {\n        handlers.add(handler);\n    }\n\n    public void handle() {\n        for (IHandler handler : handlers) {\n            // 当前可以成功处理，直接返回\n            if (handler.handle()) {\n                break;\n            }\n        }\n    }\n}\n\npublic class Demo {\n\n    public static void main(String[] args) {\n        HandlerChain chain = new HandlerChain();\n        chain.addHandler(new HandlerA());\n        chain.addHandler(new HandlerB());\n        chain.handle();\n    }\n}\n```\n\n#### 示例\n\n敏感词过滤：对一段文本进行判断，如果里面涉及到敏感词，就禁止展示。\n\n```java\npublic interface SensitiveWorldFilter {\n    /**\n     * 敏感词过滤，如果当前文本含有敏感词，返回true\n     * @param text\n     * @return\n     */\n    boolean doFilter(String text);\n}\n\npublic class PoliticalWordFilter implements SensitiveWorldFilter {\n    @Override\n    public boolean doFilter(String text) {\n        if (text.contains(\"国家\") || text.contains(\"党\")) {\n            System.out.println(\"当前文本敏感，为防止查水表，不予通过\");\n            return true;\n        }\n        return false;\n    }\n}\n\npublic class SexyWordFilter implements SensitiveWorldFilter {\n\n    @Override\n    public boolean doFilter(String text) {\n        if (text.contains(\"性感\")) {\n            System.out.println(\"当前文本涉黄！\");\n            return true;\n        }\n        return false;\n    }\n}\n\npublic class SensitiveWorldFilterChain {\n    private List<SensitiveWorldFilter> filters = new ArrayList<>();\n\n    public void addFilter(SensitiveWorldFilter filter) {\n        filters.add(filter);\n    }\n\n    public boolean filter(String text) {\n        for (SensitiveWorldFilter filter : filters) {\n            if (filter.doFilter(text)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n}\n\npublic class Demo {\n\n    public static void main(String[] args) {\n        // 文本\n        String text = \"性感荷官，在线发牌\";\n        String text2 = \"好好学习，天天向上\";\n        // 敏感词过滤器\n        SensitiveWorldFilterChain chain = new SensitiveWorldFilterChain();\n        chain.addFilter(new SexyWordFilter());\n        chain.addFilter(new PoliticalWordFilter());\n        boolean illeagl = chain.filter(text);\n//        boolean illeagl = chain.filter(text2);\n        if (illeagl) {\n            System.out.println(\"当前文本不合法！\");\n        } else {\n            System.out.println(\"当前文本合法\");\n        }\n    }\n}\n```\n\n#### 框架源码\n\n**Spring的HandlerInterceptor**\n\n日常使用的样子\n\n```java\npublic class LogInterceptor implements HandlerInterceptor {\n\n  @Override\n  public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {\n    System.out.println(\"拦截客户端发送来的请求.\");\n    return true; // 继续后续的处理\n  }\n\n  @Override\n  public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) throws Exception {\n    System.out.println(\"拦截发送给客户端的响应.\");\n  }\n\n  @Override\n  public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) throws Exception {\n    System.out.println(\"这里总是被执行.\");\n  }\n}\n```\n\n![image-20201125114846433](https://tva1.sinaimg.cn/large/0081Kckwly1gl19xi5u0lj322a0n6n5b.jpg)\n\nSpring Interceptor 底层是基于职责链模式实现的。其中，HandlerExecutionChain 类是职责链模式中的处理器链。\n\nhttps://www.jianshu.com/p/8a20c547e245\n\n关键代码如下：\n\n在 Spring 框架中，DispatcherServlet 的 doDispatch() 方法来分发请求，它在真正的业务逻辑执行前后，执行 HandlerExecutionChain 中的 applyPreHandle() 和 applyPostHandle() 函数，用来实现拦截的功能。\n\n```java\nprotected void doDispatch(HttpServletRequest request, HttpServletResponse response) throws Exception {\n    HttpServletRequest processedRequest = request;\n    HandlerExecutionChain mappedHandler = null;\n    boolean multipartRequestParsed = false;\n\n    WebAsyncManager asyncManager = WebAsyncUtils.getAsyncManager(request);\n\n    try {\n        ModelAndView mv = null;\n        Exception dispatchException = null;\n\n        try {\n            processedRequest = checkMultipart(request);\n            multipartRequestParsed = (processedRequest != request);\n\n            // Determine handler for the current request.\n            mappedHandler = getHandler(processedRequest);\n            if (mappedHandler == null) {\n                noHandlerFound(processedRequest, response);\n                return;\n            }\n\n            // Determine handler adapter for the current request.\n            HandlerAdapter ha = getHandlerAdapter(mappedHandler.getHandler());\n\n            // Process last-modified header, if supported by the handler.\n            String method = request.getMethod();\n            boolean isGet = \"GET\".equals(method);\n            if (isGet || \"HEAD\".equals(method)) {\n                long lastModified = ha.getLastModified(request, mappedHandler.getHandler());\n                if (new ServletWebRequest(request, response).checkNotModified(lastModified) && isGet) {\n                    return;\n                }\n            }\n\t\t\t\n            // 请求处理\n            if (!mappedHandler.applyPreHandle(processedRequest, response)) {\n                return;\n            }\n\n            // Actually invoke the handler.\n            mv = ha.handle(processedRequest, response, mappedHandler.getHandler());\n\n            if (asyncManager.isConcurrentHandlingStarted()) {\n                return;\n            }\n\n            applyDefaultViewName(processedRequest, mv);\n            // 响应处理\n            mappedHandler.applyPostHandle(processedRequest, response, mv);\n        }\n        catch (Exception ex) {\n            dispatchException = ex;\n        }\n        catch (Throwable err) {\n            // As of 4.3, we're processing Errors thrown from handler methods as well,\n            // making them available for @ExceptionHandler methods and other scenarios.\n            dispatchException = new NestedServletException(\"Handler dispatch failed\", err);\n        }\n        processDispatchResult(processedRequest, response, mappedHandler, mv, dispatchException);\n    }\n    catch (Exception ex) {\n        triggerAfterCompletion(processedRequest, response, mappedHandler, ex);\n    }\n    catch (Throwable err) {\n        triggerAfterCompletion(processedRequest, response, mappedHandler,\n                               new NestedServletException(\"Handler processing failed\", err));\n    }\n    finally {\n        if (asyncManager.isConcurrentHandlingStarted()) {\n            // Instead of postHandle and afterCompletion\n            if (mappedHandler != null) {\n                // 总是执行\n                mappedHandler.applyAfterConcurrentHandlingStarted(processedRequest, response);\n            }\n        }\n        else {\n            // Clean up any resources used by a multipart request.\n            if (multipartRequestParsed) {\n                cleanupMultipart(processedRequest);\n            }\n        }\n    }\n}\n```\n\nHandlerExecutionChain的关键代码\n\n```java\npublic class HandlerExecutionChain {\n private final Object handler;\n private HandlerInterceptor[] interceptors;\n \n public void addInterceptor(HandlerInterceptor interceptor) {\n  initInterceptorList().add(interceptor);\n }\n\n boolean applyPreHandle(HttpServletRequest request, HttpServletResponse response) throws Exception {\n  HandlerInterceptor[] interceptors = getInterceptors();\n  if (!ObjectUtils.isEmpty(interceptors)) {\n   for (int i = 0; i < interceptors.length; i++) {\n    HandlerInterceptor interceptor = interceptors[i];\n    if (!interceptor.preHandle(request, response, this.handler)) {\n     triggerAfterCompletion(request, response, null);\n     return false;\n    }\n   }\n  }\n  return true;\n }\n\n void applyPostHandle(HttpServletRequest request, HttpServletResponse response, ModelAndView mv) throws Exception {\n  HandlerInterceptor[] interceptors = getInterceptors();\n  if (!ObjectUtils.isEmpty(interceptors)) {\n   for (int i = interceptors.length - 1; i >= 0; i--) {\n    HandlerInterceptor interceptor = interceptors[i];\n    interceptor.postHandle(request, response, this.handler, mv);\n   }\n  }\n }\n\n void triggerAfterCompletion(HttpServletRequest request, HttpServletResponse response, Exception ex)\n   throws Exception {\n  HandlerInterceptor[] interceptors = getInterceptors();\n  if (!ObjectUtils.isEmpty(interceptors)) {\n   for (int i = this.interceptorIndex; i >= 0; i--) {\n    HandlerInterceptor interceptor = interceptors[i];\n    try {\n     interceptor.afterCompletion(request, response, this.handler, ex);\n    } catch (Throwable ex2) {\n     logger.error(\"HandlerInterceptor.afterCompletion threw exception\", ex2);\n    }\n   }\n  }\n }\n}\n```\n\n\n\n---\n\n### 状态模式\n\n##### 定义\n\n##### 有限状态机\n\n状态机有三个组成部分：状态、事件、动作。其中，事件也被称为转移条件。事件触发状态的转移及动作的执行。不过动作不是必须的，也可能只是转变状态，不执行任何动作。\n\n#### 示例\n\n**超级马里奥游戏**：\n\n马里奥有多种形态，刚出生是小马里奥（Small Mario），可以进化成超级马里奥（Super Mario）、火焰马里奥（Fire Mario）、斗篷马里奥（Cape Mario）等等。\t\n\n马里奥遇到不同的事件可以进行形态转变，并进行积分的增减。\n\n<img src=\"https://tva1.sinaimg.cn/large/0081Kckwly1gk55y3hl4qj31310u0tj5.jpg\" alt=\"image-20201028171249300\"  />\n\n#### 代码实现\n\n##### 方式1\n\n**分支逻辑法**\n\n定义一个状态枚举类，一个状态机类，状态机类中提供4个方法，分别是：吃了蘑菇，获得斗篷，获得火焰，遇到怪物。\n\n```java\n// 定义状态\npublic enum State {\n\n    SMALL(0),\n    SUPER(1),\n    FIRE(2),\n    CAPE(3),\n    ;\n\n    private int value;\n\n    private State(int value) {\n        this.value = value;\n    }\n\n    public int getValue() {\n        return this.value;\n    }\n}\n```\n\n```java\n// 状态机\npublic class MarioStateMachine {\n    private int score;\n    private State currentState;\n\n    public MarioStateMachine() {\n        this.score = 0;\n        this.currentState = State.SMALL;\n    }\n\n    public void obtainMushRoom() {\n        if (currentState.equals(State.SMALL)) {\n            this.score += 100;\n            this.currentState = State.SUPER;\n        }\n    }\n\n    public void obtainCape() {\n        if (currentState.equals(State.SMALL) || currentState.equals(State.SUPER)) {\n            this.score += 200;\n            this.currentState = State.CAPE;\n        }\n\n    }\n\n    public void obtainFireFlower() {\n        if (currentState.equals(State.SMALL) || currentState.equals(State.SUPER)) {\n            this.score += 300;\n            this.currentState = State.FIRE;\n        }\n    }\n\n    public void meetMonster() {\n        if (currentState.equals(State.SUPER)) {\n            this.score -= 100;\n            this.currentState = State.SMALL;\n            return;\n        }\n\n        if (currentState.equals(State.CAPE)) {\n            this.score -= 200;\n            this.currentState = State.SMALL;\n            return;\n        }\n\n        if (currentState.equals(State.FIRE)) {\n            this.score -= 300;\n            this.currentState = State.SMALL;\n            return;\n        }\n    }\n\n    public int getScore() {\n        return this.score;\n    }\n\n    public State getCurrentState() {\n        return this.currentState;\n    }\n}\n\npublic class ApplicationDemo {\n    public static void main(String[] args) {\n        // 游戏开始\n        MarioStateMachine mario = new MarioStateMachine();\n        // 吃到蘑菇\n        mario.obtainMushRoom();\n        int score = mario.getScore();\n        State state = mario.getCurrentState();\n        System.out.println(\"mario score：\" + score + \"; state: \" + state);\n    }\n}\n```\n\n对于简单的状态机来说，分支逻辑这种实现方式是可以接受的。但是，对于复杂的状态机来说，这种实现方式极易漏写或者错写某个状态转移。除此之外，代码中充斥着大量的 if-else 或者 switch-case 分支判断逻辑，可读性和可维护性都很差。如果哪天修改了状态机中的某个状态转移，我们要在冗长的分支逻辑中找到对应的代码进行修改，很容易改错，引入 bug。\n\n##### 方式2\n\n**查表法**\n\n使用二维数组表示状态和事件，如下表，第一维表示当前状态，第二维表示事件，值表示当前状态经过事件后，转移到的新状态及执行的动作。\n\n<img src=\"https://tva1.sinaimg.cn/large/0081Kckwly1gk56dpaaawj31360don25.jpg\" alt=\"image-20201028172751310\"  />\n\n定义一个事件类，事件类和State状态类可以组合成为上述的表格。\n\n```java\n// 定义状态\npublic enum State {\n\n    SMALL(0),\n    SUPER(1),\n    FIRE(2),\n    CAPE(3),\n    ;\n\n    private int value;\n\n    private State(int value) {\n        this.value = value;\n    }\n\n    public int getValue() {\n        return this.value;\n    }\n}\n\npublic enum Event {\n\n    GOT_MUSHROOM(0),\n    GOT_CAPE(1),\n    GOT_FIRE(2),\n    MET_MONSTER(3),\n    ;\n\n    private int value;\n\n    private Event(int value) {\n        this.value = value;\n    }\n\n    public int getValue() {\n        return this.value;\n    }\n}\n```\n\n定义状态机，横坐标为State的value，纵坐标为Event的value。\n\n```java\npublic class MarioStateMachine {\n    private int score;\n    private State currentState;\n\n    // 状态值\n    private static final State[][] transitionTable = {\n            {State.SUPER, State.CAPE, State.FIRE, State.SMALL},\n            {State.SUPER, State.CAPE, State.FIRE, State.SMALL},\n            {State.CAPE, State.CAPE, State.CAPE, State.SMALL},\n            {State.FIRE, State.FIRE, State.FIRE, State.SMALL}\n    };\n\n    // 执行动作\n    private static final int[][] actionTable = {\n            {+100, +200, +300, +0},\n            {+0, +200, +300, -100},\n            {+0, +0, +0, -200},\n            {+0, +0, +0, -300}\n    };\n\n    public MarioStateMachine() {\n        this.score = 0;\n        this.currentState = State.SMALL;\n    }\n\n    public void obtainMushRoom() {\n        executeEvent(Event.GOT_MUSHROOM);\n    }\n\n    public void obtainCape() {\n        executeEvent(Event.GOT_CAPE);\n    }\n\n    public void obtainFireFlow() {\n        executeEvent(Event.GOT_FIRE);\n    }\n\n    public void meetMonster() {\n        executeEvent(Event.MET_MONSTER);\n    }\n\n    private void executeEvent(Event event) {\n        int stateValue = this.currentState.getValue();\n        int eventValue = event.getValue();\n        this.currentState = transitionTable[stateValue][eventValue];\n        this.score += actionTable[stateValue][eventValue];\n    }\n\n    public int getScore() {\n        return score;\n    }\n\n    public State getCurrentState() {\n        return currentState;\n    }\n}\n```\n\n相对于分支逻辑的实现方式，查表法的代码实现更加清晰，可读性和可维护性更好。当修改状态机时，我们只需要修改 transitionTable 和 actionTable 两个二维数组即可。实际上，如果我们把这两个二维数组存储在配置文件中，当需要修改状态机时，我们甚至可以不修改任何代码，只需要修改配置文件就可以了。\n\n**查表法局限性**：\n\n这个例子中，状态经过事件后，执行的动作只是得分的加减，如果动作比较复杂，例如，数据库入库，发送邮件，调用不同接口等等，就没法用简单的二维数组来表示了。\n\n##### 方式3\n\n**状态模式**\n\n状态模式通过将事件触发的状态转移和动作执行，拆分到不同的状态类中，来避免分支判断逻辑。\n\n定义一个状态接口，接口就是状态，接口中的每个方法就是一种事件。\n\n```java\npublic interface IMario {\n    State getName();\n\n    void obtainMushRoom(MarioStateMachine stateMachine);\n\n    void obtainCape(MarioStateMachine stateMachine);\n\n    void obtainFireFlow(MarioStateMachine stateMachine);\n\n    void meetMonster(MarioStateMachine stateMachine);\n}\n```\n\n每个状态接口的实现类就是具体的状态类（小马里奥类、超级马里奥类等）。\n\n因为状态类中不包含任何成员变量，所以我们考虑把状态类设计成单例的。\n\n```java\npublic class SmallMario implements IMario {\n    private static final SmallMario instance = new SmallMario();\n    private SmallMario() {}\n    public static SmallMario getInstance() {\n        return instance;\n    }\n\n    @Override\n    public State getName() {\n        return State.SMALL;\n    }\n\n    @Override\n    public void obtainMushRoom(MarioStateMachine stateMachine) {\n        stateMachine.setCurrentState(SuperMario.getInstance());\n        stateMachine.setScore(stateMachine.getScore() + 100);\n    }\n\n    @Override\n    public void obtainCape(MarioStateMachine stateMachine) {\n        // ...\n    }\n\n    @Override\n    public void obtainFireFlow(MarioStateMachine stateMachine) {\n\n    }\n\n    @Override\n    public void meetMonster(MarioStateMachine stateMachine) {\n\n    }\n}\n\npublic class SuperMario implements IMario {\n    private static final SuperMario instance = new SuperMario();\n    private SuperMario() {}\n\n    public static SuperMario getInstance() {\n        return instance;\n    }\n\n\n    @Override\n    public State getName() {\n        return State.SUPER;\n    }\n\n    @Override\n    public void obtainMushRoom(MarioStateMachine stateMachine) {\n        // ...\n    }\n\n    @Override\n    public void obtainCape(MarioStateMachine stateMachine) {\n        // ...\n    }\n\n    @Override\n    public void obtainFireFlow(MarioStateMachine stateMachine) {\n        // ...\n    }\n\n    @Override\n    public void meetMonster(MarioStateMachine stateMachine) {\n        //...\n    }\n}\n```\n\n状态机\n\n```java\npublic class MarioStateMachine {\n    private int score;\n    // 用接口表示状态\n    private IMario currentState;\n\n    public MarioStateMachine() {\n        this.score = 0;\n        this.currentState = SmallMario.getInstance();\n    }\n\n    public void setCurrentState(IMario currentState) {\n        this.currentState = currentState;\n    }\n\n    public void obtainMushRoom() {\n        this.currentState.obtainMushRoom(this);\n    }\n\n    public void obtainCape() {\n        this.currentState.obtainCape(this);\n    }\n\n    public void obtainFireFlow() {\n        this.currentState.obtainFireFlow(this);\n    }\n\n    public void meetMonster() {\n        this.currentState.meetMonster(this);\n    }\n\n    public int getScore() {\n        return score;\n    }\n\n    public void setScore(int score) {\n        this.score = score;\n    }\n\n    public IMario getCurrentState() {\n        return currentState;\n    }\n}\n```\n\n使用方式\n\n```java\npublic class ApplicationDemo {\n\n    public static void main(String[] args) {\n        MarioStateMachine mario = new MarioStateMachine();\n        mario.obtainMushRoom();\n        int score = mario.getScore();\n        State state = mario.getCurrentState().getName();\n        System.out.println(\"mario score：\" + score + \"; state: \" + state);\n    }\n}\n```\n\n状态模式中，每个具体的状态类只需要关心自己遇到不同事件后流转到的下一个状态以及得分值的增减。\n\n实际上，像游戏这种比较复杂的状态机，包含的状态比较多，优先推荐使用查表法，而状态模式会引入非常多的状态类，会导致代码比较难维护。相反，像电商下单、外卖下单这种类型的状态机，它们的状态并不多，状态转移也比较简单，但事件触发执行的动作包含的业务逻辑可能会比较复杂，所以，更加推荐使用状态模式来实现。\n\n---\n\n\n### 迭代器模式\n\n#### 定义\n\n迭代器模式又叫游标模式，是用来遍历容器的；\n\n一个完整的迭代器模式一般会涉及**容器**和**容器迭代器**两部分。为了达到基于接口而非实现编程的目的，容器又包含容器接口、容器实现类，迭代器又包含迭代器接口、迭代器实现类。\n\n<img src=\"https://tva1.sinaimg.cn/large/008i3skNgy1gwh9i7svhpj312s0isgms.jpg\" alt=\"image-20201028202346968\"  />\n\n假设某个新的编程语言的基础类库中，还没有提供线性容器对应的迭代器，需要我们从零开始开发。\n\n#### 代码实现\n\n##### 简单版\n\n```java\npublic interface Iterator<E> {\n    boolean hasNext();\n    void next();\n    E currentItem();\n}\n\npublic class ArrayIterator<E> implements Iterator {\n    // 游标\n    private int curstor;\n    private ArrayList<E> arrayList;\n\n    public ArrayIterator(ArrayList<E> arrayList) {\n        this.curstor = 0;\n        this.arrayList = arrayList;\n    }\n\n    @Override\n    public boolean hasNext() {\n        return curstor != arrayList.size();\n    }\n\n    @Override\n    public void next() {\n        curstor++;\n    }\n\n    @Override\n    public E currentItem() {\n        if (curstor >= arrayList.size()) {\n            throw new NoSuchElementException();\n        }\n        return arrayList.get(curstor);\n    }\n}\n\npublic class Demo {\n    public static void main(String[] args) {\n        ArrayList<String> name = new ArrayList<String>();\n        name.add(\"张三\");\n        name.add(\"李四\");\n        name.add(\"王五\");\n        Iterator<String> iterator = new ArrayIterator<String>(name);\n        while (iterator.hasNext()) {\n            System.out.println(iterator.currentItem());\n            iterator.next();\n        }\n    }\n}\n```\n\n##### 优化\n\n在上面的代码实现中，我们需要将待遍历的容器对象，通过构造函数传递给迭代器类。为了封装迭代器的创建细节，我们可以在容器中定义iterator()方法创建迭代器；为实现基于接口编程，我们在List接口中定义这个方法。\n\n```java\npublic interface List<E> {\n  Iterator iterator();\n  //...省略其他接口函数...\n}\n\npublic class ArrayList<E> implements List<E> {\n  //...\n  public Iterator iterator() {\n    return new ArrayIterator(this);\n  }\n  //...省略其他代码\n}\n\npublic class Demo {\n  public static void main(String[] args) {\n    List<String> names = new ArrayList<>();\n    names.add(\"aa\");\n    names.add(\"bb\");\n    names.add(\"cc\");\n    \n    Iterator<String> iterator = names.iterator();\n    while (iterator.hasNext()) {\n      System.out.println(iterator.currentItem());\n      iterator.next();\n    }\n  }\n}\n```\n\n迭代器的实现思路总结：迭代器中需要定义 hasNext()、currentItem()、next() 三个最基本的方法。待遍历的容器对象通过依赖注入传递到迭代器类中。容器通过 iterator() 方法来创建迭代器。\n\n<img src=\"https://tva1.sinaimg.cn/large/008i3skNgy1gwh9io7x0ij315k0o0gnc.jpg\" alt=\"image-20201117205945886\"  />\n\n#### 迭代器模式的优势\n\n```java\nList<String> names = new ArrayList<>();\nnames.add(\"xzg\");\nnames.add(\"wang\");\nnames.add(\"zheng\");\n\n// 第一种遍历方式：for循环\nfor (int i = 0; i < names.size(); i++) {\n  System.out.print(names.get(i) + \",\");\n}\n\n// 第二种遍历方式：foreach循环\nfor (String name : names) {\n  System.out.print(name + \",\")\n}\n\n// 第三种遍历方式：迭代器遍历\nIterator<String> iterator = names.iterator();\nwhile (iterator.hasNext()) {\n  System.out.print(iterator.next() + \",\");//Java中的迭代器接口，next()既移动游标又返回数据\n}\n```\n\n对遍历方式比较简单的线性数据结构，直接使用 for 循环来遍历就足够了。但是，对于复杂的数据结构（比如树、图）来说，有各种复杂的遍历方式。比如，树有前中后序、按层遍历，图有深度优先、广度优先遍历等等。如果由客户端代码来实现这些遍历算法，势必增加开发成本，而且容易写错。如果将这部分遍历的逻辑写到容器类中，也会导致容器类代码的复杂性；\n\n将游标指向的当前位置等信息，存储在迭代器类中，每个迭代器独享游标信息。这样，我们就可以创建多个不同的迭代器，同时对同一个容器进行遍历而互不影响；\n\n容器和迭代器都提供了抽象的接口，方便我们在开发的时候，基于接口而非具体的实现编程。当需要切换新的遍历算法的时候，比如，从前往后遍历链表切换成从后往前遍历链表，客户端代码只需要将迭代器类从 LinkedIterator 切换为 ReversedLinkedIterator 即可，其他代码都不需要修改。除此之外，添加新的遍历算法，我们只需要扩展新的迭代器类，也更符合开闭原则。\n\n#### 遍历的同时增删元素\n\n**删除元素**\n\n```java\npublic class RemoveDemo {\n\n    public static void main(String[] args) {\n        ArrayList<String> names = new ArrayList<>();\n        names.add(\"a\");\n        names.add(\"b\");\n        names.add(\"c\");\n        names.add(\"d\");\n\n        Iterator<String> iterator = new ArrayIterator<String>(names);\n\n        // 游标指向b时，移除a\n        iterator.next();\n        names.remove(\"a\");\n    }\n}\n```\n\n<img src=\"https://tva1.sinaimg.cn/large/0081Kckwly1gl1gk4i1d1j30pi0mw0ux.jpg\" alt=\"image-20201125153805528\"  />\n\n在遍历过程删除元素，结果是不可预期的，有时候有问题，有时候没问题，要视删除元素的位置而定。\n\n**增加元素**\n\n```java\npublic class AddDemo {\n\n    public static void main(String[] args) {\n        ArrayList<String> names = new ArrayList<>();\n        names.add(\"a\");\n        names.add(\"b\");\n        names.add(\"c\");\n        names.add(\"d\");\n\n        Iterator<String> iterator = new ArrayIterator<String>(names);\n\n        // 游标指向b时，将x插入下标为0的位置\n        iterator.next();\n        names.add(0, \"x\");\n      \n}\n```\n\n<img src=\"https://tva1.sinaimg.cn/large/0081Kckwly1gl1gwvvbw6j30pg0jw40l.jpg\" alt=\"image-20201125155021826\"  />\n\n跟删除情况类似，如果我们在游标的后面添加元素，就不会存在任何问题。所以，在遍历的同时添加集合元素也是一种不可预期行为。\n\n**如何应对遍历时改变集合导致的不可预期行为**\n\n迭代器要在遍历的元素的时候判断集合是否有增删改数据，如果有就报错。\n\n#### JDK ArrayList中的迭代器\n\n```java\npublic class ArrayList<E> extends AbstractList<E>\n        implements List<E>, RandomAccess, Cloneable, java.io.Serializable \n{\n\tpublic Iterator<E> iterator() {\n    \treturn new Itr();\n\t}\n\n    /**\n     * An optimized version of AbstractList.Itr\n     */\n    private class Itr implements Iterator<E> {\n        int cursor;       // index of next element to return\n        int lastRet = -1; // index of last element returned; -1 if no such\n        int expectedModCount = modCount;\n\n        public boolean hasNext() {\n            return cursor != size;\n        }\n\n        @SuppressWarnings(\"unchecked\")\n        public E next() {\n            checkForComodification();\n            int i = cursor;\n            if (i >= size)\n                throw new NoSuchElementException();\n            Object[] elementData = ArrayList.this.elementData;\n            if (i >= elementData.length)\n                throw new ConcurrentModificationException();\n            cursor = i + 1;\n            return (E) elementData[lastRet = i];\n        }\n\n        public void remove() {\n            if (lastRet < 0)\n                throw new IllegalStateException();\n            checkForComodification();\n\n            try {\n                ArrayList.this.remove(lastRet);\n                cursor = lastRet;\n                lastRet = -1;\n                expectedModCount = modCount;\n            } catch (IndexOutOfBoundsException ex) {\n                throw new ConcurrentModificationException();\n            }\n        }\n\n        final void checkForComodification() {\n            if (modCount != expectedModCount)\n                throw new ConcurrentModificationException();\n        }\n    }    \n}\n```\n\n---\n\n### 访问者模式\n\n#### 寻源\n\n假设我们从网站上爬取了很多资源文件，它们的格式有三种：PDF、PPT、Word。我们现在要开发一个工具来处理这批资源文件。这个工具的其中一个功能是，把这些资源文件中的文本内容抽取出来放到 txt 文件中。\n\n##### 实现1\n\nResourceFile 是一个抽象类，包含一个抽象函数 extract2txt()。PdfFile、PPTFile、WordFile 都继承 ResourceFile 类，并且重写了 extract2txt() 函数。在 ToolApplication 中，我们可以利用多态特性，根据对象的实际类型，来决定执行哪个方法。\n\n```java\npublic abstract class ResourceFile {\n  protected String filePath;\n\n  public ResourceFile(String filePath) {\n    this.filePath = filePath;\n  }\n\n  public abstract void extract2txt();\n}\n\npublic class PPTFile extends ResourceFile {\n  public PPTFile(String filePath) {\n    super(filePath);\n  }\n\n  @Override\n  public void extract2txt() {\n    //...省略一大坨从PPT中抽取文本的代码...\n    //...将抽取出来的文本保存在跟filePath同名的.txt文件中...\n    System.out.println(\"Extract PPT.\");\n  }\n}\n\npublic class PdfFile extends ResourceFile {\n  public PdfFile(String filePath) {\n    super(filePath);\n  }\n\n  @Override\n  public void extract2txt() {\n    //...\n    System.out.println(\"Extract PDF.\");\n  }\n}\n\npublic class WordFile extends ResourceFile {\n  public WordFile(String filePath) {\n    super(filePath);\n  }\n\n  @Override\n  public void extract2txt() {\n    //...\n    System.out.println(\"Extract WORD.\");\n  }\n}\n\n// 运行结果是：\n// Extract PDF.\n// Extract WORD.\n// Extract PPT.\npublic class ToolApplication {\n  public static void main(String[] args) {\n    List<ResourceFile> resourceFiles = listAllResourceFiles(args[0]);\n    for (ResourceFile resourceFile : resourceFiles) {\n      resourceFile.extract2txt();\n    }\n  }\n\n  private static List<ResourceFile> listAllResourceFiles(String resourceDirectory) {\n    List<ResourceFile> resourceFiles = new ArrayList<>();\n    //...根据后缀(pdf/ppt/word)由工厂方法创建不同的类对象(PdfFile/PPTFile/WordFile)\n    resourceFiles.add(new PdfFile(\"a.pdf\"));\n    resourceFiles.add(new WordFile(\"b.word\"));\n    resourceFiles.add(new PPTFile(\"c.ppt\"));\n    return resourceFiles;\n  }\n}\n```\n\n如果工具的功能不停地扩展，不仅要能抽取文本内容，还要支持压缩、提取文件元信息（文件名、大小、更新时间等等）构建索引等一系列的功能，那如果我们继续按照上面的实现思路，就会存在这样几个问题：\n\n违背开闭原则，添加一个新的功能，所有类的代码都要修改；\n\n虽然功能增多，每个类的代码都不断膨胀，可读性和可维护性都变差了；\n\n把所有比较上层的业务逻辑都耦合到 PdfFile、PPTFile、WordFile 类中，导致这些类的职责不够单一，变成了大杂烩。\n\n**把业务操作和具体数据解耦，设计成独立的类。**\n\n##### 实现2\n\n```java\npublic abstract class ResourceFile {\n  protected String filePath;\n  public ResourceFile(String filePath) {\n    this.filePath = filePath;\n  }\n}\n\npublic class PdfFile extends ResourceFile {\n  public PdfFile(String filePath) {\n    super(filePath);\n  }\n  //...\n}\n//...PPTFile、WordFile代码省略...\npublic class Extractor {\n  public void extract2txt(PPTFile pptFile) {\n    //...\n    System.out.println(\"Extract PPT.\");\n  }\n\n  public void extract2txt(PdfFile pdfFile) {\n    //...\n    System.out.println(\"Extract PDF.\");\n  }\n\n  public void extract2txt(WordFile wordFile) {\n    //...\n    System.out.println(\"Extract WORD.\");\n  }\n}\n\npublic class ToolApplication {\n  public static void main(String[] args) {\n    Extractor extractor = new Extractor();\n    List<ResourceFile> resourceFiles = listAllResourceFiles(args[0]);\n    for (ResourceFile resourceFile : resourceFiles) {\n      extractor.extract2txt(resourceFile);\n    }\n  }\n\n  private static List<ResourceFile> listAllResourceFiles(String resourceDirectory) {\n    List<ResourceFile> resourceFiles = new ArrayList<>();\n    //...根据后缀(pdf/ppt/word)由工厂方法创建不同的类对象(PdfFile/PPTFile/WordFile)\n    resourceFiles.add(new PdfFile(\"a.pdf\"));\n    resourceFiles.add(new WordFile(\"b.word\"));\n    resourceFiles.add(new PPTFile(\"c.ppt\"));\n    return resourceFiles;\n  }\n}\n```\n\n上面的代码用到了方法重载，但是实际上是没法编译通过的，因为重载是静态绑定，我们传入ResourceFile类型的变量，但是找不到对应变量类型的方法。\n\n##### 实现3\n\n```java\npublic abstract class ResourceFile {\n  protected String filePath;\n  public ResourceFile(String filePath) {\n    this.filePath = filePath;\n  }\n  abstract public void accept(Extractor extractor);\n}\n\npublic class PdfFile extends ResourceFile {\n  public PdfFile(String filePath) {\n    super(filePath);\n  }\n\n  @Override\n  public void accept(Extractor extractor) {\n    extractor.extract2txt(this);\n  }\n\n  //...\n}\n\n//...PPTFile、WordFile跟PdfFile类似，这里就省略了...\n//...Extractor代码不变...\n\npublic class ToolApplication {\n  public static void main(String[] args) {\n    Extractor extractor = new Extractor();\n    List<ResourceFile> resourceFiles = listAllResourceFiles(args[0]);\n    for (ResourceFile resourceFile : resourceFiles) {\n      resourceFile.accept(extractor);\n    }\n  }\n\n  private static List<ResourceFile> listAllResourceFiles(String resourceDirectory) {\n    List<ResourceFile> resourceFiles = new ArrayList<>();\n    //...根据后缀(pdf/ppt/word)由工厂方法创建不同的类对象(PdfFile/PPTFile/WordFile)\n    resourceFiles.add(new PdfFile(\"a.pdf\"));\n    resourceFiles.add(new WordFile(\"b.word\"));\n    resourceFiles.add(new PPTFile(\"c.ppt\"));\n    return resourceFiles;\n  }\n}\n```\n\n现在，如果要继续添加新的功能，比如前面提到的压缩功能，根据不同的文件类型，使用不同的压缩算法来压缩资源文件，那我们该如何实现呢？我们需要实现一个类似 Extractor 类的新类 Compressor 类，在其中定义三个重载函数，实现对不同类型资源文件的压缩。除此之外，我们还要在每个资源文件类中定义新的 accept 重载函数。具体的代码如下所示：\n\n##### 实现4\n\n```java\npublic abstract class ResourceFile {\n  protected String filePath;\n  public ResourceFile(String filePath) {\n    this.filePath = filePath;\n  }\n  abstract public void accept(Extractor extractor);\n  abstract public void accept(Compressor compressor);\n}\n\npublic class PdfFile extends ResourceFile {\n  public PdfFile(String filePath) {\n    super(filePath);\n  }\n\n  @Override\n  public void accept(Extractor extractor) {\n    extractor.extract2txt(this);\n  }\n\n  @Override\n  public void accept(Compressor compressor) {\n    compressor.compress(this);\n  }\n\n  //...\n}\n\n//...PPTFile、WordFile跟PdfFile类似，这里就省略了...\n//...Extractor代码不变\n\npublic class ToolApplication {\n  public static void main(String[] args) {\n    Extractor extractor = new Extractor();\n    List<ResourceFile> resourceFiles = listAllResourceFiles(args[0]);\n    for (ResourceFile resourceFile : resourceFiles) {\n      resourceFile.accept(extractor);\n    }\n\n    Compressor compressor = new Compressor();\n    for(ResourceFile resourceFile : resourceFiles) {\n      resourceFile.accept(compressor);\n    }\n  }\n\n  private static List<ResourceFile> listAllResourceFiles(String resourceDirectory) {\n    List<ResourceFile> resourceFiles = new ArrayList<>();\n    //...根据后缀(pdf/ppt/word)由工厂方法创建不同的类对象(PdfFile/PPTFile/WordFile)\n    resourceFiles.add(new PdfFile(\"a.pdf\"));\n    resourceFiles.add(new WordFile(\"b.word\"));\n    resourceFiles.add(new PPTFile(\"c.ppt\"));\n    return resourceFiles;\n  }\n}\n```\n\n上面代码还存在一些问题，添加一个新的业务，还是需要修改每个资源文件类，违反了开闭原则。\n\n针对这个问题，我们抽象出来一个 Visitor 接口，包含是三个命名非常通用的 visit() 重载函数，分别处理三种不同类型的资源文件。具体做什么业务处理，由实现这个 Visitor 接口的具体的类来决定，比如 Extractor 负责抽取文本内容，Compressor 负责压缩。当我们新添加一个业务功能的时候，资源文件类不需要做任何修改，只需要修改 ToolApplication 的代码就可以了。\n\n##### 实现5\n\n```java\npublic abstract class ResourceFile {\n  protected String filePath;\n  public ResourceFile(String filePath) {\n    this.filePath = filePath;\n  }\n  abstract public void accept(Visitor vistor);\n}\n\npublic class PdfFile extends ResourceFile {\n  public PdfFile(String filePath) {\n    super(filePath);\n  }\n\n  @Override\n  public void accept(Visitor visitor) {\n    visitor.visit(this);\n  }\n\n  //...\n}\n//...PPTFile、WordFile跟PdfFile类似，这里就省略了...\n\npublic interface Visitor {\n  void visit(PdfFile pdfFile);\n  void visit(PPTFile pdfFile);\n  void visit(WordFile pdfFile);\n}\n\npublic class Extractor implements Visitor {\n  @Override\n  public void visit(PPTFile pptFile) {\n    //...\n    System.out.println(\"Extract PPT.\");\n  }\n\n  @Override\n  public void visit(PdfFile pdfFile) {\n    //...\n    System.out.println(\"Extract PDF.\");\n  }\n\n  @Override\n  public void visit(WordFile wordFile) {\n    //...\n    System.out.println(\"Extract WORD.\");\n  }\n}\n\npublic class Compressor implements Visitor {\n  @Override\n  public void visit(PPTFile pptFile) {\n    //...\n    System.out.println(\"Compress PPT.\");\n  }\n\n  @Override\n  public void visit(PdfFile pdfFile) {\n    //...\n    System.out.println(\"Compress PDF.\");\n  }\n\n  @Override\n  public void visit(WordFile wordFile) {\n    //...\n    System.out.println(\"Compress WORD.\");\n  }\n\n}\n\npublic class ToolApplication {\n  public static void main(String[] args) {\n    List<ResourceFile> resourceFiles = listAllResourceFiles(args[0]);\n      \n    Extractor extractor = new Extractor();\n    for (ResourceFile resourceFile : resourceFiles) {\n      resourceFile.accept(extractor);\n    }\n\n    Compressor compressor = new Compressor();\n    for(ResourceFile resourceFile : resourceFiles) {\n      resourceFile.accept(compressor);\n    }\n  }\n\n  private static List<ResourceFile> listAllResourceFiles(String resourceDirectory) {\n    List<ResourceFile> resourceFiles = new ArrayList<>();\n    //...根据后缀(pdf/ppt/word)由工厂方法创建不同的类对象(PdfFile/PPTFile/WordFile)\n    resourceFiles.add(new PdfFile(\"a.pdf\"));\n    resourceFiles.add(new WordFile(\"b.word\"));\n    resourceFiles.add(new PPTFile(\"c.ppt\"));\n    return resourceFiles;\n  }\n}\n```\n\n#### 回首\n\n##### 定义\n\n允许一个或者多个操作应用到一组对象上，解耦操作和对象本身。\n\n![image-20201125174436993](https://tva1.sinaimg.cn/large/0081Kckwly1gl1k7t8oj9j31xq0u07i1.jpg)\n\n##### 应用场景\n\n访问者模式针对的是一组类型不同的对象（PdfFile、PPTFile、WordFile）。不过，尽管这组对象的类型是不同的，但是，它们继承相同的父类（ResourceFile）或者实现相同的接口。在不同的应用场景下，\b我们需要对这组对象进行一系列不相关的业务操作（抽取文本、压缩等），但为了避免不断添加功能导致类（PdfFile、PPTFile、WordFile）不断膨胀，职责越来越不单一，以及避免频繁地添加功能导致的频繁代码修改，我们使用访问者模式，将对象与操作解耦，将这些业务操作抽离出来，定义在独立细分的访问者类（Extractor、Compressor）中。\n\n#### 替代方式\n\n我们还可以利用工厂模式来实现，定义一个包含 extract2txt() 接口函数的 Extractor 接口。PdfExtractor、PPTExtractor、WordExtractor 类实现 Extractor 接口，并且在各自的 extract2txt() 函数中，分别实现 Pdf、PPT、Word 格式文件的文本内容抽取。ExtractorFactory 工厂类根据不同的文件类型，返回不同的 Extractor。\n\n```java\npublic abstract class ResourceFile {\n  protected String filePath;\n  public ResourceFile(String filePath) {\n    this.filePath = filePath;\n  }\n  public abstract ResourceFileType getType();\n}\n\npublic class PdfFile extends ResourceFile {\n  public PdfFile(String filePath) {\n    super(filePath);\n  }\n\n  @Override\n  public ResourceFileType getType() {\n    return ResourceFileType.PDF;\n  }\n\n  //...\n}\n\n//...PPTFile/WordFile跟PdfFile代码结构类似，此处省略...\n\npublic interface Extractor {\n  void extract2txt(ResourceFile resourceFile);\n}\n\npublic class PdfExtractor implements Extractor {\n  @Override\n  public void extract2txt(ResourceFile resourceFile) {\n    //...\n  }\n}\n\n//...PPTExtractor/WordExtractor跟PdfExtractor代码结构类似，此处省略...\n\npublic class ExtractorFactory {\n  private static final Map<ResourceFileType, Extractor> extractors = new HashMap<>();\n  static {\n    extractors.put(ResourceFileType.PDF, new PdfExtractor());\n    extractors.put(ResourceFileType.PPT, new PPTExtractor());\n    extractors.put(ResourceFileType.WORD, new WordExtractor());\n  }\n\n  public static Extractor getExtractor(ResourceFileType type) {\n    return extractors.get(type);\n  }\n}\n\npublic class ToolApplication {\n  public static void main(String[] args) {\n    List<ResourceFile> resourceFiles = listAllResourceFiles(args[0]);\n    for (ResourceFile resourceFile : resourceFiles) {\n      Extractor extractor = ExtractorFactory.getExtractor(resourceFile.getType());\n      extractor.extract2txt(resourceFile);\n    }\n  }\n\n  private static List<ResourceFile> listAllResourceFiles(String resourceDirectory) {\n    List<ResourceFile> resourceFiles = new ArrayList<>();\n    //...根据后缀(pdf/ppt/word)由工厂方法创建不同的类对象(PdfFile/PPTFile/WordFile)\n    resourceFiles.add(new PdfFile(\"a.pdf\"));\n    resourceFiles.add(new WordFile(\"b.word\"));\n    resourceFiles.add(new PPTFile(\"c.ppt\"));\n    return resourceFiles;\n  }\n}\n```\n\n对于资源文件处理工具这个例子，如果工具提供的功能并不是非常多，只有几个而已，更推荐使用工厂模式的实现方式，毕竟代码更加清晰、易懂。\n\n相反，如果工具提供非常多的功能，比如有十几个，更推荐使用访问者模式，因为访问者模式需要定义的类要比工厂模式的实现方式少很多，类太多也会影响到代码的可维护性。\n\n\n\n### 参考\n\n[设计模式之美-王争](https://time.geekbang.org/column/intro/100039001)","source":"_posts/行为型设计模式.md","raw":"---\ntitle: 行为型设计模式.md\ndate: 2021-11-23 22:43:16\ntags:\ncategories:\n- 设计模式\n---\n\n### 观察者模式\n\n#### 定义\n\n又称为发布订阅模式。在对象之间定义一个一对多的依赖，当一个对象状态改变的时候，所有依赖的对象都会自动收到通知。\n\n被依赖的对象叫做被观察者（Observable），依赖的对象叫做观察者（Observer）。\n\n#### 作用\n\n不同行为之间（观察者和被观察者）进行解耦，对扩展开放，对修改关闭。\n\n#### 实现1\n\n**一个p2p投资理财系统，用户注册成功之后，我们给用户发放投资体验金。**\n\n使用普通的方法调用：用户注册Service，发放体验金Service，在Controller中依次调用这两个方法。\n\n```java\npublic class UserController {\n    private UserService userService;\n    private PromotionService promotionService;\n\n    public Long register(String telephone, String password) {\n        // ...参数校验\n\n        // 注册\n        long userId = userService.register(telephone, password);\n        // 发放投资体验金\n        promotionService.issueNewUserExperienceCash(userId);\n        return userId;\n    }\n\n}\n```\n\n注册接口做了两件事：注册和发放投资体验金，如果需求改动频繁，注册成功后改为发放优惠券，发短信提醒等等，这段代码就违背了开闭原则，后续如果需要在注册只会增加其他功能，比如：给用户发送新人红包，发送注册成功短信等。下面使用观察者模式进行重构。\n\n#### 实现2\n\n使用观察者模式实现。\n\n- 定义一个观察者接口\n\n```java\npublic interface RegObserver {\n    void handleRegSuccess(long userId);\n}\n```\n\n- 具体需要做哪些事定义为接口的实现类\n\n```java\npublic class RegPromotionObserver implements RegObserver {\n    private PromotionService promotionService;\n\n    @Override\n    public void handleRegSuccess(long userId) {\n        // 发放投资体验金\n        promotionService.issueNewUserExperienceCash(userId);\n    }\n}\n```\n\n```java\npublic class RegNoitificationObserver implements RegObserver {\n    private NotificationService notificationService;\n\n    @Override\n    public void handleRegSuccess(long userId) {\n        // 发送欢迎短信\n        notificationService.sendInboxMessage(userId, \"Welcome...\");\n    }\n}\n```\n\n```java\npublic class UserController {\n    private UserService userService;\n    private List<RegObserver> regObservers = new ArrayList<>();\n\n    // 一次设置好，之后不会再动态更改\n    public void setRegObserves(List<RegObserver> observes) {\n        regObservers.addAll(observes);\n    }\n\n    public Long register(String telephone, String password) {\n        // ...参数校验\n\n        // 注册\n        long userId = userService.register(telephone, password);\n\n        // 通知观察者\n        for (RegObserver regObserver : regObservers) {\n            regObserver.handleRegSuccess(userId);\n        }\n\n        return userId;\n    }\n}\n```\n\n使用这种方式实现，对于注册之后的行为，注册方法不需要去关注。\n\n这种方式使用了同步阻塞的方式，依然有缺陷，观察者代码会被阻塞执行，观察者代码的执行结果会影响注册逻辑的成功执行。\n\n#### 实现3\n\n异步非阻塞方式实现。\n\n- 线程池\n  \n  这种方式将线程池和异步执行逻辑耦合在注册代码中，提高了维护成本；并且如果需求在同步和异步之间来回切换，就需要频繁改动注册代码。\n  \n- Guava EventBus\n\n  ```java\n  public class UserController {\n      private UserService userService = new UserService();\n  \n      private EventBus eventBus;\n      private static final int DEFAULT_EVENTBUS_THREAD_POOL_SIZE = 20;\n  \n      public UserController() {\n          // this.eventBus = new EventBus(); 同步阻塞模式\n          this.eventBus = new AsyncEventBus(Executors.newFixedThreadPool(DEFAULT_EVENTBUS_THREAD_POOL_SIZE));\n      }\n  \n      // 一次设置好，之后不会再动态更改\n      public void setRegObserves(List<Object> observes) {\n          for (Object obj : observes) {\n              eventBus.register(obj);\n          }\n      }\n  \n      public Long register(String telephone, String password) {\n          // ...参数校验\n  \n          // 注册\n          long userId = userService.register(telephone, password);\n  \n          // 通知观察者\n          eventBus.post(userId);\n  \n          return userId;\n      }\n  }\n  \n  public class RegNoitificationObserver{\n      private NotificationService notificationService = new NotificationService() {\n          @Override\n          public void sendInboxMessage(long userId, String message) {\n              // ...\n              System.out.println(userId + \", \" + message);\n          }\n      };\n  \n      @Subscribe\n      public void handleRegSuccess(Long userId) {\n          notificationService.sendInboxMessage(userId, \"Welcome...\");\n      }\n  }\n  \n  public class RegPromotionObserver{\n      private PromotionService promotionService = new PromotionService() {\n          @Override\n          public void issueNewUserExperienceCash(long userId) {\n              System.out.println(userId + \", Promotion is done\");\n          }\n      };\n  \n      @Subscribe\n      public void handleRegSuccess(Long userId) {\n          promotionService.issueNewUserExperienceCash(userId);\n      }\n      \n      //    @Subscribe\n  //    public void handleRegSuccess2(Integer userId) {\n  //        System.out.println(\"hello pro\");\n  //    }\n  }\n  ```\n  \n  使用这种方式不需要定义Observer接口，只需要通过@Subscribe表明哪个方法可以接收被观察者发送的消息即可，如果注册之后不再需要发放体验金，去掉该注解即可。\n  \n  但需要注意，观察者的入参需要是eventBus.register(obj)中obj对象及父类的包装类。\n\n#### 实现4\n\nSpring也提供了针对观察者模式的扩展。\n\n#### 实现5\n\n通过消息队列实现。\n\n这种方式更有利于观察者和被观察者的解耦，但是额外引入了中间件，增加了系统的复杂性；一般分布式系统中不同项目间的通信使用这种方式。\n\n---\n\n### 模板模式\n\n#### 定义\n\n模板模式在一个方法中定义一个算法骨架，并将某些步骤推迟到子类中实现。模板模式可以让子类在不改变算法整体结构的情况下，重新定义算法中的某些步骤。\n\n#### 作用\n\n代码的复用和扩展。\n\n#### 实现\n\n通过抽象类中定义算法骨架，具体实现中对某些步骤进行实现。\n\n模板方法定义为final，可以避免被子类重写；需要重写的方法定义为abstract，可以强迫子类去实现。\n\n```java\npublic abstract class AbstarctClass {\n\n    public final void templateMethod() {\n        // ...\n        \n        method1();\n        //...\n        method2();\n        //...\n    }\n\n    protected abstract void method2();\n\n    protected abstract void method1();\n\n}\n\npublic class ConcreteClass1 extends AbstarctClass {\n\n    @Override\n    protected void method2() {\n\n    }\n\n    @Override\n    protected void method1() {\n\n    }\n}\n\npublic class ConcreteClass2 extends AbstarctClass {\n\n    @Override\n    protected void method2() {\n        \n    }\n\n    @Override\n    protected void method1() {\n\n    }\n}\n\npublic class Demo {\n\n    public static void main(String[] args) {\n        AbstarctClass demo = new ConcreteClass1();\n        demo.templateMethod();\n    }\n}\n```\n\n#### JDK中的实现\n\n##### 集合\n\n在AbstractList中，addAll()方法提供了算法骨架，add()方法需要子类实现，虽然没有声明为abstract，但是如果子类不实现就直接抛出异常。\n\n```java\npublic boolean addAll(int index, Collection<? extends E> c) {\n    rangeCheckForAdd(index);\n    boolean modified = false;\n    for (E e : c) {\n        add(index++, e);\n        modified = true;\n    }\n    return modified;\n}\n\npublic void add(int index, E element) {\n    throw new UnsupportedOperationException();\n}\n```\n\n##### 排序\n\n模板模式提供了框架的扩展点，让框架使用者，在不修改框架源码的情况下，基于扩展点定制化框架的功能。Java 中的 Collections 类的 sort() 函数也利用了模板模式的这个扩展特性。\n\nCollections.sort() 实现了对集合的排序。为了扩展性，它将其中“比较大小”这部分逻辑，委派给用户来实现。如果我们把比较大小这部分逻辑看作整个排序逻辑的其中一个步骤，那我们就可以把它看作模板模式。不过，从代码实现的角度来看，并不是模板模式的经典代码实现，而是基于 Callback 回调机制来实现的。\n\nA 类（Demo）事先注册某个函数 F（Comparator的具体实现） 到 B 类（Collections），A 类在调用 B 类的 P 函数（sort）的时候，B 类反过来调用 A 类注册给它的 F 函数。回调也具有复用和扩展的功能。\n\n```java\npublic static <T> void sort(List<T> list, Comparator<? super T> c) {\n    list.sort(c);\n}\n\n// 使用\npublic class Demo {\n    public static void main(String[] args) {\n        List<Student> students = new ArrayList<>();\n        students.add(new Student(\"Alice\", 19, 89.0f));\n        students.add(new Student(\"Peter\", 20, 78.0f));\n        students.add(new Student(\"Leo\", 18, 99.0f));\n\n        Collections.sort(students, new AgeAscComparator());\n        print(students);\n\n        System.out.println(\"-----------------------------------\");\n\n        Collections.sort(students, new NameAscComparator());\n        print(students);\n\n        System.out.println(\"-----------------------------------\");\n\n        Collections.sort(students, new ScoreDescComparator());\n        print(students);\n    }\n\n    public static void print(List<Student> students) {\n        for (Student s : students) {\n            System.out.println(s.getName() + \" \" + s.getAge() + \" \" + s.getScore());\n        }\n    }\n\n    public static class AgeAscComparator implements Comparator<Student> {\n        @Override\n        public int compare(Student o1, Student o2) {\n            return o1.getAge() - o2.getAge();\n        }\n    }\n\n    public static class NameAscComparator implements Comparator<Student> {\n        @Override\n        public int compare(Student o1, Student o2) {\n            return o1.getName().compareTo(o2.getName());\n        }\n    }\n\n    public static class ScoreDescComparator implements Comparator<Student> {\n        @Override\n        public int compare(Student o1, Student o2) {\n            if (Math.abs(o1.getScore() - o2.getScore()) < 0.001) {\n                return 0;\n            } else if (o1.getScore() < o2.getScore()) {\n                return 1;\n            } else {\n                return -1;\n            }\n        }\n    }\n}\n\n```\n\n##### HttpServlet\n\n```java\npublic class HelloServlet extends HttpServlet {\n  @Override\n  protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n    this.doPost(req, resp);\n  }\n  \n  @Override\n  protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n    resp.getWriter().write(\"Hello World.\");\n  }\n}\n```\n\n当我们在浏览器中输入网址（比如，http://127.0.0.1:8080/hello ）的时候，Servlet 容器会接收到相应的请求，并且根据 URL 和 Servlet 之间的映射关系，找到相应的 Servlet（HelloServlet），然后执行它的 service() 方法。service() 方法定义在父类 HttpServlet 中，它会调用 doGet() 或 doPost() 方法，然后输出数据（“Hello world”）到网页。\n\n```java\npublic void service(ServletRequest req, ServletResponse res)\n    throws ServletException, IOException\n{\n    HttpServletRequest  request;\n    HttpServletResponse response;\n    if (!(req instanceof HttpServletRequest &&\n            res instanceof HttpServletResponse)) {\n        throw new ServletException(\"non-HTTP request or response\");\n    }\n    request = (HttpServletRequest) req;\n    response = (HttpServletResponse) res;\n    service(request, response);\n}\n\nprotected void service(HttpServletRequest req, HttpServletResponse resp)\n    throws ServletException, IOException\n{\n    String method = req.getMethod();\n    if (method.equals(METHOD_GET)) {\n        long lastModified = getLastModified(req);\n        if (lastModified == -1) {\n            // servlet doesn't support if-modified-since, no reason\n            // to go through further expensive logic\n            doGet(req, resp);\n        } else {\n            long ifModifiedSince = req.getDateHeader(HEADER_IFMODSINCE);\n            if (ifModifiedSince < lastModified) {\n                // If the servlet mod time is later, call doGet()\n                // Round down to the nearest second for a proper compare\n                // A ifModifiedSince of -1 will always be less\n                maybeSetLastModified(resp, lastModified);\n                doGet(req, resp);\n            } else {\n                resp.setStatus(HttpServletResponse.SC_NOT_MODIFIED);\n            }\n        }\n    } else if (method.equals(METHOD_HEAD)) {\n        long lastModified = getLastModified(req);\n        maybeSetLastModified(resp, lastModified);\n        doHead(req, resp);\n    } else if (method.equals(METHOD_POST)) {\n        doPost(req, resp);\n    } else if (method.equals(METHOD_PUT)) {\n        doPut(req, resp);\n    } else if (method.equals(METHOD_DELETE)) {\n        doDelete(req, resp);\n    } else if (method.equals(METHOD_OPTIONS)) {\n        doOptions(req,resp);\n    } else if (method.equals(METHOD_TRACE)) {\n        doTrace(req,resp);\n    } else {\n        String errMsg = lStrings.getString(\"http.method_not_implemented\");\n        Object[] errArgs = new Object[1];\n        errArgs[0] = method;\n        errMsg = MessageFormat.format(errMsg, errArgs);\n        resp.sendError(HttpServletResponse.SC_NOT_IMPLEMENTED, errMsg);\n    }\n}\n```\n\n从上面的代码中我们可以看出，HttpServlet 的 service() 方法就是一个模板方法，它实现了整个 HTTP 请求的执行流程，doGet()、doPost() 是模板中可以由子类来定制的部分。实际上，这就相当于 Servlet 框架提供了一个扩展点（doGet()、doPost() 方法），让框架用户在不用修改 Servlet 框架源码的情况下，将业务代码通过扩展点镶嵌到框架中执行。\n\n#### 扩展\n\n如果我们某个实现只用到其中的一个模板方法，也需要把所有抽象方法都实现一遍，怎么优化？\n\n```java\npublic abstract AbstractClass {\n    public final void templateMethod1() {\n        // ...\n        method1();\n        //...\n        method2();\n        //...\n    }\n    \n    public final void templateMethod() {\n        // ...\n        method3();\n        // ...\n        method4();\n        //...\n    }\n    \n    public abstract void method1();\n    public abstract void method2();\n    public abstract void method3();\n    public abstract void method4();\n}\n```\n\n第一种：如果某个实现只用到一个模板方法，说明这个类不应该设置这么多的抽象方法，应该拆分成更细粒度的两个类；\n\n第二种：给不常用（不是每个子类都需要实现一遍）的抽象方法设置默认实现。\n\n---\n\n### 策略模式\n\n#### 定义\n\n定义一族算法类，将每个算法分别封装起来，让它们可以互相替换。策略模式可以使算法的变化独立于使用它们的客户端。\n\n#### 作用\n\n对策略的定义、创建和使用进行解耦。\n\n#### 实现\n\n##### 普通实现\n\n```java\npublic static void main(String[] args) throws IOException {\n    String type = \"A\";\n    if ('A'.equals(type)) {\n        // A逻辑\n        \n    } else if ('B'.equals(type)) {\n        // B逻辑\n        \n    }\n}\n```\n\n##### 策略的定义\n\n包含一个策略接口和一组实现这个接口的策略类。\n\n```java\npublic interface Strategy {\n    void algoInterface();\n}\n\npublic class ConcreteStrartegyA implements Strategy {\n    @Override\n    public void algoInterface() {\n        //...具体算法\n        System.out.println(\"this is A\");\n    }\n}\n\npublic class ConcreteStrartegyB implements Strategy {\n    @Override\n    public void algoInterface() {\n        //...具体算法\n        System.out.println(\"this is B\");\n    }\n}\n```\n\n##### 策略的创建\n\n一般在使用的时候，会通过类型（type）来判断创建哪个策略来进行使用；为了封装创建逻辑，我们把根据type创建策略的逻辑抽出来放到工厂类中。\n\n- 无状态策略\n\n  如果策略对象可以被共享使用（单例），那么可以采用如下的工厂方法创建策略。\n\n  ```java\n  public class StrategyFactory {\n  \n      private static final Map<String, Strategy> strategies = new HashMap<>();\n  \n      static {\n          strategies.put(\"A\", new ConcreteStrartegyA());\n          strategies.put(\"B\", new ConcreteStrartegyB());\n      }\n  \n      public static Strategy getStrategy(String type) {\n          if (type == null || type.isEmpty()) {\n              throw new IllegalArgumentException(\"type should not be empty.\");\n          }\n          return strategies.get(type);\n      }\n  }\n  ```\n  \n- 有状态策略\n\n  如果策略是有状态的，我们希望每次都获取的是新创建的策略对象，那么采用如下方式。\n\n  ```java\n  public class StrategyFactory2 {\n  \n      public static Strategy getStrategy(String type) {\n          if (type == null || type.isEmpty()) {\n              throw new IllegalArgumentException(\"type should not be empty.\");\n          }\n  \n          if (\"A\".equals(type)) {\n              return new ConcreteStrartegyA();\n          } else if (\"B\".equals(type)) {\n              return new ConcreteStrartegyB();\n          }\n          return null;\n      }\n  }\n  ```\n\n##### 策略的使用\n\n根据传入的参数，运行时动态确定。\n\n```java\npublic class StrategyDemo {\n\n    public static void main(String[] args) {\n        String type = args[0];\n        Strategy strategy = StrategyFactory.getStrategy(type);\n        strategy.algoInterface();\n    }\n}\n```\n---\n\n### 职责链模式\n\n#### 定义\n\n将请求的发送和接收解耦，让多个对象都有机会处理这个请求。将这些接收对象串成一条链，并沿着这条链传递这个请求，直到链上的某个接收对象能够处理它为止。\n\n多个处理器依次处理同一个请求，一个请求先经过A处理器处理，然后再把请求传递给B处理器，以此类推，形成一个链条。链条上的每个处理器处理各自的处理职责，所以叫做职责链模式。\n\n#### 实现1\n\n链表方式实现。\n\n```java\npublic abstract class Handler {\n    // 下一级处理器\n    protected Handler successor;\n\n    public void setSuccessor(Handler successor) {\n        this.successor = successor;\n    }\n\n    // 结合模板模式\n    public final void handle() {\n        // 当前处理器处理请求\n        boolean handled = doHandle();\n        // 如果当前能处理，就不往下传递，如果还有下一处理器 并且 当前处理失败，交给下一处理器处理\n        // 变体：如果想让所有处理器都处理一遍，修改此处的if条件即可\n        if (successor != null && !handled) {\n            successor.handle();\n        }\n    }\n\n    // 处理结果为false，当前不能处理，继续交给下一级处理器；如果为true，直接返回结果\n    protected abstract boolean doHandle();\n}\n\npublic class HandlerA extends Handler {\n\n    @Override\n    protected boolean doHandle() {\n        boolean handled = false;\n        // ...当前处理器处理逻辑，如果当前处理成功，不需要下一级处理，返回true\n        System.out.println(\"A处理失败，向下传递...\");\n        return handled;\n    }\n}\n\npublic class HandlerB extends Handler {\n\n    @Override\n    protected boolean doHandle() {\n        boolean handled = false;\n        // ...当前处理器处理逻辑，如果当前处理成功，不需要下一级处理，返回true\n        System.out.println(\"B处理成功...\");\n        return handled;\n    }\n}\n\npublic class HandlerChain {\n    private Handler head;\n    private Handler tail;\n\n    public void addHandler(Handler handler) {\n        handler.setSuccessor(null);\n\n        if (head == null) {\n            head = handler;\n            tail = handler;\n            return;\n        }\n\n        tail.setSuccessor(handler);\n        tail = handler;\n    }\n\n    public void handle() {\n        if (head != null) {\n            head.handle();\n        }\n    }\n}\n\npublic class Demo {\n\n    public static void main(String[] args) {\n        HandlerChain chain = new HandlerChain();\n        chain.addHandler(new HandlerA());\n        chain.addHandler(new HandlerB());\n        chain.handle();\n    }\n}\n```\n\n#### 实现2\n\n数组方式实现。\n\n```java\npublic interface IHandler {\n    boolean handle();\n}\n\npublic class HandlerA implements IHandler {\n    @Override\n    public boolean handle() {\n        boolean handled = false;\n        // ...当前处理器处理逻辑，如果当前处理成功，不需要下一级处理，返回true\n        System.out.println(\"A处理失败，向下传递...\");\n        return handled;\n    }\n}\n\npublic class HandlerB implements IHandler {\n    @Override\n    public boolean handle() {\n        boolean handled = false;\n        // ...当前处理器处理逻辑，如果当前处理成功，不需要下一级处理，返回true\n        System.out.println(\"B处理失败，向下传递...\");\n        return handled;\n    }\n}\n\npublic class HandlerChain {\n    private List<IHandler> handlers = new ArrayList<>();\n\n    public void addHandler(IHandler handler) {\n        handlers.add(handler);\n    }\n\n    public void handle() {\n        for (IHandler handler : handlers) {\n            // 当前可以成功处理，直接返回\n            if (handler.handle()) {\n                break;\n            }\n        }\n    }\n}\n\npublic class Demo {\n\n    public static void main(String[] args) {\n        HandlerChain chain = new HandlerChain();\n        chain.addHandler(new HandlerA());\n        chain.addHandler(new HandlerB());\n        chain.handle();\n    }\n}\n```\n\n#### 示例\n\n敏感词过滤：对一段文本进行判断，如果里面涉及到敏感词，就禁止展示。\n\n```java\npublic interface SensitiveWorldFilter {\n    /**\n     * 敏感词过滤，如果当前文本含有敏感词，返回true\n     * @param text\n     * @return\n     */\n    boolean doFilter(String text);\n}\n\npublic class PoliticalWordFilter implements SensitiveWorldFilter {\n    @Override\n    public boolean doFilter(String text) {\n        if (text.contains(\"国家\") || text.contains(\"党\")) {\n            System.out.println(\"当前文本敏感，为防止查水表，不予通过\");\n            return true;\n        }\n        return false;\n    }\n}\n\npublic class SexyWordFilter implements SensitiveWorldFilter {\n\n    @Override\n    public boolean doFilter(String text) {\n        if (text.contains(\"性感\")) {\n            System.out.println(\"当前文本涉黄！\");\n            return true;\n        }\n        return false;\n    }\n}\n\npublic class SensitiveWorldFilterChain {\n    private List<SensitiveWorldFilter> filters = new ArrayList<>();\n\n    public void addFilter(SensitiveWorldFilter filter) {\n        filters.add(filter);\n    }\n\n    public boolean filter(String text) {\n        for (SensitiveWorldFilter filter : filters) {\n            if (filter.doFilter(text)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n}\n\npublic class Demo {\n\n    public static void main(String[] args) {\n        // 文本\n        String text = \"性感荷官，在线发牌\";\n        String text2 = \"好好学习，天天向上\";\n        // 敏感词过滤器\n        SensitiveWorldFilterChain chain = new SensitiveWorldFilterChain();\n        chain.addFilter(new SexyWordFilter());\n        chain.addFilter(new PoliticalWordFilter());\n        boolean illeagl = chain.filter(text);\n//        boolean illeagl = chain.filter(text2);\n        if (illeagl) {\n            System.out.println(\"当前文本不合法！\");\n        } else {\n            System.out.println(\"当前文本合法\");\n        }\n    }\n}\n```\n\n#### 框架源码\n\n**Spring的HandlerInterceptor**\n\n日常使用的样子\n\n```java\npublic class LogInterceptor implements HandlerInterceptor {\n\n  @Override\n  public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {\n    System.out.println(\"拦截客户端发送来的请求.\");\n    return true; // 继续后续的处理\n  }\n\n  @Override\n  public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) throws Exception {\n    System.out.println(\"拦截发送给客户端的响应.\");\n  }\n\n  @Override\n  public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) throws Exception {\n    System.out.println(\"这里总是被执行.\");\n  }\n}\n```\n\n![image-20201125114846433](https://tva1.sinaimg.cn/large/0081Kckwly1gl19xi5u0lj322a0n6n5b.jpg)\n\nSpring Interceptor 底层是基于职责链模式实现的。其中，HandlerExecutionChain 类是职责链模式中的处理器链。\n\nhttps://www.jianshu.com/p/8a20c547e245\n\n关键代码如下：\n\n在 Spring 框架中，DispatcherServlet 的 doDispatch() 方法来分发请求，它在真正的业务逻辑执行前后，执行 HandlerExecutionChain 中的 applyPreHandle() 和 applyPostHandle() 函数，用来实现拦截的功能。\n\n```java\nprotected void doDispatch(HttpServletRequest request, HttpServletResponse response) throws Exception {\n    HttpServletRequest processedRequest = request;\n    HandlerExecutionChain mappedHandler = null;\n    boolean multipartRequestParsed = false;\n\n    WebAsyncManager asyncManager = WebAsyncUtils.getAsyncManager(request);\n\n    try {\n        ModelAndView mv = null;\n        Exception dispatchException = null;\n\n        try {\n            processedRequest = checkMultipart(request);\n            multipartRequestParsed = (processedRequest != request);\n\n            // Determine handler for the current request.\n            mappedHandler = getHandler(processedRequest);\n            if (mappedHandler == null) {\n                noHandlerFound(processedRequest, response);\n                return;\n            }\n\n            // Determine handler adapter for the current request.\n            HandlerAdapter ha = getHandlerAdapter(mappedHandler.getHandler());\n\n            // Process last-modified header, if supported by the handler.\n            String method = request.getMethod();\n            boolean isGet = \"GET\".equals(method);\n            if (isGet || \"HEAD\".equals(method)) {\n                long lastModified = ha.getLastModified(request, mappedHandler.getHandler());\n                if (new ServletWebRequest(request, response).checkNotModified(lastModified) && isGet) {\n                    return;\n                }\n            }\n\t\t\t\n            // 请求处理\n            if (!mappedHandler.applyPreHandle(processedRequest, response)) {\n                return;\n            }\n\n            // Actually invoke the handler.\n            mv = ha.handle(processedRequest, response, mappedHandler.getHandler());\n\n            if (asyncManager.isConcurrentHandlingStarted()) {\n                return;\n            }\n\n            applyDefaultViewName(processedRequest, mv);\n            // 响应处理\n            mappedHandler.applyPostHandle(processedRequest, response, mv);\n        }\n        catch (Exception ex) {\n            dispatchException = ex;\n        }\n        catch (Throwable err) {\n            // As of 4.3, we're processing Errors thrown from handler methods as well,\n            // making them available for @ExceptionHandler methods and other scenarios.\n            dispatchException = new NestedServletException(\"Handler dispatch failed\", err);\n        }\n        processDispatchResult(processedRequest, response, mappedHandler, mv, dispatchException);\n    }\n    catch (Exception ex) {\n        triggerAfterCompletion(processedRequest, response, mappedHandler, ex);\n    }\n    catch (Throwable err) {\n        triggerAfterCompletion(processedRequest, response, mappedHandler,\n                               new NestedServletException(\"Handler processing failed\", err));\n    }\n    finally {\n        if (asyncManager.isConcurrentHandlingStarted()) {\n            // Instead of postHandle and afterCompletion\n            if (mappedHandler != null) {\n                // 总是执行\n                mappedHandler.applyAfterConcurrentHandlingStarted(processedRequest, response);\n            }\n        }\n        else {\n            // Clean up any resources used by a multipart request.\n            if (multipartRequestParsed) {\n                cleanupMultipart(processedRequest);\n            }\n        }\n    }\n}\n```\n\nHandlerExecutionChain的关键代码\n\n```java\npublic class HandlerExecutionChain {\n private final Object handler;\n private HandlerInterceptor[] interceptors;\n \n public void addInterceptor(HandlerInterceptor interceptor) {\n  initInterceptorList().add(interceptor);\n }\n\n boolean applyPreHandle(HttpServletRequest request, HttpServletResponse response) throws Exception {\n  HandlerInterceptor[] interceptors = getInterceptors();\n  if (!ObjectUtils.isEmpty(interceptors)) {\n   for (int i = 0; i < interceptors.length; i++) {\n    HandlerInterceptor interceptor = interceptors[i];\n    if (!interceptor.preHandle(request, response, this.handler)) {\n     triggerAfterCompletion(request, response, null);\n     return false;\n    }\n   }\n  }\n  return true;\n }\n\n void applyPostHandle(HttpServletRequest request, HttpServletResponse response, ModelAndView mv) throws Exception {\n  HandlerInterceptor[] interceptors = getInterceptors();\n  if (!ObjectUtils.isEmpty(interceptors)) {\n   for (int i = interceptors.length - 1; i >= 0; i--) {\n    HandlerInterceptor interceptor = interceptors[i];\n    interceptor.postHandle(request, response, this.handler, mv);\n   }\n  }\n }\n\n void triggerAfterCompletion(HttpServletRequest request, HttpServletResponse response, Exception ex)\n   throws Exception {\n  HandlerInterceptor[] interceptors = getInterceptors();\n  if (!ObjectUtils.isEmpty(interceptors)) {\n   for (int i = this.interceptorIndex; i >= 0; i--) {\n    HandlerInterceptor interceptor = interceptors[i];\n    try {\n     interceptor.afterCompletion(request, response, this.handler, ex);\n    } catch (Throwable ex2) {\n     logger.error(\"HandlerInterceptor.afterCompletion threw exception\", ex2);\n    }\n   }\n  }\n }\n}\n```\n\n\n\n---\n\n### 状态模式\n\n##### 定义\n\n##### 有限状态机\n\n状态机有三个组成部分：状态、事件、动作。其中，事件也被称为转移条件。事件触发状态的转移及动作的执行。不过动作不是必须的，也可能只是转变状态，不执行任何动作。\n\n#### 示例\n\n**超级马里奥游戏**：\n\n马里奥有多种形态，刚出生是小马里奥（Small Mario），可以进化成超级马里奥（Super Mario）、火焰马里奥（Fire Mario）、斗篷马里奥（Cape Mario）等等。\t\n\n马里奥遇到不同的事件可以进行形态转变，并进行积分的增减。\n\n<img src=\"https://tva1.sinaimg.cn/large/0081Kckwly1gk55y3hl4qj31310u0tj5.jpg\" alt=\"image-20201028171249300\"  />\n\n#### 代码实现\n\n##### 方式1\n\n**分支逻辑法**\n\n定义一个状态枚举类，一个状态机类，状态机类中提供4个方法，分别是：吃了蘑菇，获得斗篷，获得火焰，遇到怪物。\n\n```java\n// 定义状态\npublic enum State {\n\n    SMALL(0),\n    SUPER(1),\n    FIRE(2),\n    CAPE(3),\n    ;\n\n    private int value;\n\n    private State(int value) {\n        this.value = value;\n    }\n\n    public int getValue() {\n        return this.value;\n    }\n}\n```\n\n```java\n// 状态机\npublic class MarioStateMachine {\n    private int score;\n    private State currentState;\n\n    public MarioStateMachine() {\n        this.score = 0;\n        this.currentState = State.SMALL;\n    }\n\n    public void obtainMushRoom() {\n        if (currentState.equals(State.SMALL)) {\n            this.score += 100;\n            this.currentState = State.SUPER;\n        }\n    }\n\n    public void obtainCape() {\n        if (currentState.equals(State.SMALL) || currentState.equals(State.SUPER)) {\n            this.score += 200;\n            this.currentState = State.CAPE;\n        }\n\n    }\n\n    public void obtainFireFlower() {\n        if (currentState.equals(State.SMALL) || currentState.equals(State.SUPER)) {\n            this.score += 300;\n            this.currentState = State.FIRE;\n        }\n    }\n\n    public void meetMonster() {\n        if (currentState.equals(State.SUPER)) {\n            this.score -= 100;\n            this.currentState = State.SMALL;\n            return;\n        }\n\n        if (currentState.equals(State.CAPE)) {\n            this.score -= 200;\n            this.currentState = State.SMALL;\n            return;\n        }\n\n        if (currentState.equals(State.FIRE)) {\n            this.score -= 300;\n            this.currentState = State.SMALL;\n            return;\n        }\n    }\n\n    public int getScore() {\n        return this.score;\n    }\n\n    public State getCurrentState() {\n        return this.currentState;\n    }\n}\n\npublic class ApplicationDemo {\n    public static void main(String[] args) {\n        // 游戏开始\n        MarioStateMachine mario = new MarioStateMachine();\n        // 吃到蘑菇\n        mario.obtainMushRoom();\n        int score = mario.getScore();\n        State state = mario.getCurrentState();\n        System.out.println(\"mario score：\" + score + \"; state: \" + state);\n    }\n}\n```\n\n对于简单的状态机来说，分支逻辑这种实现方式是可以接受的。但是，对于复杂的状态机来说，这种实现方式极易漏写或者错写某个状态转移。除此之外，代码中充斥着大量的 if-else 或者 switch-case 分支判断逻辑，可读性和可维护性都很差。如果哪天修改了状态机中的某个状态转移，我们要在冗长的分支逻辑中找到对应的代码进行修改，很容易改错，引入 bug。\n\n##### 方式2\n\n**查表法**\n\n使用二维数组表示状态和事件，如下表，第一维表示当前状态，第二维表示事件，值表示当前状态经过事件后，转移到的新状态及执行的动作。\n\n<img src=\"https://tva1.sinaimg.cn/large/0081Kckwly1gk56dpaaawj31360don25.jpg\" alt=\"image-20201028172751310\"  />\n\n定义一个事件类，事件类和State状态类可以组合成为上述的表格。\n\n```java\n// 定义状态\npublic enum State {\n\n    SMALL(0),\n    SUPER(1),\n    FIRE(2),\n    CAPE(3),\n    ;\n\n    private int value;\n\n    private State(int value) {\n        this.value = value;\n    }\n\n    public int getValue() {\n        return this.value;\n    }\n}\n\npublic enum Event {\n\n    GOT_MUSHROOM(0),\n    GOT_CAPE(1),\n    GOT_FIRE(2),\n    MET_MONSTER(3),\n    ;\n\n    private int value;\n\n    private Event(int value) {\n        this.value = value;\n    }\n\n    public int getValue() {\n        return this.value;\n    }\n}\n```\n\n定义状态机，横坐标为State的value，纵坐标为Event的value。\n\n```java\npublic class MarioStateMachine {\n    private int score;\n    private State currentState;\n\n    // 状态值\n    private static final State[][] transitionTable = {\n            {State.SUPER, State.CAPE, State.FIRE, State.SMALL},\n            {State.SUPER, State.CAPE, State.FIRE, State.SMALL},\n            {State.CAPE, State.CAPE, State.CAPE, State.SMALL},\n            {State.FIRE, State.FIRE, State.FIRE, State.SMALL}\n    };\n\n    // 执行动作\n    private static final int[][] actionTable = {\n            {+100, +200, +300, +0},\n            {+0, +200, +300, -100},\n            {+0, +0, +0, -200},\n            {+0, +0, +0, -300}\n    };\n\n    public MarioStateMachine() {\n        this.score = 0;\n        this.currentState = State.SMALL;\n    }\n\n    public void obtainMushRoom() {\n        executeEvent(Event.GOT_MUSHROOM);\n    }\n\n    public void obtainCape() {\n        executeEvent(Event.GOT_CAPE);\n    }\n\n    public void obtainFireFlow() {\n        executeEvent(Event.GOT_FIRE);\n    }\n\n    public void meetMonster() {\n        executeEvent(Event.MET_MONSTER);\n    }\n\n    private void executeEvent(Event event) {\n        int stateValue = this.currentState.getValue();\n        int eventValue = event.getValue();\n        this.currentState = transitionTable[stateValue][eventValue];\n        this.score += actionTable[stateValue][eventValue];\n    }\n\n    public int getScore() {\n        return score;\n    }\n\n    public State getCurrentState() {\n        return currentState;\n    }\n}\n```\n\n相对于分支逻辑的实现方式，查表法的代码实现更加清晰，可读性和可维护性更好。当修改状态机时，我们只需要修改 transitionTable 和 actionTable 两个二维数组即可。实际上，如果我们把这两个二维数组存储在配置文件中，当需要修改状态机时，我们甚至可以不修改任何代码，只需要修改配置文件就可以了。\n\n**查表法局限性**：\n\n这个例子中，状态经过事件后，执行的动作只是得分的加减，如果动作比较复杂，例如，数据库入库，发送邮件，调用不同接口等等，就没法用简单的二维数组来表示了。\n\n##### 方式3\n\n**状态模式**\n\n状态模式通过将事件触发的状态转移和动作执行，拆分到不同的状态类中，来避免分支判断逻辑。\n\n定义一个状态接口，接口就是状态，接口中的每个方法就是一种事件。\n\n```java\npublic interface IMario {\n    State getName();\n\n    void obtainMushRoom(MarioStateMachine stateMachine);\n\n    void obtainCape(MarioStateMachine stateMachine);\n\n    void obtainFireFlow(MarioStateMachine stateMachine);\n\n    void meetMonster(MarioStateMachine stateMachine);\n}\n```\n\n每个状态接口的实现类就是具体的状态类（小马里奥类、超级马里奥类等）。\n\n因为状态类中不包含任何成员变量，所以我们考虑把状态类设计成单例的。\n\n```java\npublic class SmallMario implements IMario {\n    private static final SmallMario instance = new SmallMario();\n    private SmallMario() {}\n    public static SmallMario getInstance() {\n        return instance;\n    }\n\n    @Override\n    public State getName() {\n        return State.SMALL;\n    }\n\n    @Override\n    public void obtainMushRoom(MarioStateMachine stateMachine) {\n        stateMachine.setCurrentState(SuperMario.getInstance());\n        stateMachine.setScore(stateMachine.getScore() + 100);\n    }\n\n    @Override\n    public void obtainCape(MarioStateMachine stateMachine) {\n        // ...\n    }\n\n    @Override\n    public void obtainFireFlow(MarioStateMachine stateMachine) {\n\n    }\n\n    @Override\n    public void meetMonster(MarioStateMachine stateMachine) {\n\n    }\n}\n\npublic class SuperMario implements IMario {\n    private static final SuperMario instance = new SuperMario();\n    private SuperMario() {}\n\n    public static SuperMario getInstance() {\n        return instance;\n    }\n\n\n    @Override\n    public State getName() {\n        return State.SUPER;\n    }\n\n    @Override\n    public void obtainMushRoom(MarioStateMachine stateMachine) {\n        // ...\n    }\n\n    @Override\n    public void obtainCape(MarioStateMachine stateMachine) {\n        // ...\n    }\n\n    @Override\n    public void obtainFireFlow(MarioStateMachine stateMachine) {\n        // ...\n    }\n\n    @Override\n    public void meetMonster(MarioStateMachine stateMachine) {\n        //...\n    }\n}\n```\n\n状态机\n\n```java\npublic class MarioStateMachine {\n    private int score;\n    // 用接口表示状态\n    private IMario currentState;\n\n    public MarioStateMachine() {\n        this.score = 0;\n        this.currentState = SmallMario.getInstance();\n    }\n\n    public void setCurrentState(IMario currentState) {\n        this.currentState = currentState;\n    }\n\n    public void obtainMushRoom() {\n        this.currentState.obtainMushRoom(this);\n    }\n\n    public void obtainCape() {\n        this.currentState.obtainCape(this);\n    }\n\n    public void obtainFireFlow() {\n        this.currentState.obtainFireFlow(this);\n    }\n\n    public void meetMonster() {\n        this.currentState.meetMonster(this);\n    }\n\n    public int getScore() {\n        return score;\n    }\n\n    public void setScore(int score) {\n        this.score = score;\n    }\n\n    public IMario getCurrentState() {\n        return currentState;\n    }\n}\n```\n\n使用方式\n\n```java\npublic class ApplicationDemo {\n\n    public static void main(String[] args) {\n        MarioStateMachine mario = new MarioStateMachine();\n        mario.obtainMushRoom();\n        int score = mario.getScore();\n        State state = mario.getCurrentState().getName();\n        System.out.println(\"mario score：\" + score + \"; state: \" + state);\n    }\n}\n```\n\n状态模式中，每个具体的状态类只需要关心自己遇到不同事件后流转到的下一个状态以及得分值的增减。\n\n实际上，像游戏这种比较复杂的状态机，包含的状态比较多，优先推荐使用查表法，而状态模式会引入非常多的状态类，会导致代码比较难维护。相反，像电商下单、外卖下单这种类型的状态机，它们的状态并不多，状态转移也比较简单，但事件触发执行的动作包含的业务逻辑可能会比较复杂，所以，更加推荐使用状态模式来实现。\n\n---\n\n\n### 迭代器模式\n\n#### 定义\n\n迭代器模式又叫游标模式，是用来遍历容器的；\n\n一个完整的迭代器模式一般会涉及**容器**和**容器迭代器**两部分。为了达到基于接口而非实现编程的目的，容器又包含容器接口、容器实现类，迭代器又包含迭代器接口、迭代器实现类。\n\n<img src=\"https://tva1.sinaimg.cn/large/008i3skNgy1gwh9i7svhpj312s0isgms.jpg\" alt=\"image-20201028202346968\"  />\n\n假设某个新的编程语言的基础类库中，还没有提供线性容器对应的迭代器，需要我们从零开始开发。\n\n#### 代码实现\n\n##### 简单版\n\n```java\npublic interface Iterator<E> {\n    boolean hasNext();\n    void next();\n    E currentItem();\n}\n\npublic class ArrayIterator<E> implements Iterator {\n    // 游标\n    private int curstor;\n    private ArrayList<E> arrayList;\n\n    public ArrayIterator(ArrayList<E> arrayList) {\n        this.curstor = 0;\n        this.arrayList = arrayList;\n    }\n\n    @Override\n    public boolean hasNext() {\n        return curstor != arrayList.size();\n    }\n\n    @Override\n    public void next() {\n        curstor++;\n    }\n\n    @Override\n    public E currentItem() {\n        if (curstor >= arrayList.size()) {\n            throw new NoSuchElementException();\n        }\n        return arrayList.get(curstor);\n    }\n}\n\npublic class Demo {\n    public static void main(String[] args) {\n        ArrayList<String> name = new ArrayList<String>();\n        name.add(\"张三\");\n        name.add(\"李四\");\n        name.add(\"王五\");\n        Iterator<String> iterator = new ArrayIterator<String>(name);\n        while (iterator.hasNext()) {\n            System.out.println(iterator.currentItem());\n            iterator.next();\n        }\n    }\n}\n```\n\n##### 优化\n\n在上面的代码实现中，我们需要将待遍历的容器对象，通过构造函数传递给迭代器类。为了封装迭代器的创建细节，我们可以在容器中定义iterator()方法创建迭代器；为实现基于接口编程，我们在List接口中定义这个方法。\n\n```java\npublic interface List<E> {\n  Iterator iterator();\n  //...省略其他接口函数...\n}\n\npublic class ArrayList<E> implements List<E> {\n  //...\n  public Iterator iterator() {\n    return new ArrayIterator(this);\n  }\n  //...省略其他代码\n}\n\npublic class Demo {\n  public static void main(String[] args) {\n    List<String> names = new ArrayList<>();\n    names.add(\"aa\");\n    names.add(\"bb\");\n    names.add(\"cc\");\n    \n    Iterator<String> iterator = names.iterator();\n    while (iterator.hasNext()) {\n      System.out.println(iterator.currentItem());\n      iterator.next();\n    }\n  }\n}\n```\n\n迭代器的实现思路总结：迭代器中需要定义 hasNext()、currentItem()、next() 三个最基本的方法。待遍历的容器对象通过依赖注入传递到迭代器类中。容器通过 iterator() 方法来创建迭代器。\n\n<img src=\"https://tva1.sinaimg.cn/large/008i3skNgy1gwh9io7x0ij315k0o0gnc.jpg\" alt=\"image-20201117205945886\"  />\n\n#### 迭代器模式的优势\n\n```java\nList<String> names = new ArrayList<>();\nnames.add(\"xzg\");\nnames.add(\"wang\");\nnames.add(\"zheng\");\n\n// 第一种遍历方式：for循环\nfor (int i = 0; i < names.size(); i++) {\n  System.out.print(names.get(i) + \",\");\n}\n\n// 第二种遍历方式：foreach循环\nfor (String name : names) {\n  System.out.print(name + \",\")\n}\n\n// 第三种遍历方式：迭代器遍历\nIterator<String> iterator = names.iterator();\nwhile (iterator.hasNext()) {\n  System.out.print(iterator.next() + \",\");//Java中的迭代器接口，next()既移动游标又返回数据\n}\n```\n\n对遍历方式比较简单的线性数据结构，直接使用 for 循环来遍历就足够了。但是，对于复杂的数据结构（比如树、图）来说，有各种复杂的遍历方式。比如，树有前中后序、按层遍历，图有深度优先、广度优先遍历等等。如果由客户端代码来实现这些遍历算法，势必增加开发成本，而且容易写错。如果将这部分遍历的逻辑写到容器类中，也会导致容器类代码的复杂性；\n\n将游标指向的当前位置等信息，存储在迭代器类中，每个迭代器独享游标信息。这样，我们就可以创建多个不同的迭代器，同时对同一个容器进行遍历而互不影响；\n\n容器和迭代器都提供了抽象的接口，方便我们在开发的时候，基于接口而非具体的实现编程。当需要切换新的遍历算法的时候，比如，从前往后遍历链表切换成从后往前遍历链表，客户端代码只需要将迭代器类从 LinkedIterator 切换为 ReversedLinkedIterator 即可，其他代码都不需要修改。除此之外，添加新的遍历算法，我们只需要扩展新的迭代器类，也更符合开闭原则。\n\n#### 遍历的同时增删元素\n\n**删除元素**\n\n```java\npublic class RemoveDemo {\n\n    public static void main(String[] args) {\n        ArrayList<String> names = new ArrayList<>();\n        names.add(\"a\");\n        names.add(\"b\");\n        names.add(\"c\");\n        names.add(\"d\");\n\n        Iterator<String> iterator = new ArrayIterator<String>(names);\n\n        // 游标指向b时，移除a\n        iterator.next();\n        names.remove(\"a\");\n    }\n}\n```\n\n<img src=\"https://tva1.sinaimg.cn/large/0081Kckwly1gl1gk4i1d1j30pi0mw0ux.jpg\" alt=\"image-20201125153805528\"  />\n\n在遍历过程删除元素，结果是不可预期的，有时候有问题，有时候没问题，要视删除元素的位置而定。\n\n**增加元素**\n\n```java\npublic class AddDemo {\n\n    public static void main(String[] args) {\n        ArrayList<String> names = new ArrayList<>();\n        names.add(\"a\");\n        names.add(\"b\");\n        names.add(\"c\");\n        names.add(\"d\");\n\n        Iterator<String> iterator = new ArrayIterator<String>(names);\n\n        // 游标指向b时，将x插入下标为0的位置\n        iterator.next();\n        names.add(0, \"x\");\n      \n}\n```\n\n<img src=\"https://tva1.sinaimg.cn/large/0081Kckwly1gl1gwvvbw6j30pg0jw40l.jpg\" alt=\"image-20201125155021826\"  />\n\n跟删除情况类似，如果我们在游标的后面添加元素，就不会存在任何问题。所以，在遍历的同时添加集合元素也是一种不可预期行为。\n\n**如何应对遍历时改变集合导致的不可预期行为**\n\n迭代器要在遍历的元素的时候判断集合是否有增删改数据，如果有就报错。\n\n#### JDK ArrayList中的迭代器\n\n```java\npublic class ArrayList<E> extends AbstractList<E>\n        implements List<E>, RandomAccess, Cloneable, java.io.Serializable \n{\n\tpublic Iterator<E> iterator() {\n    \treturn new Itr();\n\t}\n\n    /**\n     * An optimized version of AbstractList.Itr\n     */\n    private class Itr implements Iterator<E> {\n        int cursor;       // index of next element to return\n        int lastRet = -1; // index of last element returned; -1 if no such\n        int expectedModCount = modCount;\n\n        public boolean hasNext() {\n            return cursor != size;\n        }\n\n        @SuppressWarnings(\"unchecked\")\n        public E next() {\n            checkForComodification();\n            int i = cursor;\n            if (i >= size)\n                throw new NoSuchElementException();\n            Object[] elementData = ArrayList.this.elementData;\n            if (i >= elementData.length)\n                throw new ConcurrentModificationException();\n            cursor = i + 1;\n            return (E) elementData[lastRet = i];\n        }\n\n        public void remove() {\n            if (lastRet < 0)\n                throw new IllegalStateException();\n            checkForComodification();\n\n            try {\n                ArrayList.this.remove(lastRet);\n                cursor = lastRet;\n                lastRet = -1;\n                expectedModCount = modCount;\n            } catch (IndexOutOfBoundsException ex) {\n                throw new ConcurrentModificationException();\n            }\n        }\n\n        final void checkForComodification() {\n            if (modCount != expectedModCount)\n                throw new ConcurrentModificationException();\n        }\n    }    \n}\n```\n\n---\n\n### 访问者模式\n\n#### 寻源\n\n假设我们从网站上爬取了很多资源文件，它们的格式有三种：PDF、PPT、Word。我们现在要开发一个工具来处理这批资源文件。这个工具的其中一个功能是，把这些资源文件中的文本内容抽取出来放到 txt 文件中。\n\n##### 实现1\n\nResourceFile 是一个抽象类，包含一个抽象函数 extract2txt()。PdfFile、PPTFile、WordFile 都继承 ResourceFile 类，并且重写了 extract2txt() 函数。在 ToolApplication 中，我们可以利用多态特性，根据对象的实际类型，来决定执行哪个方法。\n\n```java\npublic abstract class ResourceFile {\n  protected String filePath;\n\n  public ResourceFile(String filePath) {\n    this.filePath = filePath;\n  }\n\n  public abstract void extract2txt();\n}\n\npublic class PPTFile extends ResourceFile {\n  public PPTFile(String filePath) {\n    super(filePath);\n  }\n\n  @Override\n  public void extract2txt() {\n    //...省略一大坨从PPT中抽取文本的代码...\n    //...将抽取出来的文本保存在跟filePath同名的.txt文件中...\n    System.out.println(\"Extract PPT.\");\n  }\n}\n\npublic class PdfFile extends ResourceFile {\n  public PdfFile(String filePath) {\n    super(filePath);\n  }\n\n  @Override\n  public void extract2txt() {\n    //...\n    System.out.println(\"Extract PDF.\");\n  }\n}\n\npublic class WordFile extends ResourceFile {\n  public WordFile(String filePath) {\n    super(filePath);\n  }\n\n  @Override\n  public void extract2txt() {\n    //...\n    System.out.println(\"Extract WORD.\");\n  }\n}\n\n// 运行结果是：\n// Extract PDF.\n// Extract WORD.\n// Extract PPT.\npublic class ToolApplication {\n  public static void main(String[] args) {\n    List<ResourceFile> resourceFiles = listAllResourceFiles(args[0]);\n    for (ResourceFile resourceFile : resourceFiles) {\n      resourceFile.extract2txt();\n    }\n  }\n\n  private static List<ResourceFile> listAllResourceFiles(String resourceDirectory) {\n    List<ResourceFile> resourceFiles = new ArrayList<>();\n    //...根据后缀(pdf/ppt/word)由工厂方法创建不同的类对象(PdfFile/PPTFile/WordFile)\n    resourceFiles.add(new PdfFile(\"a.pdf\"));\n    resourceFiles.add(new WordFile(\"b.word\"));\n    resourceFiles.add(new PPTFile(\"c.ppt\"));\n    return resourceFiles;\n  }\n}\n```\n\n如果工具的功能不停地扩展，不仅要能抽取文本内容，还要支持压缩、提取文件元信息（文件名、大小、更新时间等等）构建索引等一系列的功能，那如果我们继续按照上面的实现思路，就会存在这样几个问题：\n\n违背开闭原则，添加一个新的功能，所有类的代码都要修改；\n\n虽然功能增多，每个类的代码都不断膨胀，可读性和可维护性都变差了；\n\n把所有比较上层的业务逻辑都耦合到 PdfFile、PPTFile、WordFile 类中，导致这些类的职责不够单一，变成了大杂烩。\n\n**把业务操作和具体数据解耦，设计成独立的类。**\n\n##### 实现2\n\n```java\npublic abstract class ResourceFile {\n  protected String filePath;\n  public ResourceFile(String filePath) {\n    this.filePath = filePath;\n  }\n}\n\npublic class PdfFile extends ResourceFile {\n  public PdfFile(String filePath) {\n    super(filePath);\n  }\n  //...\n}\n//...PPTFile、WordFile代码省略...\npublic class Extractor {\n  public void extract2txt(PPTFile pptFile) {\n    //...\n    System.out.println(\"Extract PPT.\");\n  }\n\n  public void extract2txt(PdfFile pdfFile) {\n    //...\n    System.out.println(\"Extract PDF.\");\n  }\n\n  public void extract2txt(WordFile wordFile) {\n    //...\n    System.out.println(\"Extract WORD.\");\n  }\n}\n\npublic class ToolApplication {\n  public static void main(String[] args) {\n    Extractor extractor = new Extractor();\n    List<ResourceFile> resourceFiles = listAllResourceFiles(args[0]);\n    for (ResourceFile resourceFile : resourceFiles) {\n      extractor.extract2txt(resourceFile);\n    }\n  }\n\n  private static List<ResourceFile> listAllResourceFiles(String resourceDirectory) {\n    List<ResourceFile> resourceFiles = new ArrayList<>();\n    //...根据后缀(pdf/ppt/word)由工厂方法创建不同的类对象(PdfFile/PPTFile/WordFile)\n    resourceFiles.add(new PdfFile(\"a.pdf\"));\n    resourceFiles.add(new WordFile(\"b.word\"));\n    resourceFiles.add(new PPTFile(\"c.ppt\"));\n    return resourceFiles;\n  }\n}\n```\n\n上面的代码用到了方法重载，但是实际上是没法编译通过的，因为重载是静态绑定，我们传入ResourceFile类型的变量，但是找不到对应变量类型的方法。\n\n##### 实现3\n\n```java\npublic abstract class ResourceFile {\n  protected String filePath;\n  public ResourceFile(String filePath) {\n    this.filePath = filePath;\n  }\n  abstract public void accept(Extractor extractor);\n}\n\npublic class PdfFile extends ResourceFile {\n  public PdfFile(String filePath) {\n    super(filePath);\n  }\n\n  @Override\n  public void accept(Extractor extractor) {\n    extractor.extract2txt(this);\n  }\n\n  //...\n}\n\n//...PPTFile、WordFile跟PdfFile类似，这里就省略了...\n//...Extractor代码不变...\n\npublic class ToolApplication {\n  public static void main(String[] args) {\n    Extractor extractor = new Extractor();\n    List<ResourceFile> resourceFiles = listAllResourceFiles(args[0]);\n    for (ResourceFile resourceFile : resourceFiles) {\n      resourceFile.accept(extractor);\n    }\n  }\n\n  private static List<ResourceFile> listAllResourceFiles(String resourceDirectory) {\n    List<ResourceFile> resourceFiles = new ArrayList<>();\n    //...根据后缀(pdf/ppt/word)由工厂方法创建不同的类对象(PdfFile/PPTFile/WordFile)\n    resourceFiles.add(new PdfFile(\"a.pdf\"));\n    resourceFiles.add(new WordFile(\"b.word\"));\n    resourceFiles.add(new PPTFile(\"c.ppt\"));\n    return resourceFiles;\n  }\n}\n```\n\n现在，如果要继续添加新的功能，比如前面提到的压缩功能，根据不同的文件类型，使用不同的压缩算法来压缩资源文件，那我们该如何实现呢？我们需要实现一个类似 Extractor 类的新类 Compressor 类，在其中定义三个重载函数，实现对不同类型资源文件的压缩。除此之外，我们还要在每个资源文件类中定义新的 accept 重载函数。具体的代码如下所示：\n\n##### 实现4\n\n```java\npublic abstract class ResourceFile {\n  protected String filePath;\n  public ResourceFile(String filePath) {\n    this.filePath = filePath;\n  }\n  abstract public void accept(Extractor extractor);\n  abstract public void accept(Compressor compressor);\n}\n\npublic class PdfFile extends ResourceFile {\n  public PdfFile(String filePath) {\n    super(filePath);\n  }\n\n  @Override\n  public void accept(Extractor extractor) {\n    extractor.extract2txt(this);\n  }\n\n  @Override\n  public void accept(Compressor compressor) {\n    compressor.compress(this);\n  }\n\n  //...\n}\n\n//...PPTFile、WordFile跟PdfFile类似，这里就省略了...\n//...Extractor代码不变\n\npublic class ToolApplication {\n  public static void main(String[] args) {\n    Extractor extractor = new Extractor();\n    List<ResourceFile> resourceFiles = listAllResourceFiles(args[0]);\n    for (ResourceFile resourceFile : resourceFiles) {\n      resourceFile.accept(extractor);\n    }\n\n    Compressor compressor = new Compressor();\n    for(ResourceFile resourceFile : resourceFiles) {\n      resourceFile.accept(compressor);\n    }\n  }\n\n  private static List<ResourceFile> listAllResourceFiles(String resourceDirectory) {\n    List<ResourceFile> resourceFiles = new ArrayList<>();\n    //...根据后缀(pdf/ppt/word)由工厂方法创建不同的类对象(PdfFile/PPTFile/WordFile)\n    resourceFiles.add(new PdfFile(\"a.pdf\"));\n    resourceFiles.add(new WordFile(\"b.word\"));\n    resourceFiles.add(new PPTFile(\"c.ppt\"));\n    return resourceFiles;\n  }\n}\n```\n\n上面代码还存在一些问题，添加一个新的业务，还是需要修改每个资源文件类，违反了开闭原则。\n\n针对这个问题，我们抽象出来一个 Visitor 接口，包含是三个命名非常通用的 visit() 重载函数，分别处理三种不同类型的资源文件。具体做什么业务处理，由实现这个 Visitor 接口的具体的类来决定，比如 Extractor 负责抽取文本内容，Compressor 负责压缩。当我们新添加一个业务功能的时候，资源文件类不需要做任何修改，只需要修改 ToolApplication 的代码就可以了。\n\n##### 实现5\n\n```java\npublic abstract class ResourceFile {\n  protected String filePath;\n  public ResourceFile(String filePath) {\n    this.filePath = filePath;\n  }\n  abstract public void accept(Visitor vistor);\n}\n\npublic class PdfFile extends ResourceFile {\n  public PdfFile(String filePath) {\n    super(filePath);\n  }\n\n  @Override\n  public void accept(Visitor visitor) {\n    visitor.visit(this);\n  }\n\n  //...\n}\n//...PPTFile、WordFile跟PdfFile类似，这里就省略了...\n\npublic interface Visitor {\n  void visit(PdfFile pdfFile);\n  void visit(PPTFile pdfFile);\n  void visit(WordFile pdfFile);\n}\n\npublic class Extractor implements Visitor {\n  @Override\n  public void visit(PPTFile pptFile) {\n    //...\n    System.out.println(\"Extract PPT.\");\n  }\n\n  @Override\n  public void visit(PdfFile pdfFile) {\n    //...\n    System.out.println(\"Extract PDF.\");\n  }\n\n  @Override\n  public void visit(WordFile wordFile) {\n    //...\n    System.out.println(\"Extract WORD.\");\n  }\n}\n\npublic class Compressor implements Visitor {\n  @Override\n  public void visit(PPTFile pptFile) {\n    //...\n    System.out.println(\"Compress PPT.\");\n  }\n\n  @Override\n  public void visit(PdfFile pdfFile) {\n    //...\n    System.out.println(\"Compress PDF.\");\n  }\n\n  @Override\n  public void visit(WordFile wordFile) {\n    //...\n    System.out.println(\"Compress WORD.\");\n  }\n\n}\n\npublic class ToolApplication {\n  public static void main(String[] args) {\n    List<ResourceFile> resourceFiles = listAllResourceFiles(args[0]);\n      \n    Extractor extractor = new Extractor();\n    for (ResourceFile resourceFile : resourceFiles) {\n      resourceFile.accept(extractor);\n    }\n\n    Compressor compressor = new Compressor();\n    for(ResourceFile resourceFile : resourceFiles) {\n      resourceFile.accept(compressor);\n    }\n  }\n\n  private static List<ResourceFile> listAllResourceFiles(String resourceDirectory) {\n    List<ResourceFile> resourceFiles = new ArrayList<>();\n    //...根据后缀(pdf/ppt/word)由工厂方法创建不同的类对象(PdfFile/PPTFile/WordFile)\n    resourceFiles.add(new PdfFile(\"a.pdf\"));\n    resourceFiles.add(new WordFile(\"b.word\"));\n    resourceFiles.add(new PPTFile(\"c.ppt\"));\n    return resourceFiles;\n  }\n}\n```\n\n#### 回首\n\n##### 定义\n\n允许一个或者多个操作应用到一组对象上，解耦操作和对象本身。\n\n![image-20201125174436993](https://tva1.sinaimg.cn/large/0081Kckwly1gl1k7t8oj9j31xq0u07i1.jpg)\n\n##### 应用场景\n\n访问者模式针对的是一组类型不同的对象（PdfFile、PPTFile、WordFile）。不过，尽管这组对象的类型是不同的，但是，它们继承相同的父类（ResourceFile）或者实现相同的接口。在不同的应用场景下，\b我们需要对这组对象进行一系列不相关的业务操作（抽取文本、压缩等），但为了避免不断添加功能导致类（PdfFile、PPTFile、WordFile）不断膨胀，职责越来越不单一，以及避免频繁地添加功能导致的频繁代码修改，我们使用访问者模式，将对象与操作解耦，将这些业务操作抽离出来，定义在独立细分的访问者类（Extractor、Compressor）中。\n\n#### 替代方式\n\n我们还可以利用工厂模式来实现，定义一个包含 extract2txt() 接口函数的 Extractor 接口。PdfExtractor、PPTExtractor、WordExtractor 类实现 Extractor 接口，并且在各自的 extract2txt() 函数中，分别实现 Pdf、PPT、Word 格式文件的文本内容抽取。ExtractorFactory 工厂类根据不同的文件类型，返回不同的 Extractor。\n\n```java\npublic abstract class ResourceFile {\n  protected String filePath;\n  public ResourceFile(String filePath) {\n    this.filePath = filePath;\n  }\n  public abstract ResourceFileType getType();\n}\n\npublic class PdfFile extends ResourceFile {\n  public PdfFile(String filePath) {\n    super(filePath);\n  }\n\n  @Override\n  public ResourceFileType getType() {\n    return ResourceFileType.PDF;\n  }\n\n  //...\n}\n\n//...PPTFile/WordFile跟PdfFile代码结构类似，此处省略...\n\npublic interface Extractor {\n  void extract2txt(ResourceFile resourceFile);\n}\n\npublic class PdfExtractor implements Extractor {\n  @Override\n  public void extract2txt(ResourceFile resourceFile) {\n    //...\n  }\n}\n\n//...PPTExtractor/WordExtractor跟PdfExtractor代码结构类似，此处省略...\n\npublic class ExtractorFactory {\n  private static final Map<ResourceFileType, Extractor> extractors = new HashMap<>();\n  static {\n    extractors.put(ResourceFileType.PDF, new PdfExtractor());\n    extractors.put(ResourceFileType.PPT, new PPTExtractor());\n    extractors.put(ResourceFileType.WORD, new WordExtractor());\n  }\n\n  public static Extractor getExtractor(ResourceFileType type) {\n    return extractors.get(type);\n  }\n}\n\npublic class ToolApplication {\n  public static void main(String[] args) {\n    List<ResourceFile> resourceFiles = listAllResourceFiles(args[0]);\n    for (ResourceFile resourceFile : resourceFiles) {\n      Extractor extractor = ExtractorFactory.getExtractor(resourceFile.getType());\n      extractor.extract2txt(resourceFile);\n    }\n  }\n\n  private static List<ResourceFile> listAllResourceFiles(String resourceDirectory) {\n    List<ResourceFile> resourceFiles = new ArrayList<>();\n    //...根据后缀(pdf/ppt/word)由工厂方法创建不同的类对象(PdfFile/PPTFile/WordFile)\n    resourceFiles.add(new PdfFile(\"a.pdf\"));\n    resourceFiles.add(new WordFile(\"b.word\"));\n    resourceFiles.add(new PPTFile(\"c.ppt\"));\n    return resourceFiles;\n  }\n}\n```\n\n对于资源文件处理工具这个例子，如果工具提供的功能并不是非常多，只有几个而已，更推荐使用工厂模式的实现方式，毕竟代码更加清晰、易懂。\n\n相反，如果工具提供非常多的功能，比如有十几个，更推荐使用访问者模式，因为访问者模式需要定义的类要比工厂模式的实现方式少很多，类太多也会影响到代码的可维护性。\n\n\n\n### 参考\n\n[设计模式之美-王争](https://time.geekbang.org/column/intro/100039001)","slug":"行为型设计模式","published":1,"updated":"2021-11-23T14:50:47.375Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckwc7u3mo0011tc6cbzrz6uvs","content":"<h3 id=\"观察者模式\"><a href=\"#观察者模式\" class=\"headerlink\" title=\"观察者模式\"></a>观察者模式</h3><h4 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p>又称为发布订阅模式。在对象之间定义一个一对多的依赖，当一个对象状态改变的时候，所有依赖的对象都会自动收到通知。</p>\n<p>被依赖的对象叫做被观察者（Observable），依赖的对象叫做观察者（Observer）。</p>\n<h4 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h4><p>不同行为之间（观察者和被观察者）进行解耦，对扩展开放，对修改关闭。</p>\n<h4 id=\"实现1\"><a href=\"#实现1\" class=\"headerlink\" title=\"实现1\"></a>实现1</h4><p><strong>一个p2p投资理财系统，用户注册成功之后，我们给用户发放投资体验金。</strong></p>\n<p>使用普通的方法调用：用户注册Service，发放体验金Service，在Controller中依次调用这两个方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserController</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> UserService userService;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> PromotionService promotionService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Long <span class=\"title\">register</span><span class=\"params\">(String telephone, String password)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// ...参数校验</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 注册</span></span><br><span class=\"line\">        <span class=\"keyword\">long</span> userId = userService.register(telephone, password);</span><br><span class=\"line\">        <span class=\"comment\">// 发放投资体验金</span></span><br><span class=\"line\">        promotionService.issueNewUserExperienceCash(userId);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> userId;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>注册接口做了两件事：注册和发放投资体验金，如果需求改动频繁，注册成功后改为发放优惠券，发短信提醒等等，这段代码就违背了开闭原则，后续如果需要在注册只会增加其他功能，比如：给用户发送新人红包，发送注册成功短信等。下面使用观察者模式进行重构。</p>\n<h4 id=\"实现2\"><a href=\"#实现2\" class=\"headerlink\" title=\"实现2\"></a>实现2</h4><p>使用观察者模式实现。</p>\n<ul>\n<li>定义一个观察者接口</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">RegObserver</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">handleRegSuccess</span><span class=\"params\">(<span class=\"keyword\">long</span> userId)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>具体需要做哪些事定义为接口的实现类</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RegPromotionObserver</span> <span class=\"keyword\">implements</span> <span class=\"title\">RegObserver</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> PromotionService promotionService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handleRegSuccess</span><span class=\"params\">(<span class=\"keyword\">long</span> userId)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 发放投资体验金</span></span><br><span class=\"line\">        promotionService.issueNewUserExperienceCash(userId);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RegNoitificationObserver</span> <span class=\"keyword\">implements</span> <span class=\"title\">RegObserver</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> NotificationService notificationService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handleRegSuccess</span><span class=\"params\">(<span class=\"keyword\">long</span> userId)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 发送欢迎短信</span></span><br><span class=\"line\">        notificationService.sendInboxMessage(userId, <span class=\"string\">&quot;Welcome...&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserController</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> UserService userService;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;RegObserver&gt; regObservers = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 一次设置好，之后不会再动态更改</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setRegObserves</span><span class=\"params\">(List&lt;RegObserver&gt; observes)</span> </span>&#123;</span><br><span class=\"line\">        regObservers.addAll(observes);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Long <span class=\"title\">register</span><span class=\"params\">(String telephone, String password)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// ...参数校验</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 注册</span></span><br><span class=\"line\">        <span class=\"keyword\">long</span> userId = userService.register(telephone, password);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 通知观察者</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (RegObserver regObserver : regObservers) &#123;</span><br><span class=\"line\">            regObserver.handleRegSuccess(userId);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> userId;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>使用这种方式实现，对于注册之后的行为，注册方法不需要去关注。</p>\n<p>这种方式使用了同步阻塞的方式，依然有缺陷，观察者代码会被阻塞执行，观察者代码的执行结果会影响注册逻辑的成功执行。</p>\n<h4 id=\"实现3\"><a href=\"#实现3\" class=\"headerlink\" title=\"实现3\"></a>实现3</h4><p>异步非阻塞方式实现。</p>\n<ul>\n<li><p>线程池</p>\n<p>这种方式将线程池和异步执行逻辑耦合在注册代码中，提高了维护成本；并且如果需求在同步和异步之间来回切换，就需要频繁改动注册代码。</p>\n</li>\n<li><p>Guava EventBus</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserController</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> UserService userService = <span class=\"keyword\">new</span> UserService();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> EventBus eventBus;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> DEFAULT_EVENTBUS_THREAD_POOL_SIZE = <span class=\"number\">20</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">UserController</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// this.eventBus = new EventBus(); 同步阻塞模式</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.eventBus = <span class=\"keyword\">new</span> AsyncEventBus(Executors.newFixedThreadPool(DEFAULT_EVENTBUS_THREAD_POOL_SIZE));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 一次设置好，之后不会再动态更改</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setRegObserves</span><span class=\"params\">(List&lt;Object&gt; observes)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Object obj : observes) &#123;</span><br><span class=\"line\">            eventBus.register(obj);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Long <span class=\"title\">register</span><span class=\"params\">(String telephone, String password)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// ...参数校验</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 注册</span></span><br><span class=\"line\">        <span class=\"keyword\">long</span> userId = userService.register(telephone, password);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 通知观察者</span></span><br><span class=\"line\">        eventBus.post(userId);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> userId;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RegNoitificationObserver</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> NotificationService notificationService = <span class=\"keyword\">new</span> NotificationService() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sendInboxMessage</span><span class=\"params\">(<span class=\"keyword\">long</span> userId, String message)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// ...</span></span><br><span class=\"line\">            System.out.println(userId + <span class=\"string\">&quot;, &quot;</span> + message);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Subscribe</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handleRegSuccess</span><span class=\"params\">(Long userId)</span> </span>&#123;</span><br><span class=\"line\">        notificationService.sendInboxMessage(userId, <span class=\"string\">&quot;Welcome...&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RegPromotionObserver</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> PromotionService promotionService = <span class=\"keyword\">new</span> PromotionService() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">issueNewUserExperienceCash</span><span class=\"params\">(<span class=\"keyword\">long</span> userId)</span> </span>&#123;</span><br><span class=\"line\">            System.out.println(userId + <span class=\"string\">&quot;, Promotion is done&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Subscribe</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handleRegSuccess</span><span class=\"params\">(Long userId)</span> </span>&#123;</span><br><span class=\"line\">        promotionService.issueNewUserExperienceCash(userId);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//    @Subscribe</span></span><br><span class=\"line\"><span class=\"comment\">//    public void handleRegSuccess2(Integer userId) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//        System.out.println(&quot;hello pro&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">//    &#125;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>使用这种方式不需要定义Observer接口，只需要通过@Subscribe表明哪个方法可以接收被观察者发送的消息即可，如果注册之后不再需要发放体验金，去掉该注解即可。</p>\n<p>但需要注意，观察者的入参需要是eventBus.register(obj)中obj对象及父类的包装类。</p>\n</li>\n</ul>\n<h4 id=\"实现4\"><a href=\"#实现4\" class=\"headerlink\" title=\"实现4\"></a>实现4</h4><p>Spring也提供了针对观察者模式的扩展。</p>\n<h4 id=\"实现5\"><a href=\"#实现5\" class=\"headerlink\" title=\"实现5\"></a>实现5</h4><p>通过消息队列实现。</p>\n<p>这种方式更有利于观察者和被观察者的解耦，但是额外引入了中间件，增加了系统的复杂性；一般分布式系统中不同项目间的通信使用这种方式。</p>\n<hr>\n<h3 id=\"模板模式\"><a href=\"#模板模式\" class=\"headerlink\" title=\"模板模式\"></a>模板模式</h3><h4 id=\"定义-1\"><a href=\"#定义-1\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p>模板模式在一个方法中定义一个算法骨架，并将某些步骤推迟到子类中实现。模板模式可以让子类在不改变算法整体结构的情况下，重新定义算法中的某些步骤。</p>\n<h4 id=\"作用-1\"><a href=\"#作用-1\" class=\"headerlink\" title=\"作用\"></a>作用</h4><p>代码的复用和扩展。</p>\n<h4 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h4><p>通过抽象类中定义算法骨架，具体实现中对某些步骤进行实现。</p>\n<p>模板方法定义为final，可以避免被子类重写；需要重写的方法定义为abstract，可以强迫子类去实现。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AbstarctClass</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">templateMethod</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        method1();</span><br><span class=\"line\">        <span class=\"comment\">//...</span></span><br><span class=\"line\">        method2();</span><br><span class=\"line\">        <span class=\"comment\">//...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">method2</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">method1</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteClass1</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstarctClass</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">method2</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">method1</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteClass2</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstarctClass</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">method2</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">method1</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        AbstarctClass demo = <span class=\"keyword\">new</span> ConcreteClass1();</span><br><span class=\"line\">        demo.templateMethod();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"JDK中的实现\"><a href=\"#JDK中的实现\" class=\"headerlink\" title=\"JDK中的实现\"></a>JDK中的实现</h4><h5 id=\"集合\"><a href=\"#集合\" class=\"headerlink\" title=\"集合\"></a>集合</h5><p>在AbstractList中，addAll()方法提供了算法骨架，add()方法需要子类实现，虽然没有声明为abstract，但是如果子类不实现就直接抛出异常。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">addAll</span><span class=\"params\">(<span class=\"keyword\">int</span> index, Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class=\"line\">    rangeCheckForAdd(index);</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> modified = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (E e : c) &#123;</span><br><span class=\"line\">        add(index++, e);</span><br><span class=\"line\">        modified = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> modified;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> index, E element)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> UnsupportedOperationException();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"排序\"><a href=\"#排序\" class=\"headerlink\" title=\"排序\"></a>排序</h5><p>模板模式提供了框架的扩展点，让框架使用者，在不修改框架源码的情况下，基于扩展点定制化框架的功能。Java 中的 Collections 类的 sort() 函数也利用了模板模式的这个扩展特性。</p>\n<p>Collections.sort() 实现了对集合的排序。为了扩展性，它将其中“比较大小”这部分逻辑，委派给用户来实现。如果我们把比较大小这部分逻辑看作整个排序逻辑的其中一个步骤，那我们就可以把它看作模板模式。不过，从代码实现的角度来看，并不是模板模式的经典代码实现，而是基于 Callback 回调机制来实现的。</p>\n<p>A 类（Demo）事先注册某个函数 F（Comparator的具体实现） 到 B 类（Collections），A 类在调用 B 类的 P 函数（sort）的时候，B 类反过来调用 A 类注册给它的 F 函数。回调也具有复用和扩展的功能。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(List&lt;T&gt; list, Comparator&lt;? <span class=\"keyword\">super</span> T&gt; c)</span> </span>&#123;</span><br><span class=\"line\">    list.sort(c);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        List&lt;Student&gt; students = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        students.add(<span class=\"keyword\">new</span> Student(<span class=\"string\">&quot;Alice&quot;</span>, <span class=\"number\">19</span>, <span class=\"number\">89.0f</span>));</span><br><span class=\"line\">        students.add(<span class=\"keyword\">new</span> Student(<span class=\"string\">&quot;Peter&quot;</span>, <span class=\"number\">20</span>, <span class=\"number\">78.0f</span>));</span><br><span class=\"line\">        students.add(<span class=\"keyword\">new</span> Student(<span class=\"string\">&quot;Leo&quot;</span>, <span class=\"number\">18</span>, <span class=\"number\">99.0f</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        Collections.sort(students, <span class=\"keyword\">new</span> AgeAscComparator());</span><br><span class=\"line\">        print(students);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;-----------------------------------&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        Collections.sort(students, <span class=\"keyword\">new</span> NameAscComparator());</span><br><span class=\"line\">        print(students);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;-----------------------------------&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        Collections.sort(students, <span class=\"keyword\">new</span> ScoreDescComparator());</span><br><span class=\"line\">        print(students);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">(List&lt;Student&gt; students)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Student s : students) &#123;</span><br><span class=\"line\">            System.out.println(s.getName() + <span class=\"string\">&quot; &quot;</span> + s.getAge() + <span class=\"string\">&quot; &quot;</span> + s.getScore());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AgeAscComparator</span> <span class=\"keyword\">implements</span> <span class=\"title\">Comparator</span>&lt;<span class=\"title\">Student</span>&gt; </span>&#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compare</span><span class=\"params\">(Student o1, Student o2)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> o1.getAge() - o2.getAge();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NameAscComparator</span> <span class=\"keyword\">implements</span> <span class=\"title\">Comparator</span>&lt;<span class=\"title\">Student</span>&gt; </span>&#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compare</span><span class=\"params\">(Student o1, Student o2)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> o1.getName().compareTo(o2.getName());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ScoreDescComparator</span> <span class=\"keyword\">implements</span> <span class=\"title\">Comparator</span>&lt;<span class=\"title\">Student</span>&gt; </span>&#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compare</span><span class=\"params\">(Student o1, Student o2)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (Math.abs(o1.getScore() - o2.getScore()) &lt; <span class=\"number\">0.001</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (o1.getScore() &lt; o2.getScore()) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"HttpServlet\"><a href=\"#HttpServlet\" class=\"headerlink\" title=\"HttpServlet\"></a>HttpServlet</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloServlet</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doGet</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.doPost(req, resp);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doPost</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">    resp.getWriter().write(<span class=\"string\">&quot;Hello World.&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当我们在浏览器中输入网址（比如，<a href=\"http://127.0.0.1:8080/hello\">http://127.0.0.1:8080/hello</a> ）的时候，Servlet 容器会接收到相应的请求，并且根据 URL 和 Servlet 之间的映射关系，找到相应的 Servlet（HelloServlet），然后执行它的 service() 方法。service() 方法定义在父类 HttpServlet 中，它会调用 doGet() 或 doPost() 方法，然后输出数据（“Hello world”）到网页。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">service</span><span class=\"params\">(ServletRequest req, ServletResponse res)</span></span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"keyword\">throws</span> ServletException, IOException</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    HttpServletRequest  request;</span><br><span class=\"line\">    HttpServletResponse response;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!(req <span class=\"keyword\">instanceof</span> HttpServletRequest &amp;&amp;</span><br><span class=\"line\">            res <span class=\"keyword\">instanceof</span> HttpServletResponse)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ServletException(<span class=\"string\">&quot;non-HTTP request or response&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    request = (HttpServletRequest) req;</span><br><span class=\"line\">    response = (HttpServletResponse) res;</span><br><span class=\"line\">    service(request, response);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">service</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span></span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"keyword\">throws</span> ServletException, IOException</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    String method = req.getMethod();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (method.equals(METHOD_GET)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">long</span> lastModified = getLastModified(req);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (lastModified == -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// servlet doesn&#x27;t support if-modified-since, no reason</span></span><br><span class=\"line\">            <span class=\"comment\">// to go through further expensive logic</span></span><br><span class=\"line\">            doGet(req, resp);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">long</span> ifModifiedSince = req.getDateHeader(HEADER_IFMODSINCE);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (ifModifiedSince &lt; lastModified) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// If the servlet mod time is later, call doGet()</span></span><br><span class=\"line\">                <span class=\"comment\">// Round down to the nearest second for a proper compare</span></span><br><span class=\"line\">                <span class=\"comment\">// A ifModifiedSince of -1 will always be less</span></span><br><span class=\"line\">                maybeSetLastModified(resp, lastModified);</span><br><span class=\"line\">                doGet(req, resp);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                resp.setStatus(HttpServletResponse.SC_NOT_MODIFIED);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (method.equals(METHOD_HEAD)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">long</span> lastModified = getLastModified(req);</span><br><span class=\"line\">        maybeSetLastModified(resp, lastModified);</span><br><span class=\"line\">        doHead(req, resp);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (method.equals(METHOD_POST)) &#123;</span><br><span class=\"line\">        doPost(req, resp);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (method.equals(METHOD_PUT)) &#123;</span><br><span class=\"line\">        doPut(req, resp);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (method.equals(METHOD_DELETE)) &#123;</span><br><span class=\"line\">        doDelete(req, resp);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (method.equals(METHOD_OPTIONS)) &#123;</span><br><span class=\"line\">        doOptions(req,resp);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (method.equals(METHOD_TRACE)) &#123;</span><br><span class=\"line\">        doTrace(req,resp);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        String errMsg = lStrings.getString(<span class=\"string\">&quot;http.method_not_implemented&quot;</span>);</span><br><span class=\"line\">        Object[] errArgs = <span class=\"keyword\">new</span> Object[<span class=\"number\">1</span>];</span><br><span class=\"line\">        errArgs[<span class=\"number\">0</span>] = method;</span><br><span class=\"line\">        errMsg = MessageFormat.format(errMsg, errArgs);</span><br><span class=\"line\">        resp.sendError(HttpServletResponse.SC_NOT_IMPLEMENTED, errMsg);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>从上面的代码中我们可以看出，HttpServlet 的 service() 方法就是一个模板方法，它实现了整个 HTTP 请求的执行流程，doGet()、doPost() 是模板中可以由子类来定制的部分。实际上，这就相当于 Servlet 框架提供了一个扩展点（doGet()、doPost() 方法），让框架用户在不用修改 Servlet 框架源码的情况下，将业务代码通过扩展点镶嵌到框架中执行。</p>\n<h4 id=\"扩展\"><a href=\"#扩展\" class=\"headerlink\" title=\"扩展\"></a>扩展</h4><p>如果我们某个实现只用到其中的一个模板方法，也需要把所有抽象方法都实现一遍，怎么优化？</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> AbstractClass &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">templateMethod1</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">        method1();</span><br><span class=\"line\">        <span class=\"comment\">//...</span></span><br><span class=\"line\">        method2();</span><br><span class=\"line\">        <span class=\"comment\">//...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">templateMethod</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">        method3();</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">        method4();</span><br><span class=\"line\">        <span class=\"comment\">//...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">method1</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">method2</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">method3</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">method4</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>第一种：如果某个实现只用到一个模板方法，说明这个类不应该设置这么多的抽象方法，应该拆分成更细粒度的两个类；</p>\n<p>第二种：给不常用（不是每个子类都需要实现一遍）的抽象方法设置默认实现。</p>\n<hr>\n<h3 id=\"策略模式\"><a href=\"#策略模式\" class=\"headerlink\" title=\"策略模式\"></a>策略模式</h3><h4 id=\"定义-2\"><a href=\"#定义-2\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p>定义一族算法类，将每个算法分别封装起来，让它们可以互相替换。策略模式可以使算法的变化独立于使用它们的客户端。</p>\n<h4 id=\"作用-2\"><a href=\"#作用-2\" class=\"headerlink\" title=\"作用\"></a>作用</h4><p>对策略的定义、创建和使用进行解耦。</p>\n<h4 id=\"实现-1\"><a href=\"#实现-1\" class=\"headerlink\" title=\"实现\"></a>实现</h4><h5 id=\"普通实现\"><a href=\"#普通实现\" class=\"headerlink\" title=\"普通实现\"></a>普通实现</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">    String type = <span class=\"string\">&quot;A&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"string\">&#x27;A&#x27;</span>.equals(type)) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// A逻辑</span></span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"string\">&#x27;B&#x27;</span>.equals(type)) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// B逻辑</span></span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"策略的定义\"><a href=\"#策略的定义\" class=\"headerlink\" title=\"策略的定义\"></a>策略的定义</h5><p>包含一个策略接口和一组实现这个接口的策略类。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Strategy</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">algoInterface</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteStrartegyA</span> <span class=\"keyword\">implements</span> <span class=\"title\">Strategy</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">algoInterface</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//...具体算法</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;this is A&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteStrartegyB</span> <span class=\"keyword\">implements</span> <span class=\"title\">Strategy</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">algoInterface</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//...具体算法</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;this is B&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"策略的创建\"><a href=\"#策略的创建\" class=\"headerlink\" title=\"策略的创建\"></a>策略的创建</h5><p>一般在使用的时候，会通过类型（type）来判断创建哪个策略来进行使用；为了封装创建逻辑，我们把根据type创建策略的逻辑抽出来放到工厂类中。</p>\n<ul>\n<li><p>无状态策略</p>\n<p>如果策略对象可以被共享使用（单例），那么可以采用如下的工厂方法创建策略。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StrategyFactory</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Map&lt;String, Strategy&gt; strategies = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        strategies.put(<span class=\"string\">&quot;A&quot;</span>, <span class=\"keyword\">new</span> ConcreteStrartegyA());</span><br><span class=\"line\">        strategies.put(<span class=\"string\">&quot;B&quot;</span>, <span class=\"keyword\">new</span> ConcreteStrartegyB());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Strategy <span class=\"title\">getStrategy</span><span class=\"params\">(String type)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (type == <span class=\"keyword\">null</span> || type.isEmpty()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">&quot;type should not be empty.&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> strategies.get(type);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>有状态策略</p>\n<p>如果策略是有状态的，我们希望每次都获取的是新创建的策略对象，那么采用如下方式。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StrategyFactory2</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Strategy <span class=\"title\">getStrategy</span><span class=\"params\">(String type)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (type == <span class=\"keyword\">null</span> || type.isEmpty()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">&quot;type should not be empty.&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"string\">&quot;A&quot;</span>.equals(type)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ConcreteStrartegyA();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"string\">&quot;B&quot;</span>.equals(type)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ConcreteStrartegyB();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h5 id=\"策略的使用\"><a href=\"#策略的使用\" class=\"headerlink\" title=\"策略的使用\"></a>策略的使用</h5><p>根据传入的参数，运行时动态确定。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StrategyDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        String type = args[<span class=\"number\">0</span>];</span><br><span class=\"line\">        Strategy strategy = StrategyFactory.getStrategy(type);</span><br><span class=\"line\">        strategy.algoInterface();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"职责链模式\"><a href=\"#职责链模式\" class=\"headerlink\" title=\"职责链模式\"></a>职责链模式</h3><h4 id=\"定义-3\"><a href=\"#定义-3\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p>将请求的发送和接收解耦，让多个对象都有机会处理这个请求。将这些接收对象串成一条链，并沿着这条链传递这个请求，直到链上的某个接收对象能够处理它为止。</p>\n<p>多个处理器依次处理同一个请求，一个请求先经过A处理器处理，然后再把请求传递给B处理器，以此类推，形成一个链条。链条上的每个处理器处理各自的处理职责，所以叫做职责链模式。</p>\n<h4 id=\"实现1-1\"><a href=\"#实现1-1\" class=\"headerlink\" title=\"实现1\"></a>实现1</h4><p>链表方式实现。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Handler</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 下一级处理器</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> Handler successor;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setSuccessor</span><span class=\"params\">(Handler successor)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.successor = successor;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 结合模板模式</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">handle</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 当前处理器处理请求</span></span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> handled = doHandle();</span><br><span class=\"line\">        <span class=\"comment\">// 如果当前能处理，就不往下传递，如果还有下一处理器 并且 当前处理失败，交给下一处理器处理</span></span><br><span class=\"line\">        <span class=\"comment\">// 变体：如果想让所有处理器都处理一遍，修改此处的if条件即可</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (successor != <span class=\"keyword\">null</span> &amp;&amp; !handled) &#123;</span><br><span class=\"line\">            successor.handle();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 处理结果为false，当前不能处理，继续交给下一级处理器；如果为true，直接返回结果</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">boolean</span> <span class=\"title\">doHandle</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HandlerA</span> <span class=\"keyword\">extends</span> <span class=\"title\">Handler</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">boolean</span> <span class=\"title\">doHandle</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> handled = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        <span class=\"comment\">// ...当前处理器处理逻辑，如果当前处理成功，不需要下一级处理，返回true</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;A处理失败，向下传递...&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> handled;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HandlerB</span> <span class=\"keyword\">extends</span> <span class=\"title\">Handler</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">boolean</span> <span class=\"title\">doHandle</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> handled = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        <span class=\"comment\">// ...当前处理器处理逻辑，如果当前处理成功，不需要下一级处理，返回true</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;B处理成功...&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> handled;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HandlerChain</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Handler head;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Handler tail;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addHandler</span><span class=\"params\">(Handler handler)</span> </span>&#123;</span><br><span class=\"line\">        handler.setSuccessor(<span class=\"keyword\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (head == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            head = handler;</span><br><span class=\"line\">            tail = handler;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        tail.setSuccessor(handler);</span><br><span class=\"line\">        tail = handler;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handle</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (head != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            head.handle();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        HandlerChain chain = <span class=\"keyword\">new</span> HandlerChain();</span><br><span class=\"line\">        chain.addHandler(<span class=\"keyword\">new</span> HandlerA());</span><br><span class=\"line\">        chain.addHandler(<span class=\"keyword\">new</span> HandlerB());</span><br><span class=\"line\">        chain.handle();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"实现2-1\"><a href=\"#实现2-1\" class=\"headerlink\" title=\"实现2\"></a>实现2</h4><p>数组方式实现。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">IHandler</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">handle</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HandlerA</span> <span class=\"keyword\">implements</span> <span class=\"title\">IHandler</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">handle</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> handled = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        <span class=\"comment\">// ...当前处理器处理逻辑，如果当前处理成功，不需要下一级处理，返回true</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;A处理失败，向下传递...&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> handled;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HandlerB</span> <span class=\"keyword\">implements</span> <span class=\"title\">IHandler</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">handle</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> handled = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        <span class=\"comment\">// ...当前处理器处理逻辑，如果当前处理成功，不需要下一级处理，返回true</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;B处理失败，向下传递...&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> handled;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HandlerChain</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;IHandler&gt; handlers = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addHandler</span><span class=\"params\">(IHandler handler)</span> </span>&#123;</span><br><span class=\"line\">        handlers.add(handler);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handle</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (IHandler handler : handlers) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 当前可以成功处理，直接返回</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (handler.handle()) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        HandlerChain chain = <span class=\"keyword\">new</span> HandlerChain();</span><br><span class=\"line\">        chain.addHandler(<span class=\"keyword\">new</span> HandlerA());</span><br><span class=\"line\">        chain.addHandler(<span class=\"keyword\">new</span> HandlerB());</span><br><span class=\"line\">        chain.handle();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h4><p>敏感词过滤：对一段文本进行判断，如果里面涉及到敏感词，就禁止展示。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">SensitiveWorldFilter</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 敏感词过滤，如果当前文本含有敏感词，返回true</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> text</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">doFilter</span><span class=\"params\">(String text)</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PoliticalWordFilter</span> <span class=\"keyword\">implements</span> <span class=\"title\">SensitiveWorldFilter</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">doFilter</span><span class=\"params\">(String text)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (text.contains(<span class=\"string\">&quot;国家&quot;</span>) || text.contains(<span class=\"string\">&quot;党&quot;</span>)) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;当前文本敏感，为防止查水表，不予通过&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SexyWordFilter</span> <span class=\"keyword\">implements</span> <span class=\"title\">SensitiveWorldFilter</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">doFilter</span><span class=\"params\">(String text)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (text.contains(<span class=\"string\">&quot;性感&quot;</span>)) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;当前文本涉黄！&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SensitiveWorldFilterChain</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;SensitiveWorldFilter&gt; filters = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addFilter</span><span class=\"params\">(SensitiveWorldFilter filter)</span> </span>&#123;</span><br><span class=\"line\">        filters.add(filter);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">filter</span><span class=\"params\">(String text)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (SensitiveWorldFilter filter : filters) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (filter.doFilter(text)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 文本</span></span><br><span class=\"line\">        String text = <span class=\"string\">&quot;性感荷官，在线发牌&quot;</span>;</span><br><span class=\"line\">        String text2 = <span class=\"string\">&quot;好好学习，天天向上&quot;</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 敏感词过滤器</span></span><br><span class=\"line\">        SensitiveWorldFilterChain chain = <span class=\"keyword\">new</span> SensitiveWorldFilterChain();</span><br><span class=\"line\">        chain.addFilter(<span class=\"keyword\">new</span> SexyWordFilter());</span><br><span class=\"line\">        chain.addFilter(<span class=\"keyword\">new</span> PoliticalWordFilter());</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> illeagl = chain.filter(text);</span><br><span class=\"line\"><span class=\"comment\">//        boolean illeagl = chain.filter(text2);</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (illeagl) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;当前文本不合法！&quot;</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;当前文本合法&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"框架源码\"><a href=\"#框架源码\" class=\"headerlink\" title=\"框架源码\"></a>框架源码</h4><p><strong>Spring的HandlerInterceptor</strong></p>\n<p>日常使用的样子</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LogInterceptor</span> <span class=\"keyword\">implements</span> <span class=\"title\">HandlerInterceptor</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">preHandle</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;拦截客户端发送来的请求.&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>; <span class=\"comment\">// 继续后续的处理</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">postHandle</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;拦截发送给客户端的响应.&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">afterCompletion</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;这里总是被执行.&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://tva1.sinaimg.cn/large/0081Kckwly1gl19xi5u0lj322a0n6n5b.jpg\" alt=\"image-20201125114846433\"></p>\n<p>Spring Interceptor 底层是基于职责链模式实现的。其中，HandlerExecutionChain 类是职责链模式中的处理器链。</p>\n<p><a href=\"https://www.jianshu.com/p/8a20c547e245\">https://www.jianshu.com/p/8a20c547e245</a></p>\n<p>关键代码如下：</p>\n<p>在 Spring 框架中，DispatcherServlet 的 doDispatch() 方法来分发请求，它在真正的业务逻辑执行前后，执行 HandlerExecutionChain 中的 applyPreHandle() 和 applyPostHandle() 函数，用来实现拦截的功能。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doDispatch</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">    HttpServletRequest processedRequest = request;</span><br><span class=\"line\">    HandlerExecutionChain mappedHandler = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> multipartRequestParsed = <span class=\"keyword\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    WebAsyncManager asyncManager = WebAsyncUtils.getAsyncManager(request);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        ModelAndView mv = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        Exception dispatchException = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            processedRequest = checkMultipart(request);</span><br><span class=\"line\">            multipartRequestParsed = (processedRequest != request);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// Determine handler for the current request.</span></span><br><span class=\"line\">            mappedHandler = getHandler(processedRequest);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (mappedHandler == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                noHandlerFound(processedRequest, response);</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// Determine handler adapter for the current request.</span></span><br><span class=\"line\">            HandlerAdapter ha = getHandlerAdapter(mappedHandler.getHandler());</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// Process last-modified header, if supported by the handler.</span></span><br><span class=\"line\">            String method = request.getMethod();</span><br><span class=\"line\">            <span class=\"keyword\">boolean</span> isGet = <span class=\"string\">&quot;GET&quot;</span>.equals(method);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (isGet || <span class=\"string\">&quot;HEAD&quot;</span>.equals(method)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">long</span> lastModified = ha.getLastModified(request, mappedHandler.getHandler());</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"keyword\">new</span> ServletWebRequest(request, response).checkNotModified(lastModified) &amp;&amp; isGet) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">            <span class=\"comment\">// 请求处理</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!mappedHandler.applyPreHandle(processedRequest, response)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// Actually invoke the handler.</span></span><br><span class=\"line\">            mv = ha.handle(processedRequest, response, mappedHandler.getHandler());</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            applyDefaultViewName(processedRequest, mv);</span><br><span class=\"line\">            <span class=\"comment\">// 响应处理</span></span><br><span class=\"line\">            mappedHandler.applyPostHandle(processedRequest, response, mv);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">catch</span> (Exception ex) &#123;</span><br><span class=\"line\">            dispatchException = ex;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">catch</span> (Throwable err) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// As of 4.3, we&#x27;re processing Errors thrown from handler methods as well,</span></span><br><span class=\"line\">            <span class=\"comment\">// making them available for @ExceptionHandler methods and other scenarios.</span></span><br><span class=\"line\">            dispatchException = <span class=\"keyword\">new</span> NestedServletException(<span class=\"string\">&quot;Handler dispatch failed&quot;</span>, err);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        processDispatchResult(processedRequest, response, mappedHandler, mv, dispatchException);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">catch</span> (Exception ex) &#123;</span><br><span class=\"line\">        triggerAfterCompletion(processedRequest, response, mappedHandler, ex);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">catch</span> (Throwable err) &#123;</span><br><span class=\"line\">        triggerAfterCompletion(processedRequest, response, mappedHandler,</span><br><span class=\"line\">                               <span class=\"keyword\">new</span> NestedServletException(<span class=\"string\">&quot;Handler processing failed&quot;</span>, err));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// Instead of postHandle and afterCompletion</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (mappedHandler != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 总是执行</span></span><br><span class=\"line\">                mappedHandler.applyAfterConcurrentHandlingStarted(processedRequest, response);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// Clean up any resources used by a multipart request.</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (multipartRequestParsed) &#123;</span><br><span class=\"line\">                cleanupMultipart(processedRequest);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>HandlerExecutionChain的关键代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HandlerExecutionChain</span> </span>&#123;</span><br><span class=\"line\"> <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Object handler;</span><br><span class=\"line\"> <span class=\"keyword\">private</span> HandlerInterceptor[] interceptors;</span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addInterceptor</span><span class=\"params\">(HandlerInterceptor interceptor)</span> </span>&#123;</span><br><span class=\"line\">  initInterceptorList().add(interceptor);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">applyPreHandle</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">  HandlerInterceptor[] interceptors = getInterceptors();</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!ObjectUtils.isEmpty(interceptors)) &#123;</span><br><span class=\"line\">   <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; interceptors.length; i++) &#123;</span><br><span class=\"line\">    HandlerInterceptor interceptor = interceptors[i];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!interceptor.preHandle(request, response, <span class=\"keyword\">this</span>.handler)) &#123;</span><br><span class=\"line\">     triggerAfterCompletion(request, response, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">     <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">applyPostHandle</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, ModelAndView mv)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">  HandlerInterceptor[] interceptors = getInterceptors();</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!ObjectUtils.isEmpty(interceptors)) &#123;</span><br><span class=\"line\">   <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = interceptors.length - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">    HandlerInterceptor interceptor = interceptors[i];</span><br><span class=\"line\">    interceptor.postHandle(request, response, <span class=\"keyword\">this</span>.handler, mv);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">triggerAfterCompletion</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, Exception ex)</span></span></span><br><span class=\"line\"><span class=\"function\">   <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">  HandlerInterceptor[] interceptors = getInterceptors();</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!ObjectUtils.isEmpty(interceptors)) &#123;</span><br><span class=\"line\">   <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"keyword\">this</span>.interceptorIndex; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">    HandlerInterceptor interceptor = interceptors[i];</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">     interceptor.afterCompletion(request, response, <span class=\"keyword\">this</span>.handler, ex);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Throwable ex2) &#123;</span><br><span class=\"line\">     logger.error(<span class=\"string\">&quot;HandlerInterceptor.afterCompletion threw exception&quot;</span>, ex2);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<hr>\n<h3 id=\"状态模式\"><a href=\"#状态模式\" class=\"headerlink\" title=\"状态模式\"></a>状态模式</h3><h5 id=\"定义-4\"><a href=\"#定义-4\" class=\"headerlink\" title=\"定义\"></a>定义</h5><h5 id=\"有限状态机\"><a href=\"#有限状态机\" class=\"headerlink\" title=\"有限状态机\"></a>有限状态机</h5><p>状态机有三个组成部分：状态、事件、动作。其中，事件也被称为转移条件。事件触发状态的转移及动作的执行。不过动作不是必须的，也可能只是转变状态，不执行任何动作。</p>\n<h4 id=\"示例-1\"><a href=\"#示例-1\" class=\"headerlink\" title=\"示例\"></a>示例</h4><p><strong>超级马里奥游戏</strong>：</p>\n<p>马里奥有多种形态，刚出生是小马里奥（Small Mario），可以进化成超级马里奥（Super Mario）、火焰马里奥（Fire Mario）、斗篷马里奥（Cape Mario）等等。    </p>\n<p>马里奥遇到不同的事件可以进行形态转变，并进行积分的增减。</p>\n<img src=\"https://tva1.sinaimg.cn/large/0081Kckwly1gk55y3hl4qj31310u0tj5.jpg\" alt=\"image-20201028171249300\"  />\n\n<h4 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h4><h5 id=\"方式1\"><a href=\"#方式1\" class=\"headerlink\" title=\"方式1\"></a>方式1</h5><p><strong>分支逻辑法</strong></p>\n<p>定义一个状态枚举类，一个状态机类，状态机类中提供4个方法，分别是：吃了蘑菇，获得斗篷，获得火焰，遇到怪物。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义状态</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> State &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    SMALL(<span class=\"number\">0</span>),</span><br><span class=\"line\">    SUPER(<span class=\"number\">1</span>),</span><br><span class=\"line\">    FIRE(<span class=\"number\">2</span>),</span><br><span class=\"line\">    CAPE(<span class=\"number\">3</span>),</span><br><span class=\"line\">    ;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> value;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">State</span><span class=\"params\">(<span class=\"keyword\">int</span> value)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.value = value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getValue</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 状态机</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MarioStateMachine</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> score;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> State currentState;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MarioStateMachine</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.score = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.currentState = State.SMALL;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">obtainMushRoom</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (currentState.equals(State.SMALL)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.score += <span class=\"number\">100</span>;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.currentState = State.SUPER;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">obtainCape</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (currentState.equals(State.SMALL) || currentState.equals(State.SUPER)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.score += <span class=\"number\">200</span>;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.currentState = State.CAPE;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">obtainFireFlower</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (currentState.equals(State.SMALL) || currentState.equals(State.SUPER)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.score += <span class=\"number\">300</span>;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.currentState = State.FIRE;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">meetMonster</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (currentState.equals(State.SUPER)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.score -= <span class=\"number\">100</span>;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.currentState = State.SMALL;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (currentState.equals(State.CAPE)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.score -= <span class=\"number\">200</span>;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.currentState = State.SMALL;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (currentState.equals(State.FIRE)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.score -= <span class=\"number\">300</span>;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.currentState = State.SMALL;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getScore</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.score;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> State <span class=\"title\">getCurrentState</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.currentState;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ApplicationDemo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 游戏开始</span></span><br><span class=\"line\">        MarioStateMachine mario = <span class=\"keyword\">new</span> MarioStateMachine();</span><br><span class=\"line\">        <span class=\"comment\">// 吃到蘑菇</span></span><br><span class=\"line\">        mario.obtainMushRoom();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> score = mario.getScore();</span><br><span class=\"line\">        State state = mario.getCurrentState();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;mario score：&quot;</span> + score + <span class=\"string\">&quot;; state: &quot;</span> + state);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>对于简单的状态机来说，分支逻辑这种实现方式是可以接受的。但是，对于复杂的状态机来说，这种实现方式极易漏写或者错写某个状态转移。除此之外，代码中充斥着大量的 if-else 或者 switch-case 分支判断逻辑，可读性和可维护性都很差。如果哪天修改了状态机中的某个状态转移，我们要在冗长的分支逻辑中找到对应的代码进行修改，很容易改错，引入 bug。</p>\n<h5 id=\"方式2\"><a href=\"#方式2\" class=\"headerlink\" title=\"方式2\"></a>方式2</h5><p><strong>查表法</strong></p>\n<p>使用二维数组表示状态和事件，如下表，第一维表示当前状态，第二维表示事件，值表示当前状态经过事件后，转移到的新状态及执行的动作。</p>\n<img src=\"https://tva1.sinaimg.cn/large/0081Kckwly1gk56dpaaawj31360don25.jpg\" alt=\"image-20201028172751310\"  />\n\n<p>定义一个事件类，事件类和State状态类可以组合成为上述的表格。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义状态</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> State &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    SMALL(<span class=\"number\">0</span>),</span><br><span class=\"line\">    SUPER(<span class=\"number\">1</span>),</span><br><span class=\"line\">    FIRE(<span class=\"number\">2</span>),</span><br><span class=\"line\">    CAPE(<span class=\"number\">3</span>),</span><br><span class=\"line\">    ;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> value;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">State</span><span class=\"params\">(<span class=\"keyword\">int</span> value)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.value = value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getValue</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> Event &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    GOT_MUSHROOM(<span class=\"number\">0</span>),</span><br><span class=\"line\">    GOT_CAPE(<span class=\"number\">1</span>),</span><br><span class=\"line\">    GOT_FIRE(<span class=\"number\">2</span>),</span><br><span class=\"line\">    MET_MONSTER(<span class=\"number\">3</span>),</span><br><span class=\"line\">    ;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> value;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Event</span><span class=\"params\">(<span class=\"keyword\">int</span> value)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.value = value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getValue</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>定义状态机，横坐标为State的value，纵坐标为Event的value。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MarioStateMachine</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> score;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> State currentState;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 状态值</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> State[][] transitionTable = &#123;</span><br><span class=\"line\">            &#123;State.SUPER, State.CAPE, State.FIRE, State.SMALL&#125;,</span><br><span class=\"line\">            &#123;State.SUPER, State.CAPE, State.FIRE, State.SMALL&#125;,</span><br><span class=\"line\">            &#123;State.CAPE, State.CAPE, State.CAPE, State.SMALL&#125;,</span><br><span class=\"line\">            &#123;State.FIRE, State.FIRE, State.FIRE, State.SMALL&#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 执行动作</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span>[][] actionTable = &#123;</span><br><span class=\"line\">            &#123;+<span class=\"number\">100</span>, +<span class=\"number\">200</span>, +<span class=\"number\">300</span>, +<span class=\"number\">0</span>&#125;,</span><br><span class=\"line\">            &#123;+<span class=\"number\">0</span>, +<span class=\"number\">200</span>, +<span class=\"number\">300</span>, -<span class=\"number\">100</span>&#125;,</span><br><span class=\"line\">            &#123;+<span class=\"number\">0</span>, +<span class=\"number\">0</span>, +<span class=\"number\">0</span>, -<span class=\"number\">200</span>&#125;,</span><br><span class=\"line\">            &#123;+<span class=\"number\">0</span>, +<span class=\"number\">0</span>, +<span class=\"number\">0</span>, -<span class=\"number\">300</span>&#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MarioStateMachine</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.score = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.currentState = State.SMALL;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">obtainMushRoom</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        executeEvent(Event.GOT_MUSHROOM);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">obtainCape</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        executeEvent(Event.GOT_CAPE);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">obtainFireFlow</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        executeEvent(Event.GOT_FIRE);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">meetMonster</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        executeEvent(Event.MET_MONSTER);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">executeEvent</span><span class=\"params\">(Event event)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> stateValue = <span class=\"keyword\">this</span>.currentState.getValue();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> eventValue = event.getValue();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.currentState = transitionTable[stateValue][eventValue];</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.score += actionTable[stateValue][eventValue];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getScore</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> score;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> State <span class=\"title\">getCurrentState</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> currentState;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>相对于分支逻辑的实现方式，查表法的代码实现更加清晰，可读性和可维护性更好。当修改状态机时，我们只需要修改 transitionTable 和 actionTable 两个二维数组即可。实际上，如果我们把这两个二维数组存储在配置文件中，当需要修改状态机时，我们甚至可以不修改任何代码，只需要修改配置文件就可以了。</p>\n<p><strong>查表法局限性</strong>：</p>\n<p>这个例子中，状态经过事件后，执行的动作只是得分的加减，如果动作比较复杂，例如，数据库入库，发送邮件，调用不同接口等等，就没法用简单的二维数组来表示了。</p>\n<h5 id=\"方式3\"><a href=\"#方式3\" class=\"headerlink\" title=\"方式3\"></a>方式3</h5><p><strong>状态模式</strong></p>\n<p>状态模式通过将事件触发的状态转移和动作执行，拆分到不同的状态类中，来避免分支判断逻辑。</p>\n<p>定义一个状态接口，接口就是状态，接口中的每个方法就是一种事件。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">IMario</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\">State <span class=\"title\">getName</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">obtainMushRoom</span><span class=\"params\">(MarioStateMachine stateMachine)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">obtainCape</span><span class=\"params\">(MarioStateMachine stateMachine)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">obtainFireFlow</span><span class=\"params\">(MarioStateMachine stateMachine)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">meetMonster</span><span class=\"params\">(MarioStateMachine stateMachine)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>每个状态接口的实现类就是具体的状态类（小马里奥类、超级马里奥类等）。</p>\n<p>因为状态类中不包含任何成员变量，所以我们考虑把状态类设计成单例的。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SmallMario</span> <span class=\"keyword\">implements</span> <span class=\"title\">IMario</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> SmallMario instance = <span class=\"keyword\">new</span> SmallMario();</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">SmallMario</span><span class=\"params\">()</span> </span>&#123;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> SmallMario <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> State <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> State.SMALL;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">obtainMushRoom</span><span class=\"params\">(MarioStateMachine stateMachine)</span> </span>&#123;</span><br><span class=\"line\">        stateMachine.setCurrentState(SuperMario.getInstance());</span><br><span class=\"line\">        stateMachine.setScore(stateMachine.getScore() + <span class=\"number\">100</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">obtainCape</span><span class=\"params\">(MarioStateMachine stateMachine)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">obtainFireFlow</span><span class=\"params\">(MarioStateMachine stateMachine)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">meetMonster</span><span class=\"params\">(MarioStateMachine stateMachine)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SuperMario</span> <span class=\"keyword\">implements</span> <span class=\"title\">IMario</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> SuperMario instance = <span class=\"keyword\">new</span> SuperMario();</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">SuperMario</span><span class=\"params\">()</span> </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> SuperMario <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> State <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> State.SUPER;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">obtainMushRoom</span><span class=\"params\">(MarioStateMachine stateMachine)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">obtainCape</span><span class=\"params\">(MarioStateMachine stateMachine)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">obtainFireFlow</span><span class=\"params\">(MarioStateMachine stateMachine)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">meetMonster</span><span class=\"params\">(MarioStateMachine stateMachine)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>状态机</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MarioStateMachine</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> score;</span><br><span class=\"line\">    <span class=\"comment\">// 用接口表示状态</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> IMario currentState;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MarioStateMachine</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.score = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.currentState = SmallMario.getInstance();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setCurrentState</span><span class=\"params\">(IMario currentState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.currentState = currentState;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">obtainMushRoom</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.currentState.obtainMushRoom(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">obtainCape</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.currentState.obtainCape(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">obtainFireFlow</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.currentState.obtainFireFlow(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">meetMonster</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.currentState.meetMonster(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getScore</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> score;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setScore</span><span class=\"params\">(<span class=\"keyword\">int</span> score)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.score = score;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> IMario <span class=\"title\">getCurrentState</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> currentState;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>使用方式</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ApplicationDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        MarioStateMachine mario = <span class=\"keyword\">new</span> MarioStateMachine();</span><br><span class=\"line\">        mario.obtainMushRoom();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> score = mario.getScore();</span><br><span class=\"line\">        State state = mario.getCurrentState().getName();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;mario score：&quot;</span> + score + <span class=\"string\">&quot;; state: &quot;</span> + state);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>状态模式中，每个具体的状态类只需要关心自己遇到不同事件后流转到的下一个状态以及得分值的增减。</p>\n<p>实际上，像游戏这种比较复杂的状态机，包含的状态比较多，优先推荐使用查表法，而状态模式会引入非常多的状态类，会导致代码比较难维护。相反，像电商下单、外卖下单这种类型的状态机，它们的状态并不多，状态转移也比较简单，但事件触发执行的动作包含的业务逻辑可能会比较复杂，所以，更加推荐使用状态模式来实现。</p>\n<hr>\n<h3 id=\"迭代器模式\"><a href=\"#迭代器模式\" class=\"headerlink\" title=\"迭代器模式\"></a>迭代器模式</h3><h4 id=\"定义-5\"><a href=\"#定义-5\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p>迭代器模式又叫游标模式，是用来遍历容器的；</p>\n<p>一个完整的迭代器模式一般会涉及<strong>容器</strong>和<strong>容器迭代器</strong>两部分。为了达到基于接口而非实现编程的目的，容器又包含容器接口、容器实现类，迭代器又包含迭代器接口、迭代器实现类。</p>\n<img src=\"https://tva1.sinaimg.cn/large/008i3skNgy1gwh9i7svhpj312s0isgms.jpg\" alt=\"image-20201028202346968\"  />\n\n<p>假设某个新的编程语言的基础类库中，还没有提供线性容器对应的迭代器，需要我们从零开始开发。</p>\n<h4 id=\"代码实现-1\"><a href=\"#代码实现-1\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h4><h5 id=\"简单版\"><a href=\"#简单版\" class=\"headerlink\" title=\"简单版\"></a>简单版</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Iterator</span>&lt;<span class=\"title\">E</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">hasNext</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">next</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\">E <span class=\"title\">currentItem</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ArrayIterator</span>&lt;<span class=\"title\">E</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">Iterator</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 游标</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> curstor;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> ArrayList&lt;E&gt; arrayList;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ArrayIterator</span><span class=\"params\">(ArrayList&lt;E&gt; arrayList)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.curstor = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.arrayList = arrayList;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hasNext</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> curstor != arrayList.size();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">next</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        curstor++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">currentItem</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (curstor &gt;= arrayList.size()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NoSuchElementException();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> arrayList.get(curstor);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        ArrayList&lt;String&gt; name = <span class=\"keyword\">new</span> ArrayList&lt;String&gt;();</span><br><span class=\"line\">        name.add(<span class=\"string\">&quot;张三&quot;</span>);</span><br><span class=\"line\">        name.add(<span class=\"string\">&quot;李四&quot;</span>);</span><br><span class=\"line\">        name.add(<span class=\"string\">&quot;王五&quot;</span>);</span><br><span class=\"line\">        Iterator&lt;String&gt; iterator = <span class=\"keyword\">new</span> ArrayIterator&lt;String&gt;(name);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (iterator.hasNext()) &#123;</span><br><span class=\"line\">            System.out.println(iterator.currentItem());</span><br><span class=\"line\">            iterator.next();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"优化\"><a href=\"#优化\" class=\"headerlink\" title=\"优化\"></a>优化</h5><p>在上面的代码实现中，我们需要将待遍历的容器对象，通过构造函数传递给迭代器类。为了封装迭代器的创建细节，我们可以在容器中定义iterator()方法创建迭代器；为实现基于接口编程，我们在List接口中定义这个方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">List</span>&lt;<span class=\"title\">E</span>&gt; </span>&#123;</span><br><span class=\"line\">  <span class=\"function\">Iterator <span class=\"title\">iterator</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">  <span class=\"comment\">//...省略其他接口函数...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ArrayList</span>&lt;<span class=\"title\">E</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">List</span>&lt;<span class=\"title\">E</span>&gt; </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//...</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> Iterator <span class=\"title\">iterator</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ArrayIterator(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//...省略其他代码</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    List&lt;String&gt; names = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">    names.add(<span class=\"string\">&quot;aa&quot;</span>);</span><br><span class=\"line\">    names.add(<span class=\"string\">&quot;bb&quot;</span>);</span><br><span class=\"line\">    names.add(<span class=\"string\">&quot;cc&quot;</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    Iterator&lt;String&gt; iterator = names.iterator();</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (iterator.hasNext()) &#123;</span><br><span class=\"line\">      System.out.println(iterator.currentItem());</span><br><span class=\"line\">      iterator.next();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>迭代器的实现思路总结：迭代器中需要定义 hasNext()、currentItem()、next() 三个最基本的方法。待遍历的容器对象通过依赖注入传递到迭代器类中。容器通过 iterator() 方法来创建迭代器。</p>\n<img src=\"https://tva1.sinaimg.cn/large/008i3skNgy1gwh9io7x0ij315k0o0gnc.jpg\" alt=\"image-20201117205945886\"  />\n\n<h4 id=\"迭代器模式的优势\"><a href=\"#迭代器模式的优势\" class=\"headerlink\" title=\"迭代器模式的优势\"></a>迭代器模式的优势</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; names = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">names.add(<span class=\"string\">&quot;xzg&quot;</span>);</span><br><span class=\"line\">names.add(<span class=\"string\">&quot;wang&quot;</span>);</span><br><span class=\"line\">names.add(<span class=\"string\">&quot;zheng&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 第一种遍历方式：for循环</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; names.size(); i++) &#123;</span><br><span class=\"line\">  System.out.print(names.get(i) + <span class=\"string\">&quot;,&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 第二种遍历方式：foreach循环</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (String name : names) &#123;</span><br><span class=\"line\">  System.out.print(name + <span class=\"string\">&quot;,&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 第三种遍历方式：迭代器遍历</span></span><br><span class=\"line\">Iterator&lt;String&gt; iterator = names.iterator();</span><br><span class=\"line\"><span class=\"keyword\">while</span> (iterator.hasNext()) &#123;</span><br><span class=\"line\">  System.out.print(iterator.next() + <span class=\"string\">&quot;,&quot;</span>);<span class=\"comment\">//Java中的迭代器接口，next()既移动游标又返回数据</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>对遍历方式比较简单的线性数据结构，直接使用 for 循环来遍历就足够了。但是，对于复杂的数据结构（比如树、图）来说，有各种复杂的遍历方式。比如，树有前中后序、按层遍历，图有深度优先、广度优先遍历等等。如果由客户端代码来实现这些遍历算法，势必增加开发成本，而且容易写错。如果将这部分遍历的逻辑写到容器类中，也会导致容器类代码的复杂性；</p>\n<p>将游标指向的当前位置等信息，存储在迭代器类中，每个迭代器独享游标信息。这样，我们就可以创建多个不同的迭代器，同时对同一个容器进行遍历而互不影响；</p>\n<p>容器和迭代器都提供了抽象的接口，方便我们在开发的时候，基于接口而非具体的实现编程。当需要切换新的遍历算法的时候，比如，从前往后遍历链表切换成从后往前遍历链表，客户端代码只需要将迭代器类从 LinkedIterator 切换为 ReversedLinkedIterator 即可，其他代码都不需要修改。除此之外，添加新的遍历算法，我们只需要扩展新的迭代器类，也更符合开闭原则。</p>\n<h4 id=\"遍历的同时增删元素\"><a href=\"#遍历的同时增删元素\" class=\"headerlink\" title=\"遍历的同时增删元素\"></a>遍历的同时增删元素</h4><p><strong>删除元素</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RemoveDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        ArrayList&lt;String&gt; names = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        names.add(<span class=\"string\">&quot;a&quot;</span>);</span><br><span class=\"line\">        names.add(<span class=\"string\">&quot;b&quot;</span>);</span><br><span class=\"line\">        names.add(<span class=\"string\">&quot;c&quot;</span>);</span><br><span class=\"line\">        names.add(<span class=\"string\">&quot;d&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        Iterator&lt;String&gt; iterator = <span class=\"keyword\">new</span> ArrayIterator&lt;String&gt;(names);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 游标指向b时，移除a</span></span><br><span class=\"line\">        iterator.next();</span><br><span class=\"line\">        names.remove(<span class=\"string\">&quot;a&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<img src=\"https://tva1.sinaimg.cn/large/0081Kckwly1gl1gk4i1d1j30pi0mw0ux.jpg\" alt=\"image-20201125153805528\"  />\n\n<p>在遍历过程删除元素，结果是不可预期的，有时候有问题，有时候没问题，要视删除元素的位置而定。</p>\n<p><strong>增加元素</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AddDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        ArrayList&lt;String&gt; names = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        names.add(<span class=\"string\">&quot;a&quot;</span>);</span><br><span class=\"line\">        names.add(<span class=\"string\">&quot;b&quot;</span>);</span><br><span class=\"line\">        names.add(<span class=\"string\">&quot;c&quot;</span>);</span><br><span class=\"line\">        names.add(<span class=\"string\">&quot;d&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        Iterator&lt;String&gt; iterator = <span class=\"keyword\">new</span> ArrayIterator&lt;String&gt;(names);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 游标指向b时，将x插入下标为0的位置</span></span><br><span class=\"line\">        iterator.next();</span><br><span class=\"line\">        names.add(<span class=\"number\">0</span>, <span class=\"string\">&quot;x&quot;</span>);</span><br><span class=\"line\">      </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<img src=\"https://tva1.sinaimg.cn/large/0081Kckwly1gl1gwvvbw6j30pg0jw40l.jpg\" alt=\"image-20201125155021826\"  />\n\n<p>跟删除情况类似，如果我们在游标的后面添加元素，就不会存在任何问题。所以，在遍历的同时添加集合元素也是一种不可预期行为。</p>\n<p><strong>如何应对遍历时改变集合导致的不可预期行为</strong></p>\n<p>迭代器要在遍历的元素的时候判断集合是否有增删改数据，如果有就报错。</p>\n<h4 id=\"JDK-ArrayList中的迭代器\"><a href=\"#JDK-ArrayList中的迭代器\" class=\"headerlink\" title=\"JDK ArrayList中的迭代器\"></a>JDK ArrayList中的迭代器</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ArrayList</span>&lt;<span class=\"title\">E</span>&gt; <span class=\"keyword\">extends</span> <span class=\"title\">AbstractList</span>&lt;<span class=\"title\">E</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\">        <span class=\"keyword\">implements</span> <span class=\"title\">List</span>&lt;<span class=\"title\">E</span>&gt;, <span class=\"title\">RandomAccess</span>, <span class=\"title\">Cloneable</span>, <span class=\"title\">java</span>.<span class=\"title\">io</span>.<span class=\"title\">Serializable</span> </span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Iterator&lt;E&gt; <span class=\"title\">iterator</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    \t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Itr();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * An optimized version of AbstractList.Itr</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Itr</span> <span class=\"keyword\">implements</span> <span class=\"title\">Iterator</span>&lt;<span class=\"title\">E</span>&gt; </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> cursor;       <span class=\"comment\">// index of next element to return</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> lastRet = -<span class=\"number\">1</span>; <span class=\"comment\">// index of last element returned; -1 if no such</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> expectedModCount = modCount;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hasNext</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> cursor != size;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">next</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            checkForComodification();</span><br><span class=\"line\">            <span class=\"keyword\">int</span> i = cursor;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i &gt;= size)</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NoSuchElementException();</span><br><span class=\"line\">            Object[] elementData = ArrayList.<span class=\"keyword\">this</span>.elementData;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i &gt;= elementData.length)</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ConcurrentModificationException();</span><br><span class=\"line\">            cursor = i + <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> (E) elementData[lastRet = i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">remove</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (lastRet &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException();</span><br><span class=\"line\">            checkForComodification();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                ArrayList.<span class=\"keyword\">this</span>.remove(lastRet);</span><br><span class=\"line\">                cursor = lastRet;</span><br><span class=\"line\">                lastRet = -<span class=\"number\">1</span>;</span><br><span class=\"line\">                expectedModCount = modCount;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (IndexOutOfBoundsException ex) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ConcurrentModificationException();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">checkForComodification</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (modCount != expectedModCount)</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ConcurrentModificationException();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"访问者模式\"><a href=\"#访问者模式\" class=\"headerlink\" title=\"访问者模式\"></a>访问者模式</h3><h4 id=\"寻源\"><a href=\"#寻源\" class=\"headerlink\" title=\"寻源\"></a>寻源</h4><p>假设我们从网站上爬取了很多资源文件，它们的格式有三种：PDF、PPT、Word。我们现在要开发一个工具来处理这批资源文件。这个工具的其中一个功能是，把这些资源文件中的文本内容抽取出来放到 txt 文件中。</p>\n<h5 id=\"实现1-2\"><a href=\"#实现1-2\" class=\"headerlink\" title=\"实现1\"></a>实现1</h5><p>ResourceFile 是一个抽象类，包含一个抽象函数 extract2txt()。PdfFile、PPTFile、WordFile 都继承 ResourceFile 类，并且重写了 extract2txt() 函数。在 ToolApplication 中，我们可以利用多态特性，根据对象的实际类型，来决定执行哪个方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ResourceFile</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">protected</span> String filePath;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ResourceFile</span><span class=\"params\">(String filePath)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.filePath = filePath;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">extract2txt</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PPTFile</span> <span class=\"keyword\">extends</span> <span class=\"title\">ResourceFile</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">PPTFile</span><span class=\"params\">(String filePath)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(filePath);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">extract2txt</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//...省略一大坨从PPT中抽取文本的代码...</span></span><br><span class=\"line\">    <span class=\"comment\">//...将抽取出来的文本保存在跟filePath同名的.txt文件中...</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;Extract PPT.&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PdfFile</span> <span class=\"keyword\">extends</span> <span class=\"title\">ResourceFile</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">PdfFile</span><span class=\"params\">(String filePath)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(filePath);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">extract2txt</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;Extract PDF.&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WordFile</span> <span class=\"keyword\">extends</span> <span class=\"title\">ResourceFile</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">WordFile</span><span class=\"params\">(String filePath)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(filePath);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">extract2txt</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;Extract WORD.&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 运行结果是：</span></span><br><span class=\"line\"><span class=\"comment\">// Extract PDF.</span></span><br><span class=\"line\"><span class=\"comment\">// Extract WORD.</span></span><br><span class=\"line\"><span class=\"comment\">// Extract PPT.</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ToolApplication</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    List&lt;ResourceFile&gt; resourceFiles = listAllResourceFiles(args[<span class=\"number\">0</span>]);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (ResourceFile resourceFile : resourceFiles) &#123;</span><br><span class=\"line\">      resourceFile.extract2txt();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> List&lt;ResourceFile&gt; <span class=\"title\">listAllResourceFiles</span><span class=\"params\">(String resourceDirectory)</span> </span>&#123;</span><br><span class=\"line\">    List&lt;ResourceFile&gt; resourceFiles = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">    <span class=\"comment\">//...根据后缀(pdf/ppt/word)由工厂方法创建不同的类对象(PdfFile/PPTFile/WordFile)</span></span><br><span class=\"line\">    resourceFiles.add(<span class=\"keyword\">new</span> PdfFile(<span class=\"string\">&quot;a.pdf&quot;</span>));</span><br><span class=\"line\">    resourceFiles.add(<span class=\"keyword\">new</span> WordFile(<span class=\"string\">&quot;b.word&quot;</span>));</span><br><span class=\"line\">    resourceFiles.add(<span class=\"keyword\">new</span> PPTFile(<span class=\"string\">&quot;c.ppt&quot;</span>));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> resourceFiles;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果工具的功能不停地扩展，不仅要能抽取文本内容，还要支持压缩、提取文件元信息（文件名、大小、更新时间等等）构建索引等一系列的功能，那如果我们继续按照上面的实现思路，就会存在这样几个问题：</p>\n<p>违背开闭原则，添加一个新的功能，所有类的代码都要修改；</p>\n<p>虽然功能增多，每个类的代码都不断膨胀，可读性和可维护性都变差了；</p>\n<p>把所有比较上层的业务逻辑都耦合到 PdfFile、PPTFile、WordFile 类中，导致这些类的职责不够单一，变成了大杂烩。</p>\n<p><strong>把业务操作和具体数据解耦，设计成独立的类。</strong></p>\n<h5 id=\"实现2-2\"><a href=\"#实现2-2\" class=\"headerlink\" title=\"实现2\"></a>实现2</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ResourceFile</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">protected</span> String filePath;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ResourceFile</span><span class=\"params\">(String filePath)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.filePath = filePath;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PdfFile</span> <span class=\"keyword\">extends</span> <span class=\"title\">ResourceFile</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">PdfFile</span><span class=\"params\">(String filePath)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(filePath);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//...PPTFile、WordFile代码省略...</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Extractor</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">extract2txt</span><span class=\"params\">(PPTFile pptFile)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;Extract PPT.&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">extract2txt</span><span class=\"params\">(PdfFile pdfFile)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;Extract PDF.&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">extract2txt</span><span class=\"params\">(WordFile wordFile)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;Extract WORD.&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ToolApplication</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    Extractor extractor = <span class=\"keyword\">new</span> Extractor();</span><br><span class=\"line\">    List&lt;ResourceFile&gt; resourceFiles = listAllResourceFiles(args[<span class=\"number\">0</span>]);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (ResourceFile resourceFile : resourceFiles) &#123;</span><br><span class=\"line\">      extractor.extract2txt(resourceFile);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> List&lt;ResourceFile&gt; <span class=\"title\">listAllResourceFiles</span><span class=\"params\">(String resourceDirectory)</span> </span>&#123;</span><br><span class=\"line\">    List&lt;ResourceFile&gt; resourceFiles = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">    <span class=\"comment\">//...根据后缀(pdf/ppt/word)由工厂方法创建不同的类对象(PdfFile/PPTFile/WordFile)</span></span><br><span class=\"line\">    resourceFiles.add(<span class=\"keyword\">new</span> PdfFile(<span class=\"string\">&quot;a.pdf&quot;</span>));</span><br><span class=\"line\">    resourceFiles.add(<span class=\"keyword\">new</span> WordFile(<span class=\"string\">&quot;b.word&quot;</span>));</span><br><span class=\"line\">    resourceFiles.add(<span class=\"keyword\">new</span> PPTFile(<span class=\"string\">&quot;c.ppt&quot;</span>));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> resourceFiles;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面的代码用到了方法重载，但是实际上是没法编译通过的，因为重载是静态绑定，我们传入ResourceFile类型的变量，但是找不到对应变量类型的方法。</p>\n<h5 id=\"实现3-1\"><a href=\"#实现3-1\" class=\"headerlink\" title=\"实现3\"></a>实现3</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ResourceFile</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">protected</span> String filePath;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ResourceFile</span><span class=\"params\">(String filePath)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.filePath = filePath;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">accept</span><span class=\"params\">(Extractor extractor)</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PdfFile</span> <span class=\"keyword\">extends</span> <span class=\"title\">ResourceFile</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">PdfFile</span><span class=\"params\">(String filePath)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(filePath);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">accept</span><span class=\"params\">(Extractor extractor)</span> </span>&#123;</span><br><span class=\"line\">    extractor.extract2txt(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//...PPTFile、WordFile跟PdfFile类似，这里就省略了...</span></span><br><span class=\"line\"><span class=\"comment\">//...Extractor代码不变...</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ToolApplication</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    Extractor extractor = <span class=\"keyword\">new</span> Extractor();</span><br><span class=\"line\">    List&lt;ResourceFile&gt; resourceFiles = listAllResourceFiles(args[<span class=\"number\">0</span>]);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (ResourceFile resourceFile : resourceFiles) &#123;</span><br><span class=\"line\">      resourceFile.accept(extractor);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> List&lt;ResourceFile&gt; <span class=\"title\">listAllResourceFiles</span><span class=\"params\">(String resourceDirectory)</span> </span>&#123;</span><br><span class=\"line\">    List&lt;ResourceFile&gt; resourceFiles = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">    <span class=\"comment\">//...根据后缀(pdf/ppt/word)由工厂方法创建不同的类对象(PdfFile/PPTFile/WordFile)</span></span><br><span class=\"line\">    resourceFiles.add(<span class=\"keyword\">new</span> PdfFile(<span class=\"string\">&quot;a.pdf&quot;</span>));</span><br><span class=\"line\">    resourceFiles.add(<span class=\"keyword\">new</span> WordFile(<span class=\"string\">&quot;b.word&quot;</span>));</span><br><span class=\"line\">    resourceFiles.add(<span class=\"keyword\">new</span> PPTFile(<span class=\"string\">&quot;c.ppt&quot;</span>));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> resourceFiles;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>现在，如果要继续添加新的功能，比如前面提到的压缩功能，根据不同的文件类型，使用不同的压缩算法来压缩资源文件，那我们该如何实现呢？我们需要实现一个类似 Extractor 类的新类 Compressor 类，在其中定义三个重载函数，实现对不同类型资源文件的压缩。除此之外，我们还要在每个资源文件类中定义新的 accept 重载函数。具体的代码如下所示：</p>\n<h5 id=\"实现4-1\"><a href=\"#实现4-1\" class=\"headerlink\" title=\"实现4\"></a>实现4</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ResourceFile</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">protected</span> String filePath;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ResourceFile</span><span class=\"params\">(String filePath)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.filePath = filePath;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">accept</span><span class=\"params\">(Extractor extractor)</span></span>;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">accept</span><span class=\"params\">(Compressor compressor)</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PdfFile</span> <span class=\"keyword\">extends</span> <span class=\"title\">ResourceFile</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">PdfFile</span><span class=\"params\">(String filePath)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(filePath);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">accept</span><span class=\"params\">(Extractor extractor)</span> </span>&#123;</span><br><span class=\"line\">    extractor.extract2txt(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">accept</span><span class=\"params\">(Compressor compressor)</span> </span>&#123;</span><br><span class=\"line\">    compressor.compress(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//...PPTFile、WordFile跟PdfFile类似，这里就省略了...</span></span><br><span class=\"line\"><span class=\"comment\">//...Extractor代码不变</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ToolApplication</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    Extractor extractor = <span class=\"keyword\">new</span> Extractor();</span><br><span class=\"line\">    List&lt;ResourceFile&gt; resourceFiles = listAllResourceFiles(args[<span class=\"number\">0</span>]);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (ResourceFile resourceFile : resourceFiles) &#123;</span><br><span class=\"line\">      resourceFile.accept(extractor);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    Compressor compressor = <span class=\"keyword\">new</span> Compressor();</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(ResourceFile resourceFile : resourceFiles) &#123;</span><br><span class=\"line\">      resourceFile.accept(compressor);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> List&lt;ResourceFile&gt; <span class=\"title\">listAllResourceFiles</span><span class=\"params\">(String resourceDirectory)</span> </span>&#123;</span><br><span class=\"line\">    List&lt;ResourceFile&gt; resourceFiles = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">    <span class=\"comment\">//...根据后缀(pdf/ppt/word)由工厂方法创建不同的类对象(PdfFile/PPTFile/WordFile)</span></span><br><span class=\"line\">    resourceFiles.add(<span class=\"keyword\">new</span> PdfFile(<span class=\"string\">&quot;a.pdf&quot;</span>));</span><br><span class=\"line\">    resourceFiles.add(<span class=\"keyword\">new</span> WordFile(<span class=\"string\">&quot;b.word&quot;</span>));</span><br><span class=\"line\">    resourceFiles.add(<span class=\"keyword\">new</span> PPTFile(<span class=\"string\">&quot;c.ppt&quot;</span>));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> resourceFiles;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面代码还存在一些问题，添加一个新的业务，还是需要修改每个资源文件类，违反了开闭原则。</p>\n<p>针对这个问题，我们抽象出来一个 Visitor 接口，包含是三个命名非常通用的 visit() 重载函数，分别处理三种不同类型的资源文件。具体做什么业务处理，由实现这个 Visitor 接口的具体的类来决定，比如 Extractor 负责抽取文本内容，Compressor 负责压缩。当我们新添加一个业务功能的时候，资源文件类不需要做任何修改，只需要修改 ToolApplication 的代码就可以了。</p>\n<h5 id=\"实现5-1\"><a href=\"#实现5-1\" class=\"headerlink\" title=\"实现5\"></a>实现5</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ResourceFile</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">protected</span> String filePath;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ResourceFile</span><span class=\"params\">(String filePath)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.filePath = filePath;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">accept</span><span class=\"params\">(Visitor vistor)</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PdfFile</span> <span class=\"keyword\">extends</span> <span class=\"title\">ResourceFile</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">PdfFile</span><span class=\"params\">(String filePath)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(filePath);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">accept</span><span class=\"params\">(Visitor visitor)</span> </span>&#123;</span><br><span class=\"line\">    visitor.visit(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//...PPTFile、WordFile跟PdfFile类似，这里就省略了...</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Visitor</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">visit</span><span class=\"params\">(PdfFile pdfFile)</span></span>;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">visit</span><span class=\"params\">(PPTFile pdfFile)</span></span>;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">visit</span><span class=\"params\">(WordFile pdfFile)</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Extractor</span> <span class=\"keyword\">implements</span> <span class=\"title\">Visitor</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">visit</span><span class=\"params\">(PPTFile pptFile)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;Extract PPT.&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">visit</span><span class=\"params\">(PdfFile pdfFile)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;Extract PDF.&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">visit</span><span class=\"params\">(WordFile wordFile)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;Extract WORD.&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Compressor</span> <span class=\"keyword\">implements</span> <span class=\"title\">Visitor</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">visit</span><span class=\"params\">(PPTFile pptFile)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;Compress PPT.&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">visit</span><span class=\"params\">(PdfFile pdfFile)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;Compress PDF.&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">visit</span><span class=\"params\">(WordFile wordFile)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;Compress WORD.&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ToolApplication</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    List&lt;ResourceFile&gt; resourceFiles = listAllResourceFiles(args[<span class=\"number\">0</span>]);</span><br><span class=\"line\">      </span><br><span class=\"line\">    Extractor extractor = <span class=\"keyword\">new</span> Extractor();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (ResourceFile resourceFile : resourceFiles) &#123;</span><br><span class=\"line\">      resourceFile.accept(extractor);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    Compressor compressor = <span class=\"keyword\">new</span> Compressor();</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(ResourceFile resourceFile : resourceFiles) &#123;</span><br><span class=\"line\">      resourceFile.accept(compressor);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> List&lt;ResourceFile&gt; <span class=\"title\">listAllResourceFiles</span><span class=\"params\">(String resourceDirectory)</span> </span>&#123;</span><br><span class=\"line\">    List&lt;ResourceFile&gt; resourceFiles = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">    <span class=\"comment\">//...根据后缀(pdf/ppt/word)由工厂方法创建不同的类对象(PdfFile/PPTFile/WordFile)</span></span><br><span class=\"line\">    resourceFiles.add(<span class=\"keyword\">new</span> PdfFile(<span class=\"string\">&quot;a.pdf&quot;</span>));</span><br><span class=\"line\">    resourceFiles.add(<span class=\"keyword\">new</span> WordFile(<span class=\"string\">&quot;b.word&quot;</span>));</span><br><span class=\"line\">    resourceFiles.add(<span class=\"keyword\">new</span> PPTFile(<span class=\"string\">&quot;c.ppt&quot;</span>));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> resourceFiles;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"回首\"><a href=\"#回首\" class=\"headerlink\" title=\"回首\"></a>回首</h4><h5 id=\"定义-6\"><a href=\"#定义-6\" class=\"headerlink\" title=\"定义\"></a>定义</h5><p>允许一个或者多个操作应用到一组对象上，解耦操作和对象本身。</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/0081Kckwly1gl1k7t8oj9j31xq0u07i1.jpg\" alt=\"image-20201125174436993\"></p>\n<h5 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h5><p>访问者模式针对的是一组类型不同的对象（PdfFile、PPTFile、WordFile）。不过，尽管这组对象的类型是不同的，但是，它们继承相同的父类（ResourceFile）或者实现相同的接口。在不同的应用场景下，\b我们需要对这组对象进行一系列不相关的业务操作（抽取文本、压缩等），但为了避免不断添加功能导致类（PdfFile、PPTFile、WordFile）不断膨胀，职责越来越不单一，以及避免频繁地添加功能导致的频繁代码修改，我们使用访问者模式，将对象与操作解耦，将这些业务操作抽离出来，定义在独立细分的访问者类（Extractor、Compressor）中。</p>\n<h4 id=\"替代方式\"><a href=\"#替代方式\" class=\"headerlink\" title=\"替代方式\"></a>替代方式</h4><p>我们还可以利用工厂模式来实现，定义一个包含 extract2txt() 接口函数的 Extractor 接口。PdfExtractor、PPTExtractor、WordExtractor 类实现 Extractor 接口，并且在各自的 extract2txt() 函数中，分别实现 Pdf、PPT、Word 格式文件的文本内容抽取。ExtractorFactory 工厂类根据不同的文件类型，返回不同的 Extractor。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ResourceFile</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">protected</span> String filePath;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ResourceFile</span><span class=\"params\">(String filePath)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.filePath = filePath;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> ResourceFileType <span class=\"title\">getType</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PdfFile</span> <span class=\"keyword\">extends</span> <span class=\"title\">ResourceFile</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">PdfFile</span><span class=\"params\">(String filePath)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(filePath);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> ResourceFileType <span class=\"title\">getType</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ResourceFileType.PDF;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//...PPTFile/WordFile跟PdfFile代码结构类似，此处省略...</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Extractor</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">extract2txt</span><span class=\"params\">(ResourceFile resourceFile)</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PdfExtractor</span> <span class=\"keyword\">implements</span> <span class=\"title\">Extractor</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">extract2txt</span><span class=\"params\">(ResourceFile resourceFile)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//...PPTExtractor/WordExtractor跟PdfExtractor代码结构类似，此处省略...</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ExtractorFactory</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Map&lt;ResourceFileType, Extractor&gt; extractors = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">  <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">    extractors.put(ResourceFileType.PDF, <span class=\"keyword\">new</span> PdfExtractor());</span><br><span class=\"line\">    extractors.put(ResourceFileType.PPT, <span class=\"keyword\">new</span> PPTExtractor());</span><br><span class=\"line\">    extractors.put(ResourceFileType.WORD, <span class=\"keyword\">new</span> WordExtractor());</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Extractor <span class=\"title\">getExtractor</span><span class=\"params\">(ResourceFileType type)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> extractors.get(type);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ToolApplication</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    List&lt;ResourceFile&gt; resourceFiles = listAllResourceFiles(args[<span class=\"number\">0</span>]);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (ResourceFile resourceFile : resourceFiles) &#123;</span><br><span class=\"line\">      Extractor extractor = ExtractorFactory.getExtractor(resourceFile.getType());</span><br><span class=\"line\">      extractor.extract2txt(resourceFile);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> List&lt;ResourceFile&gt; <span class=\"title\">listAllResourceFiles</span><span class=\"params\">(String resourceDirectory)</span> </span>&#123;</span><br><span class=\"line\">    List&lt;ResourceFile&gt; resourceFiles = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">    <span class=\"comment\">//...根据后缀(pdf/ppt/word)由工厂方法创建不同的类对象(PdfFile/PPTFile/WordFile)</span></span><br><span class=\"line\">    resourceFiles.add(<span class=\"keyword\">new</span> PdfFile(<span class=\"string\">&quot;a.pdf&quot;</span>));</span><br><span class=\"line\">    resourceFiles.add(<span class=\"keyword\">new</span> WordFile(<span class=\"string\">&quot;b.word&quot;</span>));</span><br><span class=\"line\">    resourceFiles.add(<span class=\"keyword\">new</span> PPTFile(<span class=\"string\">&quot;c.ppt&quot;</span>));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> resourceFiles;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>对于资源文件处理工具这个例子，如果工具提供的功能并不是非常多，只有几个而已，更推荐使用工厂模式的实现方式，毕竟代码更加清晰、易懂。</p>\n<p>相反，如果工具提供非常多的功能，比如有十几个，更推荐使用访问者模式，因为访问者模式需要定义的类要比工厂模式的实现方式少很多，类太多也会影响到代码的可维护性。</p>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p><a href=\"https://time.geekbang.org/column/intro/100039001\">设计模式之美-王争</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"观察者模式\"><a href=\"#观察者模式\" class=\"headerlink\" title=\"观察者模式\"></a>观察者模式</h3><h4 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p>又称为发布订阅模式。在对象之间定义一个一对多的依赖，当一个对象状态改变的时候，所有依赖的对象都会自动收到通知。</p>\n<p>被依赖的对象叫做被观察者（Observable），依赖的对象叫做观察者（Observer）。</p>\n<h4 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h4><p>不同行为之间（观察者和被观察者）进行解耦，对扩展开放，对修改关闭。</p>\n<h4 id=\"实现1\"><a href=\"#实现1\" class=\"headerlink\" title=\"实现1\"></a>实现1</h4><p><strong>一个p2p投资理财系统，用户注册成功之后，我们给用户发放投资体验金。</strong></p>\n<p>使用普通的方法调用：用户注册Service，发放体验金Service，在Controller中依次调用这两个方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserController</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> UserService userService;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> PromotionService promotionService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Long <span class=\"title\">register</span><span class=\"params\">(String telephone, String password)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// ...参数校验</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 注册</span></span><br><span class=\"line\">        <span class=\"keyword\">long</span> userId = userService.register(telephone, password);</span><br><span class=\"line\">        <span class=\"comment\">// 发放投资体验金</span></span><br><span class=\"line\">        promotionService.issueNewUserExperienceCash(userId);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> userId;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>注册接口做了两件事：注册和发放投资体验金，如果需求改动频繁，注册成功后改为发放优惠券，发短信提醒等等，这段代码就违背了开闭原则，后续如果需要在注册只会增加其他功能，比如：给用户发送新人红包，发送注册成功短信等。下面使用观察者模式进行重构。</p>\n<h4 id=\"实现2\"><a href=\"#实现2\" class=\"headerlink\" title=\"实现2\"></a>实现2</h4><p>使用观察者模式实现。</p>\n<ul>\n<li>定义一个观察者接口</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">RegObserver</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">handleRegSuccess</span><span class=\"params\">(<span class=\"keyword\">long</span> userId)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>具体需要做哪些事定义为接口的实现类</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RegPromotionObserver</span> <span class=\"keyword\">implements</span> <span class=\"title\">RegObserver</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> PromotionService promotionService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handleRegSuccess</span><span class=\"params\">(<span class=\"keyword\">long</span> userId)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 发放投资体验金</span></span><br><span class=\"line\">        promotionService.issueNewUserExperienceCash(userId);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RegNoitificationObserver</span> <span class=\"keyword\">implements</span> <span class=\"title\">RegObserver</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> NotificationService notificationService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handleRegSuccess</span><span class=\"params\">(<span class=\"keyword\">long</span> userId)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 发送欢迎短信</span></span><br><span class=\"line\">        notificationService.sendInboxMessage(userId, <span class=\"string\">&quot;Welcome...&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserController</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> UserService userService;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;RegObserver&gt; regObservers = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 一次设置好，之后不会再动态更改</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setRegObserves</span><span class=\"params\">(List&lt;RegObserver&gt; observes)</span> </span>&#123;</span><br><span class=\"line\">        regObservers.addAll(observes);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Long <span class=\"title\">register</span><span class=\"params\">(String telephone, String password)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// ...参数校验</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 注册</span></span><br><span class=\"line\">        <span class=\"keyword\">long</span> userId = userService.register(telephone, password);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 通知观察者</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (RegObserver regObserver : regObservers) &#123;</span><br><span class=\"line\">            regObserver.handleRegSuccess(userId);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> userId;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>使用这种方式实现，对于注册之后的行为，注册方法不需要去关注。</p>\n<p>这种方式使用了同步阻塞的方式，依然有缺陷，观察者代码会被阻塞执行，观察者代码的执行结果会影响注册逻辑的成功执行。</p>\n<h4 id=\"实现3\"><a href=\"#实现3\" class=\"headerlink\" title=\"实现3\"></a>实现3</h4><p>异步非阻塞方式实现。</p>\n<ul>\n<li><p>线程池</p>\n<p>这种方式将线程池和异步执行逻辑耦合在注册代码中，提高了维护成本；并且如果需求在同步和异步之间来回切换，就需要频繁改动注册代码。</p>\n</li>\n<li><p>Guava EventBus</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserController</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> UserService userService = <span class=\"keyword\">new</span> UserService();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> EventBus eventBus;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> DEFAULT_EVENTBUS_THREAD_POOL_SIZE = <span class=\"number\">20</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">UserController</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// this.eventBus = new EventBus(); 同步阻塞模式</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.eventBus = <span class=\"keyword\">new</span> AsyncEventBus(Executors.newFixedThreadPool(DEFAULT_EVENTBUS_THREAD_POOL_SIZE));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 一次设置好，之后不会再动态更改</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setRegObserves</span><span class=\"params\">(List&lt;Object&gt; observes)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Object obj : observes) &#123;</span><br><span class=\"line\">            eventBus.register(obj);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Long <span class=\"title\">register</span><span class=\"params\">(String telephone, String password)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// ...参数校验</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 注册</span></span><br><span class=\"line\">        <span class=\"keyword\">long</span> userId = userService.register(telephone, password);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 通知观察者</span></span><br><span class=\"line\">        eventBus.post(userId);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> userId;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RegNoitificationObserver</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> NotificationService notificationService = <span class=\"keyword\">new</span> NotificationService() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sendInboxMessage</span><span class=\"params\">(<span class=\"keyword\">long</span> userId, String message)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// ...</span></span><br><span class=\"line\">            System.out.println(userId + <span class=\"string\">&quot;, &quot;</span> + message);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Subscribe</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handleRegSuccess</span><span class=\"params\">(Long userId)</span> </span>&#123;</span><br><span class=\"line\">        notificationService.sendInboxMessage(userId, <span class=\"string\">&quot;Welcome...&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RegPromotionObserver</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> PromotionService promotionService = <span class=\"keyword\">new</span> PromotionService() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">issueNewUserExperienceCash</span><span class=\"params\">(<span class=\"keyword\">long</span> userId)</span> </span>&#123;</span><br><span class=\"line\">            System.out.println(userId + <span class=\"string\">&quot;, Promotion is done&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Subscribe</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handleRegSuccess</span><span class=\"params\">(Long userId)</span> </span>&#123;</span><br><span class=\"line\">        promotionService.issueNewUserExperienceCash(userId);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//    @Subscribe</span></span><br><span class=\"line\"><span class=\"comment\">//    public void handleRegSuccess2(Integer userId) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//        System.out.println(&quot;hello pro&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">//    &#125;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>使用这种方式不需要定义Observer接口，只需要通过@Subscribe表明哪个方法可以接收被观察者发送的消息即可，如果注册之后不再需要发放体验金，去掉该注解即可。</p>\n<p>但需要注意，观察者的入参需要是eventBus.register(obj)中obj对象及父类的包装类。</p>\n</li>\n</ul>\n<h4 id=\"实现4\"><a href=\"#实现4\" class=\"headerlink\" title=\"实现4\"></a>实现4</h4><p>Spring也提供了针对观察者模式的扩展。</p>\n<h4 id=\"实现5\"><a href=\"#实现5\" class=\"headerlink\" title=\"实现5\"></a>实现5</h4><p>通过消息队列实现。</p>\n<p>这种方式更有利于观察者和被观察者的解耦，但是额外引入了中间件，增加了系统的复杂性；一般分布式系统中不同项目间的通信使用这种方式。</p>\n<hr>\n<h3 id=\"模板模式\"><a href=\"#模板模式\" class=\"headerlink\" title=\"模板模式\"></a>模板模式</h3><h4 id=\"定义-1\"><a href=\"#定义-1\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p>模板模式在一个方法中定义一个算法骨架，并将某些步骤推迟到子类中实现。模板模式可以让子类在不改变算法整体结构的情况下，重新定义算法中的某些步骤。</p>\n<h4 id=\"作用-1\"><a href=\"#作用-1\" class=\"headerlink\" title=\"作用\"></a>作用</h4><p>代码的复用和扩展。</p>\n<h4 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h4><p>通过抽象类中定义算法骨架，具体实现中对某些步骤进行实现。</p>\n<p>模板方法定义为final，可以避免被子类重写；需要重写的方法定义为abstract，可以强迫子类去实现。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AbstarctClass</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">templateMethod</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        method1();</span><br><span class=\"line\">        <span class=\"comment\">//...</span></span><br><span class=\"line\">        method2();</span><br><span class=\"line\">        <span class=\"comment\">//...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">method2</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">method1</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteClass1</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstarctClass</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">method2</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">method1</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteClass2</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstarctClass</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">method2</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">method1</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        AbstarctClass demo = <span class=\"keyword\">new</span> ConcreteClass1();</span><br><span class=\"line\">        demo.templateMethod();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"JDK中的实现\"><a href=\"#JDK中的实现\" class=\"headerlink\" title=\"JDK中的实现\"></a>JDK中的实现</h4><h5 id=\"集合\"><a href=\"#集合\" class=\"headerlink\" title=\"集合\"></a>集合</h5><p>在AbstractList中，addAll()方法提供了算法骨架，add()方法需要子类实现，虽然没有声明为abstract，但是如果子类不实现就直接抛出异常。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">addAll</span><span class=\"params\">(<span class=\"keyword\">int</span> index, Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class=\"line\">    rangeCheckForAdd(index);</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> modified = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (E e : c) &#123;</span><br><span class=\"line\">        add(index++, e);</span><br><span class=\"line\">        modified = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> modified;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> index, E element)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> UnsupportedOperationException();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"排序\"><a href=\"#排序\" class=\"headerlink\" title=\"排序\"></a>排序</h5><p>模板模式提供了框架的扩展点，让框架使用者，在不修改框架源码的情况下，基于扩展点定制化框架的功能。Java 中的 Collections 类的 sort() 函数也利用了模板模式的这个扩展特性。</p>\n<p>Collections.sort() 实现了对集合的排序。为了扩展性，它将其中“比较大小”这部分逻辑，委派给用户来实现。如果我们把比较大小这部分逻辑看作整个排序逻辑的其中一个步骤，那我们就可以把它看作模板模式。不过，从代码实现的角度来看，并不是模板模式的经典代码实现，而是基于 Callback 回调机制来实现的。</p>\n<p>A 类（Demo）事先注册某个函数 F（Comparator的具体实现） 到 B 类（Collections），A 类在调用 B 类的 P 函数（sort）的时候，B 类反过来调用 A 类注册给它的 F 函数。回调也具有复用和扩展的功能。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(List&lt;T&gt; list, Comparator&lt;? <span class=\"keyword\">super</span> T&gt; c)</span> </span>&#123;</span><br><span class=\"line\">    list.sort(c);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        List&lt;Student&gt; students = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        students.add(<span class=\"keyword\">new</span> Student(<span class=\"string\">&quot;Alice&quot;</span>, <span class=\"number\">19</span>, <span class=\"number\">89.0f</span>));</span><br><span class=\"line\">        students.add(<span class=\"keyword\">new</span> Student(<span class=\"string\">&quot;Peter&quot;</span>, <span class=\"number\">20</span>, <span class=\"number\">78.0f</span>));</span><br><span class=\"line\">        students.add(<span class=\"keyword\">new</span> Student(<span class=\"string\">&quot;Leo&quot;</span>, <span class=\"number\">18</span>, <span class=\"number\">99.0f</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        Collections.sort(students, <span class=\"keyword\">new</span> AgeAscComparator());</span><br><span class=\"line\">        print(students);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;-----------------------------------&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        Collections.sort(students, <span class=\"keyword\">new</span> NameAscComparator());</span><br><span class=\"line\">        print(students);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;-----------------------------------&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        Collections.sort(students, <span class=\"keyword\">new</span> ScoreDescComparator());</span><br><span class=\"line\">        print(students);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">(List&lt;Student&gt; students)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Student s : students) &#123;</span><br><span class=\"line\">            System.out.println(s.getName() + <span class=\"string\">&quot; &quot;</span> + s.getAge() + <span class=\"string\">&quot; &quot;</span> + s.getScore());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AgeAscComparator</span> <span class=\"keyword\">implements</span> <span class=\"title\">Comparator</span>&lt;<span class=\"title\">Student</span>&gt; </span>&#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compare</span><span class=\"params\">(Student o1, Student o2)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> o1.getAge() - o2.getAge();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NameAscComparator</span> <span class=\"keyword\">implements</span> <span class=\"title\">Comparator</span>&lt;<span class=\"title\">Student</span>&gt; </span>&#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compare</span><span class=\"params\">(Student o1, Student o2)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> o1.getName().compareTo(o2.getName());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ScoreDescComparator</span> <span class=\"keyword\">implements</span> <span class=\"title\">Comparator</span>&lt;<span class=\"title\">Student</span>&gt; </span>&#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compare</span><span class=\"params\">(Student o1, Student o2)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (Math.abs(o1.getScore() - o2.getScore()) &lt; <span class=\"number\">0.001</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (o1.getScore() &lt; o2.getScore()) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"HttpServlet\"><a href=\"#HttpServlet\" class=\"headerlink\" title=\"HttpServlet\"></a>HttpServlet</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloServlet</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doGet</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.doPost(req, resp);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doPost</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">    resp.getWriter().write(<span class=\"string\">&quot;Hello World.&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当我们在浏览器中输入网址（比如，<a href=\"http://127.0.0.1:8080/hello\">http://127.0.0.1:8080/hello</a> ）的时候，Servlet 容器会接收到相应的请求，并且根据 URL 和 Servlet 之间的映射关系，找到相应的 Servlet（HelloServlet），然后执行它的 service() 方法。service() 方法定义在父类 HttpServlet 中，它会调用 doGet() 或 doPost() 方法，然后输出数据（“Hello world”）到网页。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">service</span><span class=\"params\">(ServletRequest req, ServletResponse res)</span></span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"keyword\">throws</span> ServletException, IOException</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    HttpServletRequest  request;</span><br><span class=\"line\">    HttpServletResponse response;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!(req <span class=\"keyword\">instanceof</span> HttpServletRequest &amp;&amp;</span><br><span class=\"line\">            res <span class=\"keyword\">instanceof</span> HttpServletResponse)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ServletException(<span class=\"string\">&quot;non-HTTP request or response&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    request = (HttpServletRequest) req;</span><br><span class=\"line\">    response = (HttpServletResponse) res;</span><br><span class=\"line\">    service(request, response);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">service</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span></span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"keyword\">throws</span> ServletException, IOException</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    String method = req.getMethod();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (method.equals(METHOD_GET)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">long</span> lastModified = getLastModified(req);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (lastModified == -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// servlet doesn&#x27;t support if-modified-since, no reason</span></span><br><span class=\"line\">            <span class=\"comment\">// to go through further expensive logic</span></span><br><span class=\"line\">            doGet(req, resp);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">long</span> ifModifiedSince = req.getDateHeader(HEADER_IFMODSINCE);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (ifModifiedSince &lt; lastModified) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// If the servlet mod time is later, call doGet()</span></span><br><span class=\"line\">                <span class=\"comment\">// Round down to the nearest second for a proper compare</span></span><br><span class=\"line\">                <span class=\"comment\">// A ifModifiedSince of -1 will always be less</span></span><br><span class=\"line\">                maybeSetLastModified(resp, lastModified);</span><br><span class=\"line\">                doGet(req, resp);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                resp.setStatus(HttpServletResponse.SC_NOT_MODIFIED);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (method.equals(METHOD_HEAD)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">long</span> lastModified = getLastModified(req);</span><br><span class=\"line\">        maybeSetLastModified(resp, lastModified);</span><br><span class=\"line\">        doHead(req, resp);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (method.equals(METHOD_POST)) &#123;</span><br><span class=\"line\">        doPost(req, resp);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (method.equals(METHOD_PUT)) &#123;</span><br><span class=\"line\">        doPut(req, resp);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (method.equals(METHOD_DELETE)) &#123;</span><br><span class=\"line\">        doDelete(req, resp);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (method.equals(METHOD_OPTIONS)) &#123;</span><br><span class=\"line\">        doOptions(req,resp);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (method.equals(METHOD_TRACE)) &#123;</span><br><span class=\"line\">        doTrace(req,resp);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        String errMsg = lStrings.getString(<span class=\"string\">&quot;http.method_not_implemented&quot;</span>);</span><br><span class=\"line\">        Object[] errArgs = <span class=\"keyword\">new</span> Object[<span class=\"number\">1</span>];</span><br><span class=\"line\">        errArgs[<span class=\"number\">0</span>] = method;</span><br><span class=\"line\">        errMsg = MessageFormat.format(errMsg, errArgs);</span><br><span class=\"line\">        resp.sendError(HttpServletResponse.SC_NOT_IMPLEMENTED, errMsg);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>从上面的代码中我们可以看出，HttpServlet 的 service() 方法就是一个模板方法，它实现了整个 HTTP 请求的执行流程，doGet()、doPost() 是模板中可以由子类来定制的部分。实际上，这就相当于 Servlet 框架提供了一个扩展点（doGet()、doPost() 方法），让框架用户在不用修改 Servlet 框架源码的情况下，将业务代码通过扩展点镶嵌到框架中执行。</p>\n<h4 id=\"扩展\"><a href=\"#扩展\" class=\"headerlink\" title=\"扩展\"></a>扩展</h4><p>如果我们某个实现只用到其中的一个模板方法，也需要把所有抽象方法都实现一遍，怎么优化？</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> AbstractClass &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">templateMethod1</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">        method1();</span><br><span class=\"line\">        <span class=\"comment\">//...</span></span><br><span class=\"line\">        method2();</span><br><span class=\"line\">        <span class=\"comment\">//...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">templateMethod</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">        method3();</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">        method4();</span><br><span class=\"line\">        <span class=\"comment\">//...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">method1</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">method2</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">method3</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">method4</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>第一种：如果某个实现只用到一个模板方法，说明这个类不应该设置这么多的抽象方法，应该拆分成更细粒度的两个类；</p>\n<p>第二种：给不常用（不是每个子类都需要实现一遍）的抽象方法设置默认实现。</p>\n<hr>\n<h3 id=\"策略模式\"><a href=\"#策略模式\" class=\"headerlink\" title=\"策略模式\"></a>策略模式</h3><h4 id=\"定义-2\"><a href=\"#定义-2\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p>定义一族算法类，将每个算法分别封装起来，让它们可以互相替换。策略模式可以使算法的变化独立于使用它们的客户端。</p>\n<h4 id=\"作用-2\"><a href=\"#作用-2\" class=\"headerlink\" title=\"作用\"></a>作用</h4><p>对策略的定义、创建和使用进行解耦。</p>\n<h4 id=\"实现-1\"><a href=\"#实现-1\" class=\"headerlink\" title=\"实现\"></a>实现</h4><h5 id=\"普通实现\"><a href=\"#普通实现\" class=\"headerlink\" title=\"普通实现\"></a>普通实现</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">    String type = <span class=\"string\">&quot;A&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"string\">&#x27;A&#x27;</span>.equals(type)) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// A逻辑</span></span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"string\">&#x27;B&#x27;</span>.equals(type)) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// B逻辑</span></span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"策略的定义\"><a href=\"#策略的定义\" class=\"headerlink\" title=\"策略的定义\"></a>策略的定义</h5><p>包含一个策略接口和一组实现这个接口的策略类。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Strategy</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">algoInterface</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteStrartegyA</span> <span class=\"keyword\">implements</span> <span class=\"title\">Strategy</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">algoInterface</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//...具体算法</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;this is A&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteStrartegyB</span> <span class=\"keyword\">implements</span> <span class=\"title\">Strategy</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">algoInterface</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//...具体算法</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;this is B&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"策略的创建\"><a href=\"#策略的创建\" class=\"headerlink\" title=\"策略的创建\"></a>策略的创建</h5><p>一般在使用的时候，会通过类型（type）来判断创建哪个策略来进行使用；为了封装创建逻辑，我们把根据type创建策略的逻辑抽出来放到工厂类中。</p>\n<ul>\n<li><p>无状态策略</p>\n<p>如果策略对象可以被共享使用（单例），那么可以采用如下的工厂方法创建策略。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StrategyFactory</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Map&lt;String, Strategy&gt; strategies = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        strategies.put(<span class=\"string\">&quot;A&quot;</span>, <span class=\"keyword\">new</span> ConcreteStrartegyA());</span><br><span class=\"line\">        strategies.put(<span class=\"string\">&quot;B&quot;</span>, <span class=\"keyword\">new</span> ConcreteStrartegyB());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Strategy <span class=\"title\">getStrategy</span><span class=\"params\">(String type)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (type == <span class=\"keyword\">null</span> || type.isEmpty()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">&quot;type should not be empty.&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> strategies.get(type);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>有状态策略</p>\n<p>如果策略是有状态的，我们希望每次都获取的是新创建的策略对象，那么采用如下方式。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StrategyFactory2</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Strategy <span class=\"title\">getStrategy</span><span class=\"params\">(String type)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (type == <span class=\"keyword\">null</span> || type.isEmpty()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">&quot;type should not be empty.&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"string\">&quot;A&quot;</span>.equals(type)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ConcreteStrartegyA();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"string\">&quot;B&quot;</span>.equals(type)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ConcreteStrartegyB();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h5 id=\"策略的使用\"><a href=\"#策略的使用\" class=\"headerlink\" title=\"策略的使用\"></a>策略的使用</h5><p>根据传入的参数，运行时动态确定。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StrategyDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        String type = args[<span class=\"number\">0</span>];</span><br><span class=\"line\">        Strategy strategy = StrategyFactory.getStrategy(type);</span><br><span class=\"line\">        strategy.algoInterface();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"职责链模式\"><a href=\"#职责链模式\" class=\"headerlink\" title=\"职责链模式\"></a>职责链模式</h3><h4 id=\"定义-3\"><a href=\"#定义-3\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p>将请求的发送和接收解耦，让多个对象都有机会处理这个请求。将这些接收对象串成一条链，并沿着这条链传递这个请求，直到链上的某个接收对象能够处理它为止。</p>\n<p>多个处理器依次处理同一个请求，一个请求先经过A处理器处理，然后再把请求传递给B处理器，以此类推，形成一个链条。链条上的每个处理器处理各自的处理职责，所以叫做职责链模式。</p>\n<h4 id=\"实现1-1\"><a href=\"#实现1-1\" class=\"headerlink\" title=\"实现1\"></a>实现1</h4><p>链表方式实现。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Handler</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 下一级处理器</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> Handler successor;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setSuccessor</span><span class=\"params\">(Handler successor)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.successor = successor;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 结合模板模式</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">handle</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 当前处理器处理请求</span></span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> handled = doHandle();</span><br><span class=\"line\">        <span class=\"comment\">// 如果当前能处理，就不往下传递，如果还有下一处理器 并且 当前处理失败，交给下一处理器处理</span></span><br><span class=\"line\">        <span class=\"comment\">// 变体：如果想让所有处理器都处理一遍，修改此处的if条件即可</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (successor != <span class=\"keyword\">null</span> &amp;&amp; !handled) &#123;</span><br><span class=\"line\">            successor.handle();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 处理结果为false，当前不能处理，继续交给下一级处理器；如果为true，直接返回结果</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">boolean</span> <span class=\"title\">doHandle</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HandlerA</span> <span class=\"keyword\">extends</span> <span class=\"title\">Handler</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">boolean</span> <span class=\"title\">doHandle</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> handled = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        <span class=\"comment\">// ...当前处理器处理逻辑，如果当前处理成功，不需要下一级处理，返回true</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;A处理失败，向下传递...&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> handled;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HandlerB</span> <span class=\"keyword\">extends</span> <span class=\"title\">Handler</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">boolean</span> <span class=\"title\">doHandle</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> handled = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        <span class=\"comment\">// ...当前处理器处理逻辑，如果当前处理成功，不需要下一级处理，返回true</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;B处理成功...&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> handled;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HandlerChain</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Handler head;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Handler tail;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addHandler</span><span class=\"params\">(Handler handler)</span> </span>&#123;</span><br><span class=\"line\">        handler.setSuccessor(<span class=\"keyword\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (head == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            head = handler;</span><br><span class=\"line\">            tail = handler;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        tail.setSuccessor(handler);</span><br><span class=\"line\">        tail = handler;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handle</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (head != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            head.handle();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        HandlerChain chain = <span class=\"keyword\">new</span> HandlerChain();</span><br><span class=\"line\">        chain.addHandler(<span class=\"keyword\">new</span> HandlerA());</span><br><span class=\"line\">        chain.addHandler(<span class=\"keyword\">new</span> HandlerB());</span><br><span class=\"line\">        chain.handle();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"实现2-1\"><a href=\"#实现2-1\" class=\"headerlink\" title=\"实现2\"></a>实现2</h4><p>数组方式实现。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">IHandler</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">handle</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HandlerA</span> <span class=\"keyword\">implements</span> <span class=\"title\">IHandler</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">handle</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> handled = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        <span class=\"comment\">// ...当前处理器处理逻辑，如果当前处理成功，不需要下一级处理，返回true</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;A处理失败，向下传递...&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> handled;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HandlerB</span> <span class=\"keyword\">implements</span> <span class=\"title\">IHandler</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">handle</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> handled = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        <span class=\"comment\">// ...当前处理器处理逻辑，如果当前处理成功，不需要下一级处理，返回true</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;B处理失败，向下传递...&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> handled;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HandlerChain</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;IHandler&gt; handlers = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addHandler</span><span class=\"params\">(IHandler handler)</span> </span>&#123;</span><br><span class=\"line\">        handlers.add(handler);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handle</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (IHandler handler : handlers) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 当前可以成功处理，直接返回</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (handler.handle()) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        HandlerChain chain = <span class=\"keyword\">new</span> HandlerChain();</span><br><span class=\"line\">        chain.addHandler(<span class=\"keyword\">new</span> HandlerA());</span><br><span class=\"line\">        chain.addHandler(<span class=\"keyword\">new</span> HandlerB());</span><br><span class=\"line\">        chain.handle();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h4><p>敏感词过滤：对一段文本进行判断，如果里面涉及到敏感词，就禁止展示。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">SensitiveWorldFilter</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 敏感词过滤，如果当前文本含有敏感词，返回true</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> text</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">doFilter</span><span class=\"params\">(String text)</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PoliticalWordFilter</span> <span class=\"keyword\">implements</span> <span class=\"title\">SensitiveWorldFilter</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">doFilter</span><span class=\"params\">(String text)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (text.contains(<span class=\"string\">&quot;国家&quot;</span>) || text.contains(<span class=\"string\">&quot;党&quot;</span>)) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;当前文本敏感，为防止查水表，不予通过&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SexyWordFilter</span> <span class=\"keyword\">implements</span> <span class=\"title\">SensitiveWorldFilter</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">doFilter</span><span class=\"params\">(String text)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (text.contains(<span class=\"string\">&quot;性感&quot;</span>)) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;当前文本涉黄！&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SensitiveWorldFilterChain</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;SensitiveWorldFilter&gt; filters = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addFilter</span><span class=\"params\">(SensitiveWorldFilter filter)</span> </span>&#123;</span><br><span class=\"line\">        filters.add(filter);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">filter</span><span class=\"params\">(String text)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (SensitiveWorldFilter filter : filters) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (filter.doFilter(text)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 文本</span></span><br><span class=\"line\">        String text = <span class=\"string\">&quot;性感荷官，在线发牌&quot;</span>;</span><br><span class=\"line\">        String text2 = <span class=\"string\">&quot;好好学习，天天向上&quot;</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 敏感词过滤器</span></span><br><span class=\"line\">        SensitiveWorldFilterChain chain = <span class=\"keyword\">new</span> SensitiveWorldFilterChain();</span><br><span class=\"line\">        chain.addFilter(<span class=\"keyword\">new</span> SexyWordFilter());</span><br><span class=\"line\">        chain.addFilter(<span class=\"keyword\">new</span> PoliticalWordFilter());</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> illeagl = chain.filter(text);</span><br><span class=\"line\"><span class=\"comment\">//        boolean illeagl = chain.filter(text2);</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (illeagl) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;当前文本不合法！&quot;</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;当前文本合法&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"框架源码\"><a href=\"#框架源码\" class=\"headerlink\" title=\"框架源码\"></a>框架源码</h4><p><strong>Spring的HandlerInterceptor</strong></p>\n<p>日常使用的样子</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LogInterceptor</span> <span class=\"keyword\">implements</span> <span class=\"title\">HandlerInterceptor</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">preHandle</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;拦截客户端发送来的请求.&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>; <span class=\"comment\">// 继续后续的处理</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">postHandle</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;拦截发送给客户端的响应.&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">afterCompletion</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;这里总是被执行.&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://tva1.sinaimg.cn/large/0081Kckwly1gl19xi5u0lj322a0n6n5b.jpg\" alt=\"image-20201125114846433\"></p>\n<p>Spring Interceptor 底层是基于职责链模式实现的。其中，HandlerExecutionChain 类是职责链模式中的处理器链。</p>\n<p><a href=\"https://www.jianshu.com/p/8a20c547e245\">https://www.jianshu.com/p/8a20c547e245</a></p>\n<p>关键代码如下：</p>\n<p>在 Spring 框架中，DispatcherServlet 的 doDispatch() 方法来分发请求，它在真正的业务逻辑执行前后，执行 HandlerExecutionChain 中的 applyPreHandle() 和 applyPostHandle() 函数，用来实现拦截的功能。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doDispatch</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">    HttpServletRequest processedRequest = request;</span><br><span class=\"line\">    HandlerExecutionChain mappedHandler = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> multipartRequestParsed = <span class=\"keyword\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    WebAsyncManager asyncManager = WebAsyncUtils.getAsyncManager(request);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        ModelAndView mv = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        Exception dispatchException = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            processedRequest = checkMultipart(request);</span><br><span class=\"line\">            multipartRequestParsed = (processedRequest != request);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// Determine handler for the current request.</span></span><br><span class=\"line\">            mappedHandler = getHandler(processedRequest);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (mappedHandler == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                noHandlerFound(processedRequest, response);</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// Determine handler adapter for the current request.</span></span><br><span class=\"line\">            HandlerAdapter ha = getHandlerAdapter(mappedHandler.getHandler());</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// Process last-modified header, if supported by the handler.</span></span><br><span class=\"line\">            String method = request.getMethod();</span><br><span class=\"line\">            <span class=\"keyword\">boolean</span> isGet = <span class=\"string\">&quot;GET&quot;</span>.equals(method);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (isGet || <span class=\"string\">&quot;HEAD&quot;</span>.equals(method)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">long</span> lastModified = ha.getLastModified(request, mappedHandler.getHandler());</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"keyword\">new</span> ServletWebRequest(request, response).checkNotModified(lastModified) &amp;&amp; isGet) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">            <span class=\"comment\">// 请求处理</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!mappedHandler.applyPreHandle(processedRequest, response)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// Actually invoke the handler.</span></span><br><span class=\"line\">            mv = ha.handle(processedRequest, response, mappedHandler.getHandler());</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            applyDefaultViewName(processedRequest, mv);</span><br><span class=\"line\">            <span class=\"comment\">// 响应处理</span></span><br><span class=\"line\">            mappedHandler.applyPostHandle(processedRequest, response, mv);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">catch</span> (Exception ex) &#123;</span><br><span class=\"line\">            dispatchException = ex;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">catch</span> (Throwable err) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// As of 4.3, we&#x27;re processing Errors thrown from handler methods as well,</span></span><br><span class=\"line\">            <span class=\"comment\">// making them available for @ExceptionHandler methods and other scenarios.</span></span><br><span class=\"line\">            dispatchException = <span class=\"keyword\">new</span> NestedServletException(<span class=\"string\">&quot;Handler dispatch failed&quot;</span>, err);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        processDispatchResult(processedRequest, response, mappedHandler, mv, dispatchException);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">catch</span> (Exception ex) &#123;</span><br><span class=\"line\">        triggerAfterCompletion(processedRequest, response, mappedHandler, ex);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">catch</span> (Throwable err) &#123;</span><br><span class=\"line\">        triggerAfterCompletion(processedRequest, response, mappedHandler,</span><br><span class=\"line\">                               <span class=\"keyword\">new</span> NestedServletException(<span class=\"string\">&quot;Handler processing failed&quot;</span>, err));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// Instead of postHandle and afterCompletion</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (mappedHandler != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 总是执行</span></span><br><span class=\"line\">                mappedHandler.applyAfterConcurrentHandlingStarted(processedRequest, response);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// Clean up any resources used by a multipart request.</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (multipartRequestParsed) &#123;</span><br><span class=\"line\">                cleanupMultipart(processedRequest);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>HandlerExecutionChain的关键代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HandlerExecutionChain</span> </span>&#123;</span><br><span class=\"line\"> <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Object handler;</span><br><span class=\"line\"> <span class=\"keyword\">private</span> HandlerInterceptor[] interceptors;</span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addInterceptor</span><span class=\"params\">(HandlerInterceptor interceptor)</span> </span>&#123;</span><br><span class=\"line\">  initInterceptorList().add(interceptor);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">applyPreHandle</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">  HandlerInterceptor[] interceptors = getInterceptors();</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!ObjectUtils.isEmpty(interceptors)) &#123;</span><br><span class=\"line\">   <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; interceptors.length; i++) &#123;</span><br><span class=\"line\">    HandlerInterceptor interceptor = interceptors[i];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!interceptor.preHandle(request, response, <span class=\"keyword\">this</span>.handler)) &#123;</span><br><span class=\"line\">     triggerAfterCompletion(request, response, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">     <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">applyPostHandle</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, ModelAndView mv)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">  HandlerInterceptor[] interceptors = getInterceptors();</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!ObjectUtils.isEmpty(interceptors)) &#123;</span><br><span class=\"line\">   <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = interceptors.length - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">    HandlerInterceptor interceptor = interceptors[i];</span><br><span class=\"line\">    interceptor.postHandle(request, response, <span class=\"keyword\">this</span>.handler, mv);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">triggerAfterCompletion</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, Exception ex)</span></span></span><br><span class=\"line\"><span class=\"function\">   <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">  HandlerInterceptor[] interceptors = getInterceptors();</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!ObjectUtils.isEmpty(interceptors)) &#123;</span><br><span class=\"line\">   <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"keyword\">this</span>.interceptorIndex; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">    HandlerInterceptor interceptor = interceptors[i];</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">     interceptor.afterCompletion(request, response, <span class=\"keyword\">this</span>.handler, ex);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Throwable ex2) &#123;</span><br><span class=\"line\">     logger.error(<span class=\"string\">&quot;HandlerInterceptor.afterCompletion threw exception&quot;</span>, ex2);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<hr>\n<h3 id=\"状态模式\"><a href=\"#状态模式\" class=\"headerlink\" title=\"状态模式\"></a>状态模式</h3><h5 id=\"定义-4\"><a href=\"#定义-4\" class=\"headerlink\" title=\"定义\"></a>定义</h5><h5 id=\"有限状态机\"><a href=\"#有限状态机\" class=\"headerlink\" title=\"有限状态机\"></a>有限状态机</h5><p>状态机有三个组成部分：状态、事件、动作。其中，事件也被称为转移条件。事件触发状态的转移及动作的执行。不过动作不是必须的，也可能只是转变状态，不执行任何动作。</p>\n<h4 id=\"示例-1\"><a href=\"#示例-1\" class=\"headerlink\" title=\"示例\"></a>示例</h4><p><strong>超级马里奥游戏</strong>：</p>\n<p>马里奥有多种形态，刚出生是小马里奥（Small Mario），可以进化成超级马里奥（Super Mario）、火焰马里奥（Fire Mario）、斗篷马里奥（Cape Mario）等等。    </p>\n<p>马里奥遇到不同的事件可以进行形态转变，并进行积分的增减。</p>\n<img src=\"https://tva1.sinaimg.cn/large/0081Kckwly1gk55y3hl4qj31310u0tj5.jpg\" alt=\"image-20201028171249300\"  />\n\n<h4 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h4><h5 id=\"方式1\"><a href=\"#方式1\" class=\"headerlink\" title=\"方式1\"></a>方式1</h5><p><strong>分支逻辑法</strong></p>\n<p>定义一个状态枚举类，一个状态机类，状态机类中提供4个方法，分别是：吃了蘑菇，获得斗篷，获得火焰，遇到怪物。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义状态</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> State &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    SMALL(<span class=\"number\">0</span>),</span><br><span class=\"line\">    SUPER(<span class=\"number\">1</span>),</span><br><span class=\"line\">    FIRE(<span class=\"number\">2</span>),</span><br><span class=\"line\">    CAPE(<span class=\"number\">3</span>),</span><br><span class=\"line\">    ;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> value;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">State</span><span class=\"params\">(<span class=\"keyword\">int</span> value)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.value = value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getValue</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 状态机</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MarioStateMachine</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> score;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> State currentState;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MarioStateMachine</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.score = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.currentState = State.SMALL;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">obtainMushRoom</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (currentState.equals(State.SMALL)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.score += <span class=\"number\">100</span>;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.currentState = State.SUPER;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">obtainCape</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (currentState.equals(State.SMALL) || currentState.equals(State.SUPER)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.score += <span class=\"number\">200</span>;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.currentState = State.CAPE;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">obtainFireFlower</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (currentState.equals(State.SMALL) || currentState.equals(State.SUPER)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.score += <span class=\"number\">300</span>;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.currentState = State.FIRE;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">meetMonster</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (currentState.equals(State.SUPER)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.score -= <span class=\"number\">100</span>;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.currentState = State.SMALL;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (currentState.equals(State.CAPE)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.score -= <span class=\"number\">200</span>;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.currentState = State.SMALL;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (currentState.equals(State.FIRE)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.score -= <span class=\"number\">300</span>;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.currentState = State.SMALL;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getScore</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.score;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> State <span class=\"title\">getCurrentState</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.currentState;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ApplicationDemo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 游戏开始</span></span><br><span class=\"line\">        MarioStateMachine mario = <span class=\"keyword\">new</span> MarioStateMachine();</span><br><span class=\"line\">        <span class=\"comment\">// 吃到蘑菇</span></span><br><span class=\"line\">        mario.obtainMushRoom();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> score = mario.getScore();</span><br><span class=\"line\">        State state = mario.getCurrentState();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;mario score：&quot;</span> + score + <span class=\"string\">&quot;; state: &quot;</span> + state);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>对于简单的状态机来说，分支逻辑这种实现方式是可以接受的。但是，对于复杂的状态机来说，这种实现方式极易漏写或者错写某个状态转移。除此之外，代码中充斥着大量的 if-else 或者 switch-case 分支判断逻辑，可读性和可维护性都很差。如果哪天修改了状态机中的某个状态转移，我们要在冗长的分支逻辑中找到对应的代码进行修改，很容易改错，引入 bug。</p>\n<h5 id=\"方式2\"><a href=\"#方式2\" class=\"headerlink\" title=\"方式2\"></a>方式2</h5><p><strong>查表法</strong></p>\n<p>使用二维数组表示状态和事件，如下表，第一维表示当前状态，第二维表示事件，值表示当前状态经过事件后，转移到的新状态及执行的动作。</p>\n<img src=\"https://tva1.sinaimg.cn/large/0081Kckwly1gk56dpaaawj31360don25.jpg\" alt=\"image-20201028172751310\"  />\n\n<p>定义一个事件类，事件类和State状态类可以组合成为上述的表格。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义状态</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> State &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    SMALL(<span class=\"number\">0</span>),</span><br><span class=\"line\">    SUPER(<span class=\"number\">1</span>),</span><br><span class=\"line\">    FIRE(<span class=\"number\">2</span>),</span><br><span class=\"line\">    CAPE(<span class=\"number\">3</span>),</span><br><span class=\"line\">    ;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> value;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">State</span><span class=\"params\">(<span class=\"keyword\">int</span> value)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.value = value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getValue</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> Event &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    GOT_MUSHROOM(<span class=\"number\">0</span>),</span><br><span class=\"line\">    GOT_CAPE(<span class=\"number\">1</span>),</span><br><span class=\"line\">    GOT_FIRE(<span class=\"number\">2</span>),</span><br><span class=\"line\">    MET_MONSTER(<span class=\"number\">3</span>),</span><br><span class=\"line\">    ;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> value;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Event</span><span class=\"params\">(<span class=\"keyword\">int</span> value)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.value = value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getValue</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>定义状态机，横坐标为State的value，纵坐标为Event的value。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MarioStateMachine</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> score;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> State currentState;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 状态值</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> State[][] transitionTable = &#123;</span><br><span class=\"line\">            &#123;State.SUPER, State.CAPE, State.FIRE, State.SMALL&#125;,</span><br><span class=\"line\">            &#123;State.SUPER, State.CAPE, State.FIRE, State.SMALL&#125;,</span><br><span class=\"line\">            &#123;State.CAPE, State.CAPE, State.CAPE, State.SMALL&#125;,</span><br><span class=\"line\">            &#123;State.FIRE, State.FIRE, State.FIRE, State.SMALL&#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 执行动作</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span>[][] actionTable = &#123;</span><br><span class=\"line\">            &#123;+<span class=\"number\">100</span>, +<span class=\"number\">200</span>, +<span class=\"number\">300</span>, +<span class=\"number\">0</span>&#125;,</span><br><span class=\"line\">            &#123;+<span class=\"number\">0</span>, +<span class=\"number\">200</span>, +<span class=\"number\">300</span>, -<span class=\"number\">100</span>&#125;,</span><br><span class=\"line\">            &#123;+<span class=\"number\">0</span>, +<span class=\"number\">0</span>, +<span class=\"number\">0</span>, -<span class=\"number\">200</span>&#125;,</span><br><span class=\"line\">            &#123;+<span class=\"number\">0</span>, +<span class=\"number\">0</span>, +<span class=\"number\">0</span>, -<span class=\"number\">300</span>&#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MarioStateMachine</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.score = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.currentState = State.SMALL;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">obtainMushRoom</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        executeEvent(Event.GOT_MUSHROOM);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">obtainCape</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        executeEvent(Event.GOT_CAPE);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">obtainFireFlow</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        executeEvent(Event.GOT_FIRE);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">meetMonster</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        executeEvent(Event.MET_MONSTER);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">executeEvent</span><span class=\"params\">(Event event)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> stateValue = <span class=\"keyword\">this</span>.currentState.getValue();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> eventValue = event.getValue();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.currentState = transitionTable[stateValue][eventValue];</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.score += actionTable[stateValue][eventValue];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getScore</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> score;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> State <span class=\"title\">getCurrentState</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> currentState;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>相对于分支逻辑的实现方式，查表法的代码实现更加清晰，可读性和可维护性更好。当修改状态机时，我们只需要修改 transitionTable 和 actionTable 两个二维数组即可。实际上，如果我们把这两个二维数组存储在配置文件中，当需要修改状态机时，我们甚至可以不修改任何代码，只需要修改配置文件就可以了。</p>\n<p><strong>查表法局限性</strong>：</p>\n<p>这个例子中，状态经过事件后，执行的动作只是得分的加减，如果动作比较复杂，例如，数据库入库，发送邮件，调用不同接口等等，就没法用简单的二维数组来表示了。</p>\n<h5 id=\"方式3\"><a href=\"#方式3\" class=\"headerlink\" title=\"方式3\"></a>方式3</h5><p><strong>状态模式</strong></p>\n<p>状态模式通过将事件触发的状态转移和动作执行，拆分到不同的状态类中，来避免分支判断逻辑。</p>\n<p>定义一个状态接口，接口就是状态，接口中的每个方法就是一种事件。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">IMario</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\">State <span class=\"title\">getName</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">obtainMushRoom</span><span class=\"params\">(MarioStateMachine stateMachine)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">obtainCape</span><span class=\"params\">(MarioStateMachine stateMachine)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">obtainFireFlow</span><span class=\"params\">(MarioStateMachine stateMachine)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">meetMonster</span><span class=\"params\">(MarioStateMachine stateMachine)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>每个状态接口的实现类就是具体的状态类（小马里奥类、超级马里奥类等）。</p>\n<p>因为状态类中不包含任何成员变量，所以我们考虑把状态类设计成单例的。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SmallMario</span> <span class=\"keyword\">implements</span> <span class=\"title\">IMario</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> SmallMario instance = <span class=\"keyword\">new</span> SmallMario();</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">SmallMario</span><span class=\"params\">()</span> </span>&#123;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> SmallMario <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> State <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> State.SMALL;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">obtainMushRoom</span><span class=\"params\">(MarioStateMachine stateMachine)</span> </span>&#123;</span><br><span class=\"line\">        stateMachine.setCurrentState(SuperMario.getInstance());</span><br><span class=\"line\">        stateMachine.setScore(stateMachine.getScore() + <span class=\"number\">100</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">obtainCape</span><span class=\"params\">(MarioStateMachine stateMachine)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">obtainFireFlow</span><span class=\"params\">(MarioStateMachine stateMachine)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">meetMonster</span><span class=\"params\">(MarioStateMachine stateMachine)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SuperMario</span> <span class=\"keyword\">implements</span> <span class=\"title\">IMario</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> SuperMario instance = <span class=\"keyword\">new</span> SuperMario();</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">SuperMario</span><span class=\"params\">()</span> </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> SuperMario <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> State <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> State.SUPER;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">obtainMushRoom</span><span class=\"params\">(MarioStateMachine stateMachine)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">obtainCape</span><span class=\"params\">(MarioStateMachine stateMachine)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">obtainFireFlow</span><span class=\"params\">(MarioStateMachine stateMachine)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">meetMonster</span><span class=\"params\">(MarioStateMachine stateMachine)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>状态机</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MarioStateMachine</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> score;</span><br><span class=\"line\">    <span class=\"comment\">// 用接口表示状态</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> IMario currentState;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MarioStateMachine</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.score = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.currentState = SmallMario.getInstance();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setCurrentState</span><span class=\"params\">(IMario currentState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.currentState = currentState;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">obtainMushRoom</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.currentState.obtainMushRoom(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">obtainCape</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.currentState.obtainCape(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">obtainFireFlow</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.currentState.obtainFireFlow(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">meetMonster</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.currentState.meetMonster(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getScore</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> score;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setScore</span><span class=\"params\">(<span class=\"keyword\">int</span> score)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.score = score;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> IMario <span class=\"title\">getCurrentState</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> currentState;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>使用方式</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ApplicationDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        MarioStateMachine mario = <span class=\"keyword\">new</span> MarioStateMachine();</span><br><span class=\"line\">        mario.obtainMushRoom();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> score = mario.getScore();</span><br><span class=\"line\">        State state = mario.getCurrentState().getName();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;mario score：&quot;</span> + score + <span class=\"string\">&quot;; state: &quot;</span> + state);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>状态模式中，每个具体的状态类只需要关心自己遇到不同事件后流转到的下一个状态以及得分值的增减。</p>\n<p>实际上，像游戏这种比较复杂的状态机，包含的状态比较多，优先推荐使用查表法，而状态模式会引入非常多的状态类，会导致代码比较难维护。相反，像电商下单、外卖下单这种类型的状态机，它们的状态并不多，状态转移也比较简单，但事件触发执行的动作包含的业务逻辑可能会比较复杂，所以，更加推荐使用状态模式来实现。</p>\n<hr>\n<h3 id=\"迭代器模式\"><a href=\"#迭代器模式\" class=\"headerlink\" title=\"迭代器模式\"></a>迭代器模式</h3><h4 id=\"定义-5\"><a href=\"#定义-5\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p>迭代器模式又叫游标模式，是用来遍历容器的；</p>\n<p>一个完整的迭代器模式一般会涉及<strong>容器</strong>和<strong>容器迭代器</strong>两部分。为了达到基于接口而非实现编程的目的，容器又包含容器接口、容器实现类，迭代器又包含迭代器接口、迭代器实现类。</p>\n<img src=\"https://tva1.sinaimg.cn/large/008i3skNgy1gwh9i7svhpj312s0isgms.jpg\" alt=\"image-20201028202346968\"  />\n\n<p>假设某个新的编程语言的基础类库中，还没有提供线性容器对应的迭代器，需要我们从零开始开发。</p>\n<h4 id=\"代码实现-1\"><a href=\"#代码实现-1\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h4><h5 id=\"简单版\"><a href=\"#简单版\" class=\"headerlink\" title=\"简单版\"></a>简单版</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Iterator</span>&lt;<span class=\"title\">E</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">hasNext</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">next</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\">E <span class=\"title\">currentItem</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ArrayIterator</span>&lt;<span class=\"title\">E</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">Iterator</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 游标</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> curstor;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> ArrayList&lt;E&gt; arrayList;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ArrayIterator</span><span class=\"params\">(ArrayList&lt;E&gt; arrayList)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.curstor = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.arrayList = arrayList;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hasNext</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> curstor != arrayList.size();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">next</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        curstor++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">currentItem</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (curstor &gt;= arrayList.size()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NoSuchElementException();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> arrayList.get(curstor);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        ArrayList&lt;String&gt; name = <span class=\"keyword\">new</span> ArrayList&lt;String&gt;();</span><br><span class=\"line\">        name.add(<span class=\"string\">&quot;张三&quot;</span>);</span><br><span class=\"line\">        name.add(<span class=\"string\">&quot;李四&quot;</span>);</span><br><span class=\"line\">        name.add(<span class=\"string\">&quot;王五&quot;</span>);</span><br><span class=\"line\">        Iterator&lt;String&gt; iterator = <span class=\"keyword\">new</span> ArrayIterator&lt;String&gt;(name);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (iterator.hasNext()) &#123;</span><br><span class=\"line\">            System.out.println(iterator.currentItem());</span><br><span class=\"line\">            iterator.next();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"优化\"><a href=\"#优化\" class=\"headerlink\" title=\"优化\"></a>优化</h5><p>在上面的代码实现中，我们需要将待遍历的容器对象，通过构造函数传递给迭代器类。为了封装迭代器的创建细节，我们可以在容器中定义iterator()方法创建迭代器；为实现基于接口编程，我们在List接口中定义这个方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">List</span>&lt;<span class=\"title\">E</span>&gt; </span>&#123;</span><br><span class=\"line\">  <span class=\"function\">Iterator <span class=\"title\">iterator</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">  <span class=\"comment\">//...省略其他接口函数...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ArrayList</span>&lt;<span class=\"title\">E</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">List</span>&lt;<span class=\"title\">E</span>&gt; </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//...</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> Iterator <span class=\"title\">iterator</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ArrayIterator(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//...省略其他代码</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    List&lt;String&gt; names = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">    names.add(<span class=\"string\">&quot;aa&quot;</span>);</span><br><span class=\"line\">    names.add(<span class=\"string\">&quot;bb&quot;</span>);</span><br><span class=\"line\">    names.add(<span class=\"string\">&quot;cc&quot;</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    Iterator&lt;String&gt; iterator = names.iterator();</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (iterator.hasNext()) &#123;</span><br><span class=\"line\">      System.out.println(iterator.currentItem());</span><br><span class=\"line\">      iterator.next();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>迭代器的实现思路总结：迭代器中需要定义 hasNext()、currentItem()、next() 三个最基本的方法。待遍历的容器对象通过依赖注入传递到迭代器类中。容器通过 iterator() 方法来创建迭代器。</p>\n<img src=\"https://tva1.sinaimg.cn/large/008i3skNgy1gwh9io7x0ij315k0o0gnc.jpg\" alt=\"image-20201117205945886\"  />\n\n<h4 id=\"迭代器模式的优势\"><a href=\"#迭代器模式的优势\" class=\"headerlink\" title=\"迭代器模式的优势\"></a>迭代器模式的优势</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; names = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">names.add(<span class=\"string\">&quot;xzg&quot;</span>);</span><br><span class=\"line\">names.add(<span class=\"string\">&quot;wang&quot;</span>);</span><br><span class=\"line\">names.add(<span class=\"string\">&quot;zheng&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 第一种遍历方式：for循环</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; names.size(); i++) &#123;</span><br><span class=\"line\">  System.out.print(names.get(i) + <span class=\"string\">&quot;,&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 第二种遍历方式：foreach循环</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (String name : names) &#123;</span><br><span class=\"line\">  System.out.print(name + <span class=\"string\">&quot;,&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 第三种遍历方式：迭代器遍历</span></span><br><span class=\"line\">Iterator&lt;String&gt; iterator = names.iterator();</span><br><span class=\"line\"><span class=\"keyword\">while</span> (iterator.hasNext()) &#123;</span><br><span class=\"line\">  System.out.print(iterator.next() + <span class=\"string\">&quot;,&quot;</span>);<span class=\"comment\">//Java中的迭代器接口，next()既移动游标又返回数据</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>对遍历方式比较简单的线性数据结构，直接使用 for 循环来遍历就足够了。但是，对于复杂的数据结构（比如树、图）来说，有各种复杂的遍历方式。比如，树有前中后序、按层遍历，图有深度优先、广度优先遍历等等。如果由客户端代码来实现这些遍历算法，势必增加开发成本，而且容易写错。如果将这部分遍历的逻辑写到容器类中，也会导致容器类代码的复杂性；</p>\n<p>将游标指向的当前位置等信息，存储在迭代器类中，每个迭代器独享游标信息。这样，我们就可以创建多个不同的迭代器，同时对同一个容器进行遍历而互不影响；</p>\n<p>容器和迭代器都提供了抽象的接口，方便我们在开发的时候，基于接口而非具体的实现编程。当需要切换新的遍历算法的时候，比如，从前往后遍历链表切换成从后往前遍历链表，客户端代码只需要将迭代器类从 LinkedIterator 切换为 ReversedLinkedIterator 即可，其他代码都不需要修改。除此之外，添加新的遍历算法，我们只需要扩展新的迭代器类，也更符合开闭原则。</p>\n<h4 id=\"遍历的同时增删元素\"><a href=\"#遍历的同时增删元素\" class=\"headerlink\" title=\"遍历的同时增删元素\"></a>遍历的同时增删元素</h4><p><strong>删除元素</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RemoveDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        ArrayList&lt;String&gt; names = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        names.add(<span class=\"string\">&quot;a&quot;</span>);</span><br><span class=\"line\">        names.add(<span class=\"string\">&quot;b&quot;</span>);</span><br><span class=\"line\">        names.add(<span class=\"string\">&quot;c&quot;</span>);</span><br><span class=\"line\">        names.add(<span class=\"string\">&quot;d&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        Iterator&lt;String&gt; iterator = <span class=\"keyword\">new</span> ArrayIterator&lt;String&gt;(names);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 游标指向b时，移除a</span></span><br><span class=\"line\">        iterator.next();</span><br><span class=\"line\">        names.remove(<span class=\"string\">&quot;a&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<img src=\"https://tva1.sinaimg.cn/large/0081Kckwly1gl1gk4i1d1j30pi0mw0ux.jpg\" alt=\"image-20201125153805528\"  />\n\n<p>在遍历过程删除元素，结果是不可预期的，有时候有问题，有时候没问题，要视删除元素的位置而定。</p>\n<p><strong>增加元素</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AddDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        ArrayList&lt;String&gt; names = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        names.add(<span class=\"string\">&quot;a&quot;</span>);</span><br><span class=\"line\">        names.add(<span class=\"string\">&quot;b&quot;</span>);</span><br><span class=\"line\">        names.add(<span class=\"string\">&quot;c&quot;</span>);</span><br><span class=\"line\">        names.add(<span class=\"string\">&quot;d&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        Iterator&lt;String&gt; iterator = <span class=\"keyword\">new</span> ArrayIterator&lt;String&gt;(names);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 游标指向b时，将x插入下标为0的位置</span></span><br><span class=\"line\">        iterator.next();</span><br><span class=\"line\">        names.add(<span class=\"number\">0</span>, <span class=\"string\">&quot;x&quot;</span>);</span><br><span class=\"line\">      </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<img src=\"https://tva1.sinaimg.cn/large/0081Kckwly1gl1gwvvbw6j30pg0jw40l.jpg\" alt=\"image-20201125155021826\"  />\n\n<p>跟删除情况类似，如果我们在游标的后面添加元素，就不会存在任何问题。所以，在遍历的同时添加集合元素也是一种不可预期行为。</p>\n<p><strong>如何应对遍历时改变集合导致的不可预期行为</strong></p>\n<p>迭代器要在遍历的元素的时候判断集合是否有增删改数据，如果有就报错。</p>\n<h4 id=\"JDK-ArrayList中的迭代器\"><a href=\"#JDK-ArrayList中的迭代器\" class=\"headerlink\" title=\"JDK ArrayList中的迭代器\"></a>JDK ArrayList中的迭代器</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ArrayList</span>&lt;<span class=\"title\">E</span>&gt; <span class=\"keyword\">extends</span> <span class=\"title\">AbstractList</span>&lt;<span class=\"title\">E</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\">        <span class=\"keyword\">implements</span> <span class=\"title\">List</span>&lt;<span class=\"title\">E</span>&gt;, <span class=\"title\">RandomAccess</span>, <span class=\"title\">Cloneable</span>, <span class=\"title\">java</span>.<span class=\"title\">io</span>.<span class=\"title\">Serializable</span> </span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Iterator&lt;E&gt; <span class=\"title\">iterator</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    \t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Itr();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * An optimized version of AbstractList.Itr</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Itr</span> <span class=\"keyword\">implements</span> <span class=\"title\">Iterator</span>&lt;<span class=\"title\">E</span>&gt; </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> cursor;       <span class=\"comment\">// index of next element to return</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> lastRet = -<span class=\"number\">1</span>; <span class=\"comment\">// index of last element returned; -1 if no such</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> expectedModCount = modCount;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hasNext</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> cursor != size;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">next</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            checkForComodification();</span><br><span class=\"line\">            <span class=\"keyword\">int</span> i = cursor;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i &gt;= size)</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NoSuchElementException();</span><br><span class=\"line\">            Object[] elementData = ArrayList.<span class=\"keyword\">this</span>.elementData;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i &gt;= elementData.length)</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ConcurrentModificationException();</span><br><span class=\"line\">            cursor = i + <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> (E) elementData[lastRet = i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">remove</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (lastRet &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException();</span><br><span class=\"line\">            checkForComodification();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                ArrayList.<span class=\"keyword\">this</span>.remove(lastRet);</span><br><span class=\"line\">                cursor = lastRet;</span><br><span class=\"line\">                lastRet = -<span class=\"number\">1</span>;</span><br><span class=\"line\">                expectedModCount = modCount;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (IndexOutOfBoundsException ex) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ConcurrentModificationException();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">checkForComodification</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (modCount != expectedModCount)</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ConcurrentModificationException();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"访问者模式\"><a href=\"#访问者模式\" class=\"headerlink\" title=\"访问者模式\"></a>访问者模式</h3><h4 id=\"寻源\"><a href=\"#寻源\" class=\"headerlink\" title=\"寻源\"></a>寻源</h4><p>假设我们从网站上爬取了很多资源文件，它们的格式有三种：PDF、PPT、Word。我们现在要开发一个工具来处理这批资源文件。这个工具的其中一个功能是，把这些资源文件中的文本内容抽取出来放到 txt 文件中。</p>\n<h5 id=\"实现1-2\"><a href=\"#实现1-2\" class=\"headerlink\" title=\"实现1\"></a>实现1</h5><p>ResourceFile 是一个抽象类，包含一个抽象函数 extract2txt()。PdfFile、PPTFile、WordFile 都继承 ResourceFile 类，并且重写了 extract2txt() 函数。在 ToolApplication 中，我们可以利用多态特性，根据对象的实际类型，来决定执行哪个方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ResourceFile</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">protected</span> String filePath;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ResourceFile</span><span class=\"params\">(String filePath)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.filePath = filePath;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">extract2txt</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PPTFile</span> <span class=\"keyword\">extends</span> <span class=\"title\">ResourceFile</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">PPTFile</span><span class=\"params\">(String filePath)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(filePath);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">extract2txt</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//...省略一大坨从PPT中抽取文本的代码...</span></span><br><span class=\"line\">    <span class=\"comment\">//...将抽取出来的文本保存在跟filePath同名的.txt文件中...</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;Extract PPT.&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PdfFile</span> <span class=\"keyword\">extends</span> <span class=\"title\">ResourceFile</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">PdfFile</span><span class=\"params\">(String filePath)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(filePath);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">extract2txt</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;Extract PDF.&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WordFile</span> <span class=\"keyword\">extends</span> <span class=\"title\">ResourceFile</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">WordFile</span><span class=\"params\">(String filePath)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(filePath);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">extract2txt</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;Extract WORD.&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 运行结果是：</span></span><br><span class=\"line\"><span class=\"comment\">// Extract PDF.</span></span><br><span class=\"line\"><span class=\"comment\">// Extract WORD.</span></span><br><span class=\"line\"><span class=\"comment\">// Extract PPT.</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ToolApplication</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    List&lt;ResourceFile&gt; resourceFiles = listAllResourceFiles(args[<span class=\"number\">0</span>]);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (ResourceFile resourceFile : resourceFiles) &#123;</span><br><span class=\"line\">      resourceFile.extract2txt();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> List&lt;ResourceFile&gt; <span class=\"title\">listAllResourceFiles</span><span class=\"params\">(String resourceDirectory)</span> </span>&#123;</span><br><span class=\"line\">    List&lt;ResourceFile&gt; resourceFiles = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">    <span class=\"comment\">//...根据后缀(pdf/ppt/word)由工厂方法创建不同的类对象(PdfFile/PPTFile/WordFile)</span></span><br><span class=\"line\">    resourceFiles.add(<span class=\"keyword\">new</span> PdfFile(<span class=\"string\">&quot;a.pdf&quot;</span>));</span><br><span class=\"line\">    resourceFiles.add(<span class=\"keyword\">new</span> WordFile(<span class=\"string\">&quot;b.word&quot;</span>));</span><br><span class=\"line\">    resourceFiles.add(<span class=\"keyword\">new</span> PPTFile(<span class=\"string\">&quot;c.ppt&quot;</span>));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> resourceFiles;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果工具的功能不停地扩展，不仅要能抽取文本内容，还要支持压缩、提取文件元信息（文件名、大小、更新时间等等）构建索引等一系列的功能，那如果我们继续按照上面的实现思路，就会存在这样几个问题：</p>\n<p>违背开闭原则，添加一个新的功能，所有类的代码都要修改；</p>\n<p>虽然功能增多，每个类的代码都不断膨胀，可读性和可维护性都变差了；</p>\n<p>把所有比较上层的业务逻辑都耦合到 PdfFile、PPTFile、WordFile 类中，导致这些类的职责不够单一，变成了大杂烩。</p>\n<p><strong>把业务操作和具体数据解耦，设计成独立的类。</strong></p>\n<h5 id=\"实现2-2\"><a href=\"#实现2-2\" class=\"headerlink\" title=\"实现2\"></a>实现2</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ResourceFile</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">protected</span> String filePath;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ResourceFile</span><span class=\"params\">(String filePath)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.filePath = filePath;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PdfFile</span> <span class=\"keyword\">extends</span> <span class=\"title\">ResourceFile</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">PdfFile</span><span class=\"params\">(String filePath)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(filePath);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//...PPTFile、WordFile代码省略...</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Extractor</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">extract2txt</span><span class=\"params\">(PPTFile pptFile)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;Extract PPT.&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">extract2txt</span><span class=\"params\">(PdfFile pdfFile)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;Extract PDF.&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">extract2txt</span><span class=\"params\">(WordFile wordFile)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;Extract WORD.&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ToolApplication</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    Extractor extractor = <span class=\"keyword\">new</span> Extractor();</span><br><span class=\"line\">    List&lt;ResourceFile&gt; resourceFiles = listAllResourceFiles(args[<span class=\"number\">0</span>]);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (ResourceFile resourceFile : resourceFiles) &#123;</span><br><span class=\"line\">      extractor.extract2txt(resourceFile);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> List&lt;ResourceFile&gt; <span class=\"title\">listAllResourceFiles</span><span class=\"params\">(String resourceDirectory)</span> </span>&#123;</span><br><span class=\"line\">    List&lt;ResourceFile&gt; resourceFiles = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">    <span class=\"comment\">//...根据后缀(pdf/ppt/word)由工厂方法创建不同的类对象(PdfFile/PPTFile/WordFile)</span></span><br><span class=\"line\">    resourceFiles.add(<span class=\"keyword\">new</span> PdfFile(<span class=\"string\">&quot;a.pdf&quot;</span>));</span><br><span class=\"line\">    resourceFiles.add(<span class=\"keyword\">new</span> WordFile(<span class=\"string\">&quot;b.word&quot;</span>));</span><br><span class=\"line\">    resourceFiles.add(<span class=\"keyword\">new</span> PPTFile(<span class=\"string\">&quot;c.ppt&quot;</span>));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> resourceFiles;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面的代码用到了方法重载，但是实际上是没法编译通过的，因为重载是静态绑定，我们传入ResourceFile类型的变量，但是找不到对应变量类型的方法。</p>\n<h5 id=\"实现3-1\"><a href=\"#实现3-1\" class=\"headerlink\" title=\"实现3\"></a>实现3</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ResourceFile</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">protected</span> String filePath;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ResourceFile</span><span class=\"params\">(String filePath)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.filePath = filePath;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">accept</span><span class=\"params\">(Extractor extractor)</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PdfFile</span> <span class=\"keyword\">extends</span> <span class=\"title\">ResourceFile</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">PdfFile</span><span class=\"params\">(String filePath)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(filePath);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">accept</span><span class=\"params\">(Extractor extractor)</span> </span>&#123;</span><br><span class=\"line\">    extractor.extract2txt(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//...PPTFile、WordFile跟PdfFile类似，这里就省略了...</span></span><br><span class=\"line\"><span class=\"comment\">//...Extractor代码不变...</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ToolApplication</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    Extractor extractor = <span class=\"keyword\">new</span> Extractor();</span><br><span class=\"line\">    List&lt;ResourceFile&gt; resourceFiles = listAllResourceFiles(args[<span class=\"number\">0</span>]);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (ResourceFile resourceFile : resourceFiles) &#123;</span><br><span class=\"line\">      resourceFile.accept(extractor);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> List&lt;ResourceFile&gt; <span class=\"title\">listAllResourceFiles</span><span class=\"params\">(String resourceDirectory)</span> </span>&#123;</span><br><span class=\"line\">    List&lt;ResourceFile&gt; resourceFiles = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">    <span class=\"comment\">//...根据后缀(pdf/ppt/word)由工厂方法创建不同的类对象(PdfFile/PPTFile/WordFile)</span></span><br><span class=\"line\">    resourceFiles.add(<span class=\"keyword\">new</span> PdfFile(<span class=\"string\">&quot;a.pdf&quot;</span>));</span><br><span class=\"line\">    resourceFiles.add(<span class=\"keyword\">new</span> WordFile(<span class=\"string\">&quot;b.word&quot;</span>));</span><br><span class=\"line\">    resourceFiles.add(<span class=\"keyword\">new</span> PPTFile(<span class=\"string\">&quot;c.ppt&quot;</span>));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> resourceFiles;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>现在，如果要继续添加新的功能，比如前面提到的压缩功能，根据不同的文件类型，使用不同的压缩算法来压缩资源文件，那我们该如何实现呢？我们需要实现一个类似 Extractor 类的新类 Compressor 类，在其中定义三个重载函数，实现对不同类型资源文件的压缩。除此之外，我们还要在每个资源文件类中定义新的 accept 重载函数。具体的代码如下所示：</p>\n<h5 id=\"实现4-1\"><a href=\"#实现4-1\" class=\"headerlink\" title=\"实现4\"></a>实现4</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ResourceFile</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">protected</span> String filePath;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ResourceFile</span><span class=\"params\">(String filePath)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.filePath = filePath;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">accept</span><span class=\"params\">(Extractor extractor)</span></span>;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">accept</span><span class=\"params\">(Compressor compressor)</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PdfFile</span> <span class=\"keyword\">extends</span> <span class=\"title\">ResourceFile</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">PdfFile</span><span class=\"params\">(String filePath)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(filePath);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">accept</span><span class=\"params\">(Extractor extractor)</span> </span>&#123;</span><br><span class=\"line\">    extractor.extract2txt(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">accept</span><span class=\"params\">(Compressor compressor)</span> </span>&#123;</span><br><span class=\"line\">    compressor.compress(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//...PPTFile、WordFile跟PdfFile类似，这里就省略了...</span></span><br><span class=\"line\"><span class=\"comment\">//...Extractor代码不变</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ToolApplication</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    Extractor extractor = <span class=\"keyword\">new</span> Extractor();</span><br><span class=\"line\">    List&lt;ResourceFile&gt; resourceFiles = listAllResourceFiles(args[<span class=\"number\">0</span>]);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (ResourceFile resourceFile : resourceFiles) &#123;</span><br><span class=\"line\">      resourceFile.accept(extractor);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    Compressor compressor = <span class=\"keyword\">new</span> Compressor();</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(ResourceFile resourceFile : resourceFiles) &#123;</span><br><span class=\"line\">      resourceFile.accept(compressor);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> List&lt;ResourceFile&gt; <span class=\"title\">listAllResourceFiles</span><span class=\"params\">(String resourceDirectory)</span> </span>&#123;</span><br><span class=\"line\">    List&lt;ResourceFile&gt; resourceFiles = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">    <span class=\"comment\">//...根据后缀(pdf/ppt/word)由工厂方法创建不同的类对象(PdfFile/PPTFile/WordFile)</span></span><br><span class=\"line\">    resourceFiles.add(<span class=\"keyword\">new</span> PdfFile(<span class=\"string\">&quot;a.pdf&quot;</span>));</span><br><span class=\"line\">    resourceFiles.add(<span class=\"keyword\">new</span> WordFile(<span class=\"string\">&quot;b.word&quot;</span>));</span><br><span class=\"line\">    resourceFiles.add(<span class=\"keyword\">new</span> PPTFile(<span class=\"string\">&quot;c.ppt&quot;</span>));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> resourceFiles;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面代码还存在一些问题，添加一个新的业务，还是需要修改每个资源文件类，违反了开闭原则。</p>\n<p>针对这个问题，我们抽象出来一个 Visitor 接口，包含是三个命名非常通用的 visit() 重载函数，分别处理三种不同类型的资源文件。具体做什么业务处理，由实现这个 Visitor 接口的具体的类来决定，比如 Extractor 负责抽取文本内容，Compressor 负责压缩。当我们新添加一个业务功能的时候，资源文件类不需要做任何修改，只需要修改 ToolApplication 的代码就可以了。</p>\n<h5 id=\"实现5-1\"><a href=\"#实现5-1\" class=\"headerlink\" title=\"实现5\"></a>实现5</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ResourceFile</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">protected</span> String filePath;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ResourceFile</span><span class=\"params\">(String filePath)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.filePath = filePath;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">accept</span><span class=\"params\">(Visitor vistor)</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PdfFile</span> <span class=\"keyword\">extends</span> <span class=\"title\">ResourceFile</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">PdfFile</span><span class=\"params\">(String filePath)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(filePath);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">accept</span><span class=\"params\">(Visitor visitor)</span> </span>&#123;</span><br><span class=\"line\">    visitor.visit(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//...PPTFile、WordFile跟PdfFile类似，这里就省略了...</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Visitor</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">visit</span><span class=\"params\">(PdfFile pdfFile)</span></span>;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">visit</span><span class=\"params\">(PPTFile pdfFile)</span></span>;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">visit</span><span class=\"params\">(WordFile pdfFile)</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Extractor</span> <span class=\"keyword\">implements</span> <span class=\"title\">Visitor</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">visit</span><span class=\"params\">(PPTFile pptFile)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;Extract PPT.&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">visit</span><span class=\"params\">(PdfFile pdfFile)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;Extract PDF.&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">visit</span><span class=\"params\">(WordFile wordFile)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;Extract WORD.&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Compressor</span> <span class=\"keyword\">implements</span> <span class=\"title\">Visitor</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">visit</span><span class=\"params\">(PPTFile pptFile)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;Compress PPT.&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">visit</span><span class=\"params\">(PdfFile pdfFile)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;Compress PDF.&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">visit</span><span class=\"params\">(WordFile wordFile)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;Compress WORD.&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ToolApplication</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    List&lt;ResourceFile&gt; resourceFiles = listAllResourceFiles(args[<span class=\"number\">0</span>]);</span><br><span class=\"line\">      </span><br><span class=\"line\">    Extractor extractor = <span class=\"keyword\">new</span> Extractor();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (ResourceFile resourceFile : resourceFiles) &#123;</span><br><span class=\"line\">      resourceFile.accept(extractor);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    Compressor compressor = <span class=\"keyword\">new</span> Compressor();</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(ResourceFile resourceFile : resourceFiles) &#123;</span><br><span class=\"line\">      resourceFile.accept(compressor);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> List&lt;ResourceFile&gt; <span class=\"title\">listAllResourceFiles</span><span class=\"params\">(String resourceDirectory)</span> </span>&#123;</span><br><span class=\"line\">    List&lt;ResourceFile&gt; resourceFiles = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">    <span class=\"comment\">//...根据后缀(pdf/ppt/word)由工厂方法创建不同的类对象(PdfFile/PPTFile/WordFile)</span></span><br><span class=\"line\">    resourceFiles.add(<span class=\"keyword\">new</span> PdfFile(<span class=\"string\">&quot;a.pdf&quot;</span>));</span><br><span class=\"line\">    resourceFiles.add(<span class=\"keyword\">new</span> WordFile(<span class=\"string\">&quot;b.word&quot;</span>));</span><br><span class=\"line\">    resourceFiles.add(<span class=\"keyword\">new</span> PPTFile(<span class=\"string\">&quot;c.ppt&quot;</span>));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> resourceFiles;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"回首\"><a href=\"#回首\" class=\"headerlink\" title=\"回首\"></a>回首</h4><h5 id=\"定义-6\"><a href=\"#定义-6\" class=\"headerlink\" title=\"定义\"></a>定义</h5><p>允许一个或者多个操作应用到一组对象上，解耦操作和对象本身。</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/0081Kckwly1gl1k7t8oj9j31xq0u07i1.jpg\" alt=\"image-20201125174436993\"></p>\n<h5 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h5><p>访问者模式针对的是一组类型不同的对象（PdfFile、PPTFile、WordFile）。不过，尽管这组对象的类型是不同的，但是，它们继承相同的父类（ResourceFile）或者实现相同的接口。在不同的应用场景下，\b我们需要对这组对象进行一系列不相关的业务操作（抽取文本、压缩等），但为了避免不断添加功能导致类（PdfFile、PPTFile、WordFile）不断膨胀，职责越来越不单一，以及避免频繁地添加功能导致的频繁代码修改，我们使用访问者模式，将对象与操作解耦，将这些业务操作抽离出来，定义在独立细分的访问者类（Extractor、Compressor）中。</p>\n<h4 id=\"替代方式\"><a href=\"#替代方式\" class=\"headerlink\" title=\"替代方式\"></a>替代方式</h4><p>我们还可以利用工厂模式来实现，定义一个包含 extract2txt() 接口函数的 Extractor 接口。PdfExtractor、PPTExtractor、WordExtractor 类实现 Extractor 接口，并且在各自的 extract2txt() 函数中，分别实现 Pdf、PPT、Word 格式文件的文本内容抽取。ExtractorFactory 工厂类根据不同的文件类型，返回不同的 Extractor。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ResourceFile</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">protected</span> String filePath;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ResourceFile</span><span class=\"params\">(String filePath)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.filePath = filePath;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> ResourceFileType <span class=\"title\">getType</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PdfFile</span> <span class=\"keyword\">extends</span> <span class=\"title\">ResourceFile</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">PdfFile</span><span class=\"params\">(String filePath)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(filePath);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> ResourceFileType <span class=\"title\">getType</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ResourceFileType.PDF;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//...PPTFile/WordFile跟PdfFile代码结构类似，此处省略...</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Extractor</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">extract2txt</span><span class=\"params\">(ResourceFile resourceFile)</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PdfExtractor</span> <span class=\"keyword\">implements</span> <span class=\"title\">Extractor</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">extract2txt</span><span class=\"params\">(ResourceFile resourceFile)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//...PPTExtractor/WordExtractor跟PdfExtractor代码结构类似，此处省略...</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ExtractorFactory</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Map&lt;ResourceFileType, Extractor&gt; extractors = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">  <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">    extractors.put(ResourceFileType.PDF, <span class=\"keyword\">new</span> PdfExtractor());</span><br><span class=\"line\">    extractors.put(ResourceFileType.PPT, <span class=\"keyword\">new</span> PPTExtractor());</span><br><span class=\"line\">    extractors.put(ResourceFileType.WORD, <span class=\"keyword\">new</span> WordExtractor());</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Extractor <span class=\"title\">getExtractor</span><span class=\"params\">(ResourceFileType type)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> extractors.get(type);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ToolApplication</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    List&lt;ResourceFile&gt; resourceFiles = listAllResourceFiles(args[<span class=\"number\">0</span>]);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (ResourceFile resourceFile : resourceFiles) &#123;</span><br><span class=\"line\">      Extractor extractor = ExtractorFactory.getExtractor(resourceFile.getType());</span><br><span class=\"line\">      extractor.extract2txt(resourceFile);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> List&lt;ResourceFile&gt; <span class=\"title\">listAllResourceFiles</span><span class=\"params\">(String resourceDirectory)</span> </span>&#123;</span><br><span class=\"line\">    List&lt;ResourceFile&gt; resourceFiles = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">    <span class=\"comment\">//...根据后缀(pdf/ppt/word)由工厂方法创建不同的类对象(PdfFile/PPTFile/WordFile)</span></span><br><span class=\"line\">    resourceFiles.add(<span class=\"keyword\">new</span> PdfFile(<span class=\"string\">&quot;a.pdf&quot;</span>));</span><br><span class=\"line\">    resourceFiles.add(<span class=\"keyword\">new</span> WordFile(<span class=\"string\">&quot;b.word&quot;</span>));</span><br><span class=\"line\">    resourceFiles.add(<span class=\"keyword\">new</span> PPTFile(<span class=\"string\">&quot;c.ppt&quot;</span>));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> resourceFiles;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>对于资源文件处理工具这个例子，如果工具提供的功能并不是非常多，只有几个而已，更推荐使用工厂模式的实现方式，毕竟代码更加清晰、易懂。</p>\n<p>相反，如果工具提供非常多的功能，比如有十几个，更推荐使用访问者模式，因为访问者模式需要定义的类要比工厂模式的实现方式少很多，类太多也会影响到代码的可维护性。</p>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p><a href=\"https://time.geekbang.org/column/intro/100039001\">设计模式之美-王争</a></p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ckwc7u3mc0001tc6c5di24cjq","category_id":"ckwc7u3me0003tc6c7mvo7z9g","_id":"ckwc7u3mi000btc6chota5y3g"},{"post_id":"ckwc7u3mg0006tc6c9hqibo3b","category_id":"ckwc7u3me0003tc6c7mvo7z9g","_id":"ckwc7u3mj000dtc6cbf3ie1x6"},{"post_id":"ckwc7u3md0002tc6c12429ivf","category_id":"ckwc7u3me0003tc6c7mvo7z9g","_id":"ckwc7u3mk000ftc6c128o4opp"},{"post_id":"ckwc7u3mf0004tc6c0cawg416","category_id":"ckwc7u3mi000atc6c37kl0bog","_id":"ckwc7u3ml000jtc6cclb70ubl"},{"post_id":"ckwc7u3mg0005tc6c0m909f9y","category_id":"ckwc7u3mk000gtc6c0e6o4j08","_id":"ckwc7u3ml000ntc6cdgo00xtt"},{"post_id":"ckwc7u3mh0008tc6cbdpcfjtk","category_id":"ckwc7u3ml000ktc6cd0qmdhio","_id":"ckwc7u3mm000stc6cc2oc0kwu"},{"post_id":"ckwc7u3mi0009tc6cdpuc46ja","category_id":"ckwc7u3ml000ktc6cd0qmdhio","_id":"ckwc7u3mn000wtc6ca7ysg1se"},{"post_id":"ckwc7u3mm000ttc6cduesa1kj","category_id":"ckwc7u3mk000gtc6c0e6o4j08","_id":"ckwc7u3mn000ztc6ce045d989"},{"post_id":"ckwc7u3mi000ctc6c07ilevgc","category_id":"ckwc7u3ml000ktc6cd0qmdhio","_id":"ckwc7u3mo0012tc6c68owa73d"},{"post_id":"ckwc7u3mn000utc6c25akgbmk","category_id":"ckwc7u3mk000gtc6c0e6o4j08","_id":"ckwc7u3mo0013tc6c402z3rr1"},{"post_id":"ckwc7u3mj000etc6c3xtf44ts","category_id":"ckwc7u3ml000ktc6cd0qmdhio","_id":"ckwc7u3mo0014tc6c6ih2bcgj"},{"post_id":"ckwc7u3mk000htc6cdz1y42v1","category_id":"ckwc7u3mo0010tc6chkps79mc","_id":"ckwc7u3mo0017tc6cfjua5xot"},{"post_id":"ckwc7u3mk000itc6chgtaexyb","category_id":"ckwc7u3mo0010tc6chkps79mc","_id":"ckwc7u3mp0019tc6c42f303hx"},{"post_id":"ckwc7u3ml000ltc6cbpip1b7a","category_id":"ckwc7u3mo0010tc6chkps79mc","_id":"ckwc7u3mp001atc6cehbp2mse"},{"post_id":"ckwc7u3ml000mtc6c9qkg7w2a","category_id":"ckwc7u3mo0018tc6c62kb1wvc","_id":"ckwc7u3mp001ctc6cht704zen"},{"post_id":"ckwc7u3mn000xtc6chha71p2u","category_id":"ckwc7u3mo0018tc6c62kb1wvc","_id":"ckwc7u3mp001gtc6c3zdo4e57"},{"post_id":"ckwc7u3mn000ytc6c3wh08uzw","category_id":"ckwc7u3mp001ftc6ch89hgrmq","_id":"ckwc7u3mp001itc6c6zcg16zm"},{"post_id":"ckwc7u3mo0011tc6cbzrz6uvs","category_id":"ckwc7u3mp001htc6c6wym8qzl","_id":"ckwc7u3mp001ktc6cett958nk"},{"post_id":"ckwc7u3ml000ptc6c9k9t2tgp","category_id":"ckwc7u3mp001btc6cfqrk0oja","_id":"ckwc7u3mq001mtc6ce7kwccpm"},{"post_id":"ckwc7u3ml000ptc6c9k9t2tgp","category_id":"ckwc7u3mp001jtc6c8a8j9mub","_id":"ckwc7u3mq001ntc6cepsz6ovw"},{"post_id":"ckwc7u3mm000qtc6c8eyy8lsv","category_id":"ckwc7u3mp001btc6cfqrk0oja","_id":"ckwc7u3mq001otc6cbtjkane7"},{"post_id":"ckwc7u3mm000qtc6c8eyy8lsv","category_id":"ckwc7u3mp001jtc6c8a8j9mub","_id":"ckwc7u3mq001ptc6ch9dy45y6"}],"PostTag":[],"Tag":[]}}