{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/local-search.js","path":"js/local-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/live2d-widget/LICENSE","path":"live2d-widget/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/live2d-widget/README.md","path":"live2d-widget/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/live2d-widget/autoload.js","path":"live2d-widget/autoload.js","modified":1,"renderable":1},{"_id":"themes/next/source/live2d-widget/live2d.min.js","path":"live2d-widget/live2d.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/live2d-widget/waifu-tips.js","path":"live2d-widget/waifu-tips.js","modified":1,"renderable":1},{"_id":"themes/next/source/live2d-widget/waifu-tips.json","path":"live2d-widget/waifu-tips.json","modified":1,"renderable":1},{"_id":"themes/next/source/live2d-widget/waifu.css","path":"live2d-widget/waifu.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/anime.min.js","path":"lib/anime.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/live2d-widget/assets/screenshot-1.png","path":"live2d-widget/assets/screenshot-1.png","modified":1,"renderable":1},{"_id":"themes/next/source/live2d-widget/assets/screenshot-2.png","path":"live2d-widget/assets/screenshot-2.png","modified":1,"renderable":1},{"_id":"themes/next/source/live2d-widget/assets/screenshot-3.png","path":"live2d-widget/assets/screenshot-3.png","modified":1,"renderable":1},{"_id":"themes/next/source/live2d-widget/demo/demo.html","path":"live2d-widget/demo/demo.html","modified":1,"renderable":1},{"_id":"themes/next/source/live2d-widget/demo/login.html","path":"live2d-widget/demo/login.html","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","path":"lib/font-awesome/css/all.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","path":"lib/font-awesome/webfonts/fa-brands-400.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","path":"lib/font-awesome/webfonts/fa-regular-400.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","path":"lib/font-awesome/webfonts/fa-solid-900.woff2","modified":1,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"4ea877abdd287d2c3294a5c2daafc511b1aeb8da","modified":1598185300313},{"_id":"source/_posts/.DS_Store","hash":"8cb43323c565f81f55339fcbb50d76113d47b80e","modified":1598185300312},{"_id":"source/_posts/CopyOnWriteArrayList分析.md","hash":"7f2da4af942c84b32eee4449d5ae4ff21b0356a3","modified":1598185043765},{"_id":"source/_posts/ArrayList源码分析.md","hash":"8aa7388aa6908dff270d92098de995c4072da794","modified":1598185033485},{"_id":"source/_posts/Java中字符串分割问题.md","hash":"609dd06603e70d888ba5047f3bf3f15ceb5a5bb1","modified":1598182945325},{"_id":"source/_posts/Executors中的线程池.md","hash":"cd1340760e2c79ca7c38cffa37581b4e37a41ec2","modified":1598185019506},{"_id":"source/_posts/Linux基本操作命令.md","hash":"82af550e1327b575006460d46a5573eafda3e22b","modified":1598182954598},{"_id":"source/_posts/SpringBoot启动时SLF4J警告的一次解决.md","hash":"808bd32ce0934828133fcce4c49c80a7e0bc1d27","modified":1598183227827},{"_id":"source/_posts/SpringBoot项目启动时@Mapper注解相关警告.md","hash":"bb63e9b16861c114381341d7ea8b616119404a4f","modified":1598183235732},{"_id":"source/_posts/SpringCloud中不同模块间调用传参问题.md","hash":"ab0bc90e327f94b718fffab5b628c1de08ba007e","modified":1598183239689},{"_id":"source/_posts/git新建一个分支.md","hash":"3d9d36bc2b1034d7d10d87f659c9b1eae9873f34","modified":1598182927671},{"_id":"source/_posts/SpringCloud中其他模块事务能否回滚.md","hash":"3ff251aa4cb8eaf811571ce3ee42352f865bba0f","modified":1598183243534},{"_id":"source/_posts/hexo搭建.md","hash":"803e297f29e46938106260bb1b2db8af3218b3e9","modified":1598185109384},{"_id":"source/_posts/python学习1.md","hash":"0307b001b26da87e8b9ec38deb0929bb72a90c50","modified":1598185050965},{"_id":"source/_posts/hugo搭建.md","hash":"244ae07bfb93219ea43861ce7e7d74736407a68e","modified":1598182936281},{"_id":"source/_posts/python学习2.md","hash":"a4adf6fca7d5b2e727d79aadc54d797285301c46","modified":1598185062995},{"_id":"source/_posts/单链表基本操作（下）.md","hash":"96512dc1dca36cfa77bc7e54c841280a858953b8","modified":1598182889723},{"_id":"source/_posts/单链表基本操作（上）.md","hash":"d4e40f2e8aa1299f10c7e7354d29544581ec12b0","modified":1598182851055},{"_id":"source/_posts/支付系统对于异步通知的处理.md","hash":"c47df2b62a0cae49aa77786e27db91d471deb61c","modified":1598183205383},{"_id":"source/_posts/线程基础机制.md","hash":"139e45b27c5ed2913451f56cbb3fecc989b732d5","modified":1598184765468},{"_id":"source/_posts/线程间同步与协作.md","hash":"10ec69d9deb0566438ff8cce718cd0e8a3e92e32","modified":1598184759858},{"_id":"source/categories/index.md","hash":"b67ae885a2bb57ec0c85739b266959e96bc2d978","modified":1598182716071},{"_id":"themes/next/.DS_Store","hash":"751e9fbc440b566ef92310a444cc66acbad1b01e","modified":1598181788227},{"_id":"themes/next/.gitattributes","hash":"a54f902957d49356376b59287b894b1a3d7a003f","modified":1598174420009},{"_id":"themes/next/.stylintrc","hash":"2cf4d637b56d8eb423f59656a11f6403aa90f550","modified":1598174420011},{"_id":"themes/next/.eslintrc.json","hash":"cc5f297f0322672fe3f684f823bc4659e4a54c41","modified":1598174420008},{"_id":"themes/next/.editorconfig","hash":"8570735a8d8d034a3a175afd1dd40b39140b3e6a","modified":1598174420008},{"_id":"themes/next/.gitignore","hash":"56f3470755c20311ddd30d421b377697a6e5e68b","modified":1598174420011},{"_id":"themes/next/LICENSE.md","hash":"18144d8ed58c75af66cb419d54f3f63374cd5c5b","modified":1598174420011},{"_id":"themes/next/.travis.yml","hash":"ecca3b919a5b15886e3eca58aa84aafc395590da","modified":1598174420011},{"_id":"themes/next/README.md","hash":"9b4b7d66aca47f9c65d6321b14eef48d95c4dff1","modified":1598174420012},{"_id":"themes/next/package.json","hash":"62fad6de02adbbba9fb096cbe2dcc15fe25f2435","modified":1598174420031},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1598174420012},{"_id":"themes/next/_config.yml","hash":"3fe3cd7d37c4fe29db17cfc9ba5d24c846d29824","modified":1598185439730},{"_id":"themes/next/gulpfile.js","hash":"1b4fc262b89948937b9e3794de812a7c1f2f3592","modified":1598174420017},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"aa4cb7aff595ca628cb58160ee1eee117989ec4e","modified":1598174420009},{"_id":"themes/next/.github/issue-close-app.yml","hash":"7cba457eec47dbfcfd4086acd1c69eaafca2f0cd","modified":1598174420010},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"e554931b98f251fd49ff1d2443006d9ea2c20461","modified":1598174420009},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"1a435c20ae8fa183d49bbf96ac956f7c6c25c8af","modified":1598174420010},{"_id":"themes/next/.github/config.yml","hash":"1d3f4e8794986817c0fead095c74f756d45f91ed","modified":1598174420010},{"_id":"themes/next/.github/lock.yml","hash":"61173b9522ebac13db2c544e138808295624f7fd","modified":1598174420010},{"_id":"themes/next/.github/issue_label_bot.yaml","hash":"fca600ddef6f80c5e61aeed21722d191e5606e5b","modified":1598174420010},{"_id":"themes/next/.github/release-drafter.yml","hash":"3cc10ce75ecc03a5ce86b00363e2a17eb65d15ea","modified":1598174420010},{"_id":"themes/next/.github/mergeable.yml","hash":"0ee56e23bbc71e1e76427d2bd255a9879bd36e22","modified":1598174420010},{"_id":"themes/next/.github/stale.yml","hash":"fdf82de9284f8bc8e0b0712b4cc1cb081a94de59","modified":1598174420011},{"_id":"themes/next/.github/support.yml","hash":"d75db6ffa7b4ca3b865a925f9de9aef3fc51925c","modified":1598174420011},{"_id":"themes/next/languages/ar.yml","hash":"9815e84e53d750c8bcbd9193c2d44d8d910e3444","modified":1598174420017},{"_id":"themes/next/languages/en.yml","hash":"45bc5118828bdc72dcaa25282cd367c8622758cb","modified":1598174420017},{"_id":"themes/next/languages/default.yml","hash":"45bc5118828bdc72dcaa25282cd367c8622758cb","modified":1598174420017},{"_id":"themes/next/languages/de.yml","hash":"74c59f2744217003b717b59d96e275b54635abf5","modified":1598174420017},{"_id":"themes/next/languages/fa.yml","hash":"3676b32fda37e122f3c1a655085a1868fb6ad66b","modified":1598174420018},{"_id":"themes/next/languages/es.yml","hash":"c64cf05f356096f1464b4b1439da3c6c9b941062","modified":1598174420017},{"_id":"themes/next/languages/fr.yml","hash":"752bf309f46a2cd43890b82300b342d7218d625f","modified":1598174420018},{"_id":"themes/next/languages/id.yml","hash":"572ed855d47aafe26f58c73b1394530754881ec2","modified":1598174420018},{"_id":"themes/next/languages/hu.yml","hash":"b1ebb77a5fd101195b79f94de293bcf9001d996f","modified":1598174420018},{"_id":"themes/next/languages/ja.yml","hash":"0cf0baa663d530f22ff380a051881216d6adcdd8","modified":1598174420018},{"_id":"themes/next/languages/it.yml","hash":"44759f779ce9c260b895532de1d209ad4bd144bf","modified":1598174420018},{"_id":"themes/next/languages/ko.yml","hash":"0feea9e43cd399f3610b94d755a39fff1d371e97","modified":1598174420018},{"_id":"themes/next/languages/nl.yml","hash":"5af3473d9f22897204afabc08bb984b247493330","modified":1598174420019},{"_id":"themes/next/languages/pt-BR.yml","hash":"67555b1ba31a0242b12fc6ce3add28531160e35b","modified":1598174420019},{"_id":"themes/next/languages/ru.yml","hash":"e993d5ca072f7f6887e30fc0c19b4da791ca7a88","modified":1598174420019},{"_id":"themes/next/languages/pt.yml","hash":"718d131f42f214842337776e1eaddd1e9a584054","modified":1598174420019},{"_id":"themes/next/languages/tr.yml","hash":"fe793f4c2608e3f85f0b872fd0ac1fb93e6155e2","modified":1598174420020},{"_id":"themes/next/languages/uk.yml","hash":"3a6d635b1035423b22fc86d9455dba9003724de9","modified":1598174420020},{"_id":"themes/next/languages/zh-CN.yml","hash":"a1f15571ee7e1e84e3cc0985c3ec4ba1a113f6f8","modified":1598174420020},{"_id":"themes/next/languages/vi.yml","hash":"93393b01df148dcbf0863f6eee8e404e2d94ef9e","modified":1598174420020},{"_id":"themes/next/languages/zh-HK.yml","hash":"3789f94010f948e9f23e21235ef422a191753c65","modified":1598174420020},{"_id":"themes/next/languages/zh-TW.yml","hash":"8c09da7c4ec3fca2c6ee897b2eea260596a2baa1","modified":1598174420020},{"_id":"themes/next/layout/archive.swig","hash":"e4e31317a8df68f23156cfc49e9b1aa9a12ad2ed","modified":1598174420030},{"_id":"themes/next/layout/category.swig","hash":"1bde61cf4d2d171647311a0ac2c5c7933f6a53b0","modified":1598174420031},{"_id":"themes/next/layout/index.swig","hash":"7f403a18a68e6d662ae3e154b2c1d3bbe0801a23","modified":1598174420031},{"_id":"themes/next/layout/_layout.swig","hash":"b042f2c6047d985d8d9bf5026789007cad6a35ee","modified":1598179564110},{"_id":"themes/next/layout/page.swig","hash":"db581bdeac5c75fabb0f17d7c5e746e47f2a9168","modified":1598174420031},{"_id":"themes/next/layout/post.swig","hash":"2f6d992ced7e067521fdce05ffe4fd75481f41c5","modified":1598174420031},{"_id":"themes/next/docs/AUTHORS.md","hash":"10135a2f78ac40e9f46b3add3e360c025400752f","modified":1598174420013},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"c7a994b9542040317d8f99affa1405c143a94a38","modified":1598174420013},{"_id":"themes/next/docs/DATA-FILES.md","hash":"cddbdc91ee9e65c37a50bec12194f93d36161616","modified":1598174420013},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1598174420013},{"_id":"themes/next/layout/tag.swig","hash":"0dfb653bd5de980426d55a0606d1ab122bd8c017","modified":1598174420031},{"_id":"themes/next/docs/INSTALLATION.md","hash":"af88bcce035780aaa061261ed9d0d6c697678618","modified":1598174420013},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"94dc3404ccb0e5f663af2aa883c1af1d6eae553d","modified":1598174420014},{"_id":"themes/next/docs/LICENSE.txt","hash":"368bf2c29d70f27d8726dd914f1b3211cae4bbab","modified":1598174420014},{"_id":"themes/next/scripts/renderer.js","hash":"49a65df2028a1bc24814dc72fa50d52231ca4f05","modified":1598174420034},{"_id":"themes/next/docs/MATH.md","hash":"d645b025ec7fb9fbf799b9bb76af33b9f5b9ed93","modified":1598174420014},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"8b6e4b2c9cfcb969833092bdeaed78534082e3e6","modified":1598174420014},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"c3e6b8196c983c40fd140bdeca012d03e6e86967","modified":1598174420009},{"_id":"themes/next/.github/ISSUE_TEMPLATE/other.md","hash":"d3efc0df0275c98440e69476f733097916a2d579","modified":1598174420009},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"12d99fb8b62bd9e34d9672f306c9ae4ace7e053e","modified":1598174420009},{"_id":"themes/next/source/.DS_Store","hash":"da56f79006961a7ab46a0daea6e50f5e13ab7c6c","modified":1598181781777},{"_id":"themes/next/.github/ISSUE_TEMPLATE/question.md","hash":"53df7d537e26aaf062d70d86835c5fd8f81412f3","modified":1598174420010},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"9c8dc0b8170679cdc1ee9ee8dbcbaebf3f42897b","modified":1598174420021},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"71655ca21907e9061b6e8ac52d0d8fbf54d0062b","modified":1598174420021},{"_id":"themes/next/layout/_scripts/pjax.swig","hash":"4d2c93c66e069852bb0e3ea2e268d213d07bfa3f","modified":1598174420025},{"_id":"themes/next/layout/_scripts/index.swig","hash":"cea942b450bcb0f352da78d76dc6d6f1d23d5029","modified":1598174420024},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"d1f2bfde6f1da51a2b35a7ab9e7e8eb6eefd1c6b","modified":1598174420024},{"_id":"themes/next/layout/_partials/comments.swig","hash":"db6ab5421b5f4b7cb32ac73ad0e053fdf065f83e","modified":1598174420021},{"_id":"themes/next/layout/_scripts/three.swig","hash":"a4f42f2301866bd25a784a2281069d8b66836d0b","modified":1598174420026},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"ef38c213679e7b6d2a4116f56c9e55d678446069","modified":1598174420026},{"_id":"themes/next/layout/_partials/footer.swig","hash":"e5a2bdf45fde7cea9cb03993f5a0fd960326ed5d","modified":1598174420021},{"_id":"themes/next/layout/_macro/post.swig","hash":"090b5a9b6fca8e968178004cbd6cff205b7eba57","modified":1598174420021},{"_id":"themes/next/layout/_partials/widgets.swig","hash":"83a40ce83dfd5cada417444fb2d6f5470aae6bb0","modified":1598174420024},{"_id":"themes/next/layout/_partials/languages.swig","hash":"ba9e272f1065b8f0e8848648caa7dea3f02c6be1","modified":1598174420022},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"b782eb2e34c0c15440837040b5d65b093ab6ec04","modified":1598174420027},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9876dbfc15713c7a47d4bcaa301f4757bd978269","modified":1598174420023},{"_id":"themes/next/layout/_third-party/index.swig","hash":"70c3c01dd181de81270c57f3d99b6d8f4c723404","modified":1598174420028},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"0bd2d696f62a997a11a7d84fec0130122234174e","modified":1598174420014},{"_id":"themes/next/layout/_third-party/quicklink.swig","hash":"311e5eceec9e949f1ea8d623b083cec0b8700ff2","modified":1598174420029},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"2731e262a6b88eaee2a3ca61e6a3583a7f594702","modified":1598174420029},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"5237a368ab99123749d724b6c379415f2c142a96","modified":1598174420015},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"9c4fe2873123bf9ceacab5c50d17d8a0f1baef27","modified":1598174420014},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"34b88784ec120dfdc20fa82aadeb5f64ef614d14","modified":1598174420015},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"fb23b85db6f7d8279d73ae1f41631f92f64fc864","modified":1598174420015},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"ca1030efdfca5e20f9db2e7a428998e66a24c0d0","modified":1598174420015},{"_id":"themes/next/docs/ru/README.md","hash":"85dd68ed1250897a8e4a444a53a68c1d49eb7e11","modified":1598174420015},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"d3f03be036b75dc71cf3c366cd75aee7c127c874","modified":1598174420015},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"579c7bd8341873fb8be4732476d412814f1a3df7","modified":1598174420016},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"8b18f84503a361fc712b0fe4d4568e2f086ca97d","modified":1598174420016},{"_id":"themes/next/scripts/events/index.js","hash":"5743cde07f3d2aa11532a168a652e52ec28514fd","modified":1598174420031},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"b92585d251f1f9ebe401abb5d932cb920f9b8b10","modified":1598174420016},{"_id":"themes/next/docs/zh-CN/README.md","hash":"c038629ff8f3f24e8593c4c8ecf0bef3a35c750d","modified":1598174420017},{"_id":"themes/next/scripts/filters/locals.js","hash":"b193a936ee63451f09f8886343dcfdca577c0141","modified":1598174420033},{"_id":"themes/next/scripts/filters/front-matter.js","hash":"703bdd142a671b4b67d3d9dfb4a19d1dd7e7e8f7","modified":1598174420033},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"aec50ed57b9d5d3faf2db3c88374f107203617e0","modified":1598174420033},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"d9ce7331c1236bbe0a551d56cef2405e47e65325","modified":1598174420017},{"_id":"themes/next/scripts/filters/minify.js","hash":"19985723b9f677ff775f3b17dcebf314819a76ac","modified":1598174420033},{"_id":"themes/next/scripts/filters/post.js","hash":"44ba9b1c0bdda57590b53141306bb90adf0678db","modified":1598174420033},{"_id":"themes/next/scripts/helpers/engine.js","hash":"bdb424c3cc0d145bd0c6015bb1d2443c8a9c6cda","modified":1598174420033},{"_id":"themes/next/scripts/helpers/font.js","hash":"40cf00e9f2b7aa6e5f33d412e03ed10304b15fd7","modified":1598174420034},{"_id":"themes/next/scripts/helpers/next-config.js","hash":"5e11f30ddb5093a88a687446617a46b048fa02e5","modified":1598174420034},{"_id":"themes/next/scripts/tags/button.js","hash":"8c6b45f36e324820c919a822674703769e6da32c","modified":1598174420034},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"94e0bbc7999b359baa42fa3731bdcf89c79ae2b3","modified":1598174420034},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"f1826ade2d135e2f60e2d95cb035383685b3370c","modified":1598174420034},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"d902fd313e8d35c3cc36f237607c2a0536c9edf1","modified":1598174420034},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"958e86b2bd24e4fdfcbf9ce73e998efe3491a71f","modified":1598174420034},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"983c6c4adea86160ecc0ba2204bc312aa338121d","modified":1598174420035},{"_id":"themes/next/scripts/tags/note.js","hash":"0a02bb4c15aec41f6d5f1271cdb5c65889e265d9","modified":1598174420035},{"_id":"themes/next/scripts/tags/pdf.js","hash":"8c613b39e7bff735473e35244b5629d02ee20618","modified":1598174420035},{"_id":"themes/next/scripts/tags/tabs.js","hash":"93d8a734a3035c1d3f04933167b500517557ba3e","modified":1598174420035},{"_id":"themes/next/scripts/tags/video.js","hash":"e5ff4c44faee604dd3ea9db6b222828c4750c227","modified":1598174420035},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1598174420049},{"_id":"themes/next/source/css/main.styl","hash":"a3a3bbb5a973052f0186b3523911cb2539ff7b88","modified":1598174420049},{"_id":"themes/next/source/css/_colors.styl","hash":"a8442520f719d3d7a19811cb3b85bcfd4a596e1f","modified":1598174420035},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1598174420049},{"_id":"themes/next/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1598174420049},{"_id":"themes/next/source/css/_mixins.styl","hash":"e31a557f8879c2f4d8d5567ee1800b3e03f91f6e","modified":1598174420046},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1598174420050},{"_id":"themes/next/scripts/tags/label.js","hash":"fc5b267d903facb7a35001792db28b801cccb1f8","modified":1598174420035},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1598174420050},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1598174420050},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1598174420050},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1598174420050},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1598174420050},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1598174420051},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1598174420051},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1598174420051},{"_id":"themes/next/source/js/algolia-search.js","hash":"498d233eb5c7af6940baf94c1a1c36fdf1dd2636","modified":1598174420051},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1598174420051},{"_id":"themes/next/source/js/bookmark.js","hash":"9734ebcb9b83489686f5c2da67dc9e6157e988ad","modified":1598174420051},{"_id":"themes/next/source/js/local-search.js","hash":"35ccf100d8f9c0fd6bfbb7fa88c2a76c42a69110","modified":1598174420051},{"_id":"themes/next/source/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1598174420052},{"_id":"themes/next/source/js/next-boot.js","hash":"a1b0636423009d4a4e4cea97bcbf1842bfab582c","modified":1598174420052},{"_id":"themes/next/source/live2d-widget/LICENSE","hash":"31a3d460bb3c7d98845187c716a30db81c44b615","modified":1598179189555},{"_id":"themes/next/source/live2d-widget/README.md","hash":"147fa2c0e75f9d1c68a963c18871cb39e4176ced","modified":1598179189556},{"_id":"themes/next/source/js/utils.js","hash":"730cca7f164eaf258661a61ff3f769851ff1e5da","modified":1598174420052},{"_id":"themes/next/source/live2d-widget/waifu.css","hash":"7b0ef41399802acd71b3e66ad9234ca66d76c049","modified":1598179189564},{"_id":"themes/next/source/live2d-widget/autoload.js","hash":"16e35e99b188f2485058a1f52e52d66ef3362bf0","modified":1598179270100},{"_id":"themes/next/source/live2d-widget/waifu-tips.json","hash":"13b4bb215ff7438c440b80a24ae1b4523ebefcfd","modified":1598179189563},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1598174420025},{"_id":"themes/next/source/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1598174420052},{"_id":"themes/next/layout/_scripts/pages/schedule.swig","hash":"077b5d66f6309f2e7dcf08645058ff2e03143e6c","modified":1598174420025},{"_id":"themes/next/source/live2d-widget/waifu-tips.js","hash":"f8bdc91fa1e51d46dc18e04174c63034d68299bf","modified":1598179189562},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1598174420025},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1598174420025},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1598174420026},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"000bad572d76ee95d9c0a78f9ccdc8d97cc7d4b4","modified":1598174420021},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"810d544019e4a8651b756dd23e5592ee851eda71","modified":1598174420022},{"_id":"themes/next/layout/_partials/header/menu-item.swig","hash":"9440d8a3a181698b80e1fa47f5104f4565d8cdf3","modified":1598174420022},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"c70f8e71e026e878a4e9d5ab3bbbf9b0b23c240c","modified":1598174420022},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"d31f896680a6c2f2c3f5128b4d4dd46c87ce2130","modified":1598174420022},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"ae2261bea836581918a1c2b0d1028a78718434e0","modified":1598174420022},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"7dbe93b8297b746afb89700b4d29289556e85267","modified":1598174420022},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"c851717497ca64789f2176c9ecd1dedab237b752","modified":1598174420023},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"48430bd03b8f19c9b8cdb2642005ed67d56c6e0b","modified":1598174420024},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"9b7a66791d7822c52117fe167612265356512477","modified":1598174420023},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"2be50f9bfb1c56b85b3b6910a7df27f51143632c","modified":1598174420024},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"f48a6a8eba04eb962470ce76dd731e13074d4c45","modified":1598174420024},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"954ad71536b6eb08bd1f30ac6e2f5493b69d1c04","modified":1598174420023},{"_id":"themes/next/layout/_partials/sidebar/site-overview.swig","hash":"c46849e0af8f8fb78baccd40d2af14df04a074af","modified":1598174420024},{"_id":"themes/next/layout/_partials/post/post-followme.swig","hash":"ceba16b9bd3a0c5c8811af7e7e49d0f9dcb2f41e","modified":1598174420023},{"_id":"themes/next/layout/_partials/post/post-footer.swig","hash":"8f14f3f8a1b2998d5114cc56b680fb5c419a6b07","modified":1598174420023},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"f79c44692451db26efce704813f7a8872b7e63a0","modified":1598174420023},{"_id":"themes/next/layout/_partials/post/post-reward.swig","hash":"2b1a73556595c37951e39574df5a3f20b2edeaef","modified":1598174420023},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"4790058691b7d36cf6d2d6b4e93795a7b8d608ad","modified":1598174420026},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"2fa2b51d56bfac6a1ea76d651c93b9c20b01c09b","modified":1598174420026},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"1472cabb0181f60a6a0b7fec8899a4d03dfb2040","modified":1598174420027},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"5adea065641e8c55994dd2328ddae53215604928","modified":1598174420026},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"f39a5bf3ce9ee9adad282501235e0c588e4356ec","modified":1598174420027},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b14908644225d78c864cd0a9b60c52407de56183","modified":1598174420028},{"_id":"themes/next/layout/_third-party/comments/disqusjs.swig","hash":"82f5b6822aa5ec958aa987b101ef860494c6cf1f","modified":1598174420028},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"d6ceb70648555338a80ae5724b778c8c58d7060d","modified":1598174420028},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"f7a9eca599a682479e8ca863db59be7c9c7508c8","modified":1598174420028},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"be0a8eccf1f6dc21154af297fc79555343031277","modified":1598174420028},{"_id":"themes/next/layout/_third-party/chat/chatra.swig","hash":"f910618292c63871ca2e6c6e66c491f344fa7b1f","modified":1598174420027},{"_id":"themes/next/layout/_third-party/chat/tidio.swig","hash":"cba0e6e0fad08568a9e74ba9a5bee5341cfc04c1","modified":1598174420027},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"4791c977a730f29c846efcf6c9c15131b9400ead","modified":1598174420029},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"ecf751321e799f0fb3bf94d049e535130e2547aa","modified":1598174420029},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"d35a999d67f4c302f76fdf13744ceef3c6506481","modified":1598174420029},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"767b6c714c22588bcd26ba70b0fc19b6810cbacd","modified":1598174420029},{"_id":"themes/next/layout/_third-party/search/swiftype.swig","hash":"ba0dbc06b9d244073a1c681ff7a722dcbf920b51","modified":1598174420029},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.swig","hash":"4b1986e43d6abce13450d2b41a736dd6a5620a10","modified":1598174420030},{"_id":"themes/next/layout/_third-party/statistics/cnzz-analytics.swig","hash":"a17ace37876822327a2f9306a472974442c9005d","modified":1598174420030},{"_id":"themes/next/layout/_third-party/statistics/firestore.swig","hash":"b26ac2bfbe91dd88267f8b96aee6bb222b265b7a","modified":1598174420030},{"_id":"themes/next/layout/_third-party/statistics/index.swig","hash":"5f6a966c509680dbfa70433f9d658cee59c304d7","modified":1598174420030},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"6c5976621efd5db5f7c4c6b4f11bc79d6554885f","modified":1598174420029},{"_id":"themes/next/scripts/events/lib/injects-point.js","hash":"6661c1c91c7cbdefc6a5e6a034b443b8811235a1","modified":1598174420032},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"f233d8d0103ae7f9b861344aa65c1a3c1de8a845","modified":1598174420032},{"_id":"themes/next/scripts/events/lib/config.js","hash":"d34c6040b13649714939f59be5175e137de65ede","modified":1598174420031},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"a54708fd9309b4357c423a3730eb67f395344a5e","modified":1598174420032},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"2486f3e0150c753e5f3af1a3665d074704b8ee2c","modified":1598174420032},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"7f2d93af012c1e14b8596fecbfc7febb43d9b7f5","modified":1598174420032},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"7f8b92913d21070b489457fa5ed996d2a55f2c32","modified":1598174420032},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"4c0c99c7e0f00849003dfce02a131104fb671137","modified":1598174420032},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.swig","hash":"d56d5af427cdfecc33a0f62ee62c056b4e33d095","modified":1598174420030},{"_id":"themes/next/layout/_third-party/tags/pdf.swig","hash":"d30b0e255a8092043bac46441243f943ed6fb09b","modified":1598174420030},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"e51dc3072c1ba0ea3008f09ecae8b46242ec6021","modified":1598174420032},{"_id":"themes/next/scripts/filters/comment/valine.js","hash":"6cbd85f9433c06bae22225ccf75ac55e04f2d106","modified":1598174420033},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"d5fefc31fba4ab0188305b1af1feb61da49fdeb0","modified":1598174420033},{"_id":"themes/next/layout/_third-party/tags/mermaid.swig","hash":"f3c43664a071ff3c0b28bd7e59b5523446829576","modified":1598174420030},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"f4e694e5db81e57442c7e34505a416d818b3044a","modified":1598174420048},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"f70be8e229da7e1715c11dd0e975a2e71e453ac8","modified":1598174420048},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"62df49459d552bbf73841753da8011a1f5e875c8","modified":1598174420048},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"612ec843372dae709acb17112c1145a53450cc59","modified":1598174420049},{"_id":"themes/next/source/css/_variables/base.styl","hash":"818508748b7a62e02035e87fe58e75b603ed56dc","modified":1598174420049},{"_id":"themes/next/source/js/schemes/muse.js","hash":"1eb9b88103ddcf8827b1a7cbc56471a9c5592d53","modified":1598174420052},{"_id":"themes/next/source/js/schemes/pisces.js","hash":"0ac5ce155bc58c972fe21c4c447f85e6f8755c62","modified":1598174420052},{"_id":"themes/next/source/live2d-widget/demo/demo.html","hash":"2617b8aa4c4728d38a8f062465304e5433056abc","modified":1598179189560},{"_id":"themes/next/source/live2d-widget/assets/screenshot-1.png","hash":"4bd4d97a1fcaa5deb3cea1c0a102a895a15af32f","modified":1598179189556},{"_id":"themes/next/source/live2d-widget/demo/login.html","hash":"595ff5297e8dd9b6fb99759c1f49f2cacda0c5c4","modified":1598179189560},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1598174420055},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"681d33e3bc85bdca407d93b134c089264837378c","modified":1598174420042},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1598174420055},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"a1690e035b505d28bdef2b4424c13fc6312ab049","modified":1598174420042},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"0b2c4b78eead410020d7c4ded59c75592a648df8","modified":1598174420043},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":1598174420044},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"a2e9e00962e43e98ec2614d6d248ef1773bb9b78","modified":1598174420043},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"b1f0fab7344a20ed6748b04065b141ad423cf4d9","modified":1598174420044},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"8f58570a1bbc34c4989a47a1b7d42a8030f38b06","modified":1598174420044},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1598174420044},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"18ce72d90459c9aa66910ac64eae115f2dde3767","modified":1598174420045},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"179e33b8ac7f4d8a8e76736a7e4f965fe9ab8b42","modified":1598174420046},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"ca5e70662dcfb261c25191cc5db5084dcf661c76","modified":1598174420036},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"a47725574e1bee3bc3b63b0ff2039cc982b17eff","modified":1598174420036},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"8e7b57a72e757cf95278239641726bb2d5b869d1","modified":1598174420036},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"2e3bf7baf383c9073ec5e67f157d3cb3823c0957","modified":1598174420040},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"7785bd756e0c4acede3a47fec1ed7b55988385a5","modified":1598174420046},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"f6516d0f7d89dc7b6c6e143a5af54b926f585d82","modified":1598174420046},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"bb7ace23345364eb14983e860a7172e1683a4c94","modified":1598174420046},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"7104b9cef90ca3b140d7a7afcf15540a250218fc","modified":1598174420046},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"a717969829fa6ef88225095737df3f8ee86c286b","modified":1598174420047},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"6136da4bbb7e70cec99f5c7ae8c7e74f5e7c261a","modified":1598174420047},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"f0131db6275ceaecae7e1a6a3798b8f89f6c850d","modified":1598174420047},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"4d1c17345d2d39ef7698f7acf82dfc0f59308c34","modified":1598174420047},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"93db5dafe9294542a6b5f647643cb9deaced8e06","modified":1598174420047},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"2b2e7b5cea7783c9c8bb92655e26a67c266886f0","modified":1598174420047},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1598174420047},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1598174420047},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"70a4324b70501132855b5e59029acfc5d3da1ebd","modified":1598174420048},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"e282df938bd029f391c466168d0e68389978f120","modified":1598174420047},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"85da2f3006f4bef9a2199416ecfab4d288f848c4","modified":1598174420048},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"44f47c88c06d89d06f220f102649057118715828","modified":1598174420048},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1598174420048},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"e740deadcfc4f29c5cb01e40f9df6277262ba4e3","modified":1598174420048},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1598174420053},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1598174420054},{"_id":"themes/next/source/css/_common/outline/footer/footer.styl","hash":"454a4aebfabb4469b92a8cbb49f46c49ac9bf165","modified":1598174420041},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"e2d606f1ac343e9be4f15dbbaf3464bc4df8bf81","modified":1598174420041},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"e7a9fdb6478b8674b1cdf94de4f8052843fb71d9","modified":1598174420041},{"_id":"themes/next/source/css/_common/outline/header/header.styl","hash":"a793cfff86ad4af818faef04c18013077873f8f0","modified":1598174420041},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"5f432a6ed9ca80a413c68b00e93d4a411abf280a","modified":1598174420041},{"_id":"themes/next/source/css/_common/outline/header/headerband.styl","hash":"0caf32492692ba8e854da43697a2ec8a41612194","modified":1598174420041},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"45a239edca44acecf971d99b04f30a1aafbf6906","modified":1598174420041},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"b2fc519828fe89a1f8f03ff7b809ad68cd46f3d7","modified":1598174420042},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"2cb1876e9e0c9ac32160888af27b1178dbcb0616","modified":1598174420042},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"fa0222197b5eee47e18ac864cdc6eac75678b8fe","modified":1598174420042},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"44487d9ab290dc97871fa8dd4487016deb56e123","modified":1598174420042},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"1f0e7fbe80956f47087c2458ea880acf7a83078b","modified":1598174420042},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"9b479c2f9a9bfed77885e5093b8245cc5d768ec7","modified":1598174420043},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"a960a2dd587b15d3b3fe1b59525d6fa971c6a6ec","modified":1598174420043},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"b3220db827e1adbca7880c2bb23e78fa7cbe95cb","modified":1598174420043},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"a05a4031e799bc864a4536f9ef61fe643cd421af","modified":1598174420043},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar.styl","hash":"a9cd93c36bae5af9223e7804963096274e8a4f03","modified":1598174420043},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"2a47f8a6bb589c2fb635e6c1e4a2563c7f63c407","modified":1598174420043},{"_id":"themes/next/source/css/_common/scaffolding/highlight/diff.styl","hash":"d3f73688bb7423e3ab0de1efdf6db46db5e34f80","modified":1598174420044},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"f71a3e86c05ea668b008cf05a81f67d92b6d65e4","modified":1598174420044},{"_id":"themes/next/source/css/_common/scaffolding/highlight/highlight.styl","hash":"35c871a809afa8306c8cde13651010e282548bc6","modified":1598174420044},{"_id":"themes/next/source/css/_common/scaffolding/highlight/theme.styl","hash":"3b3acc5caa0b95a2598bef4eeacb21bab21bea56","modified":1598174420044},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"709d10f763e357e1472d6471f8be384ec9e2d983","modified":1598174420045},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"1d2778ca5aeeeafaa690dc2766b01b352ab76a02","modified":1598174420045},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"d7fce4b51b5f4b7c31d93a9edb6c6ce740aa0d6b","modified":1598174420045},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"e4d9a77ffe98e851c1202676940097ba28253313","modified":1598174420045},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"b49c64f8e9a6ca1c45c0ba98febf1974fdd03616","modified":1598174420045},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"f23670f1d8e749f3e83766d446790d8fd9620278","modified":1598174420045},{"_id":"themes/next/source/css/_common/scaffolding/tags/tags.styl","hash":"9e4c0653cfd3cc6908fa0d97581bcf80861fb1e7","modified":1598174420046},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"fafc96c86926b22afba8bb9418c05e6afbc05a57","modified":1598174420037},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"2bd0eb1512415325653b26d62a4463e6de83c5ac","modified":1598174420037},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1598174420037},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"e771dcb0b4673e063c0f3e2d73e7336ac05bcd57","modified":1598174420037},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"d21d4ac1982c13d02f125a67c065412085a92ff2","modified":1598174420037},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"e75693f33dbc92afc55489438267869ae2f3db54","modified":1598174420038},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f49ca072b5a800f735e8f01fc3518f885951dd8e","modified":1598174420038},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"902569a9dea90548bec21a823dd3efd94ff7c133","modified":1598174420038},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"ded41fd9d20a5e8db66aaff7cc50f105f5ef2952","modified":1598174420038},{"_id":"themes/next/source/css/_common/components/post/post-followme.styl","hash":"1e4190c10c9e0c9ce92653b0dbcec21754b0b69d","modified":1598174420039},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"72d495a88f7d6515af425c12cbc67308a57d88ea","modified":1598174420039},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"65cb6edb69e94e70e3291e9132408361148d41d5","modified":1598174420039},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"6a97bcfa635d637dc59005be3b931109e0d1ead5","modified":1598174420039},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"d114b2a531129e739a27ba6271cfe6857aa9a865","modified":1598174420039},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"f5c2788a78790aca1a2f37f7149d6058afb539e0","modified":1598174420039},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"99e12c9ce3d14d4837e3d3f12fc867ba9c565317","modified":1598174420039},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"5b5649b9749e3fd8b63aef22ceeece0a6e1df605","modified":1598174420039},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"a760ee83ba6216871a9f14c5e56dc9bd0d9e2103","modified":1598174420040},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"8a7fc03a568b95be8d3337195e38bc7ec5ba2b23","modified":1598174420040},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"e2992846b39bf3857b5104675af02ba73e72eed5","modified":1598174420040},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"b49e9fbd3c182b8fc066b8c2caf248e3eb748619","modified":1598174420040},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"9f0b93d109c9aec79450c8a0cf4a4eab717d674d","modified":1598174420040},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"9a878d0119785a2316f42aebcceaa05a120b9a7a","modified":1598174420040},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1598174420054},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1598174420055},{"_id":"themes/next/source/live2d-widget/live2d.min.js","hash":"94383fb61de815c3f806ae3f11026bbcfe384082","modified":1598179189562},{"_id":"themes/next/source/live2d-widget/assets/screenshot-3.png","hash":"f89c6fdf44008e7d3c7a1aafe65dc39b212edb6c","modified":1598179189559},{"_id":"themes/next/source/live2d-widget/assets/screenshot-2.png","hash":"76b844653136184c573b3632e12296e008a7ff5c","modified":1598179189557},{"_id":"public/categories/index.html","hash":"8eecb03baf917c03bd617d59a042dbc4637d414b","modified":1598185528595},{"_id":"public/2020/07/08/CopyOnWriteArrayList分析/index.html","hash":"1667321c67b0a36fec4e6470530fc91e5918f430","modified":1598185528595},{"_id":"public/2019/10/19/Java中字符串分割问题/index.html","hash":"cc67713fc10871543800cb7b5d8c37ac0c03d7fa","modified":1598185528595},{"_id":"public/2019/10/19/Linux基本操作命令/index.html","hash":"dc4c9ca05058e02651cbf962b1a2a6837eaef141","modified":1598185528595},{"_id":"public/2019/09/09/SpringBoot项目启动时@Mapper注解相关警告/index.html","hash":"e57695d58750b2206d2427e9944d78c55c0336da","modified":1598185528595},{"_id":"public/2019/09/09/SpringCloud中不同模块间调用传参问题/index.html","hash":"e06f0d618dbdc4a3acd1798dd8a02504d1e132dc","modified":1598185528595},{"_id":"public/2019/09/09/SpringCloud中其他模块事务能否回滚/index.html","hash":"5290ec1ccb68833fd23396fc87e0cab8bf8a5ce8","modified":1598185528595},{"_id":"public/2019/09/04/git新建一个分支/index.html","hash":"8565f3219f6f2dd6d14c9a7dfe9c7afe420257e0","modified":1598185528595},{"_id":"public/archives/index.html","hash":"5979f69cd0edd01254185262d697a4e8452d17be","modified":1598185528595},{"_id":"public/archives/page/2/index.html","hash":"50eda3f02157edcc7d1abf4978b9b5d0298ff486","modified":1598185528595},{"_id":"public/archives/2019/index.html","hash":"7b1f52f43cc55ebde862dca0a53356788c40d1e9","modified":1598185528595},{"_id":"public/archives/2019/page/2/index.html","hash":"11fd5ee85e06b3dffcfeb776107c3459b71cad2d","modified":1598185528595},{"_id":"public/archives/2019/09/index.html","hash":"51f9e35ac5c33aa113d622d58780614620340332","modified":1598185528595},{"_id":"public/archives/2019/10/index.html","hash":"edb4abf97f50de6f4a6ef04aba1021ef2f3805fa","modified":1598185528595},{"_id":"public/archives/2019/11/index.html","hash":"17eb2296c10abb1ba118c1629fc59895d6d2715e","modified":1598185528595},{"_id":"public/archives/2020/index.html","hash":"36ecf5564b5a4f6c699635550baa6651b01837c6","modified":1598185528595},{"_id":"public/archives/2020/04/index.html","hash":"fc966a48ce9b36259d491d84d23adaf2ef32e799","modified":1598185528595},{"_id":"public/archives/2020/05/index.html","hash":"7a72e60df2069d06607e413719607827da41a91b","modified":1598185528595},{"_id":"public/archives/2020/06/index.html","hash":"0f1d504a4c258af6eb1e83de1940033d296d478a","modified":1598185528595},{"_id":"public/archives/2020/07/index.html","hash":"869157a5a0374f32e7f3ad89041c744b3b73b3d8","modified":1598185528595},{"_id":"public/categories/java/index.html","hash":"78a62d500d49fb69f37c6de5f5a0440c87fbd050","modified":1598185528595},{"_id":"public/categories/多线程/index.html","hash":"8a311ee89079faae14a2f4290d04322c3f7b7b4e","modified":1598185528595},{"_id":"public/categories/Spring/index.html","hash":"ac4821b777bbe4c0611ea24f915b90b7ca747f41","modified":1598185528595},{"_id":"public/categories/linux/index.html","hash":"573901c2cb4828d46d571983c2d77b7da37077b8","modified":1598185528595},{"_id":"public/categories/工具/index.html","hash":"2f14799cf0c9f739b2e8b7756d40d51a4b6d879d","modified":1598185528595},{"_id":"public/categories/python/index.html","hash":"d3156aa02c2ee842810b9d851a162395ffe4fe9a","modified":1598185528595},{"_id":"public/categories/数据结构/index.html","hash":"354dda0bd2b1a9c5b4023cd7ac70629fce2a62ed","modified":1598185528595},{"_id":"public/categories/系统设计/index.html","hash":"8b42cc9dfbc6ed67536e5daefb3b6bfa7530e6d2","modified":1598185528595},{"_id":"public/categories/数据结构/链表/index.html","hash":"59eb397da139de4a629a465e85cf3e50093910b8","modified":1598185528595},{"_id":"public/2020/07/08/ArrayList源码分析/index.html","hash":"a83e53f2a852d04961cc24ee91ea2e4e3000a9ac","modified":1598185528595},{"_id":"public/2020/06/03/Executors中的线程池/index.html","hash":"3dfca3b6c659028cf9200e5c562414109b6c3019","modified":1598185528595},{"_id":"public/2020/05/06/线程间同步与协作/index.html","hash":"ec43d7e16ff964965dc3abd769639eda8ba37f3e","modified":1598185528595},{"_id":"public/2020/04/24/python学习2/index.html","hash":"0636e097670771941c7593ff87ac92f15f15769f","modified":1598185528595},{"_id":"public/2020/04/22/python学习1/index.html","hash":"26b9db3625719e2abddbb473e70ea7611f7085da","modified":1598185528595},{"_id":"public/2020/04/18/线程基础机制/index.html","hash":"07e1813b58e0a520d0f205bd89b96ad1141695db","modified":1598185528595},{"_id":"public/2019/11/11/单链表基本操作（下）/index.html","hash":"e9a7e5e1fa1543ca87cad98a1aad00761d5d221c","modified":1598185528595},{"_id":"public/2019/11/10/SpringBoot启动时SLF4J警告的一次解决/index.html","hash":"0840cbd8d256f39daafea9d1d35a841ddf64b51d","modified":1598185528595},{"_id":"public/2019/11/10/单链表基本操作（上）/index.html","hash":"c0a2967cc7af8fe8ea429afe3047b9cda0fecc2e","modified":1598185528595},{"_id":"public/2019/09/09/支付系统对于异步通知的处理/index.html","hash":"292d7afa6ead9f92a11b7165377791dd3c9f0df9","modified":1598185528595},{"_id":"public/2019/09/05/hexo搭建/index.html","hash":"7d1f62dfa8fc634ba306060338ff4b0bbb0014ba","modified":1598185528595},{"_id":"public/2019/09/04/hugo搭建/index.html","hash":"30f0405558bb1be2747da6598da7c82613ae8a94","modified":1598185528595},{"_id":"public/index.html","hash":"c180bff69717a815318eb50c32d3bf2b6d41184b","modified":1598185528595},{"_id":"public/page/2/index.html","hash":"99a0b57c568fbd8b9332fe1df68d98d3f013511a","modified":1598185528595},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1598185528595},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1598185528595},{"_id":"public/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1598185528595},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1598185528595},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1598185528595},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1598185528595},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1598185528595},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1598185528595},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1598185528595},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1598185528595},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1598185528595},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1598185528595},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1598185528595},{"_id":"public/live2d-widget/LICENSE","hash":"31a3d460bb3c7d98845187c716a30db81c44b615","modified":1598185528595},{"_id":"public/live2d-widget/assets/screenshot-1.png","hash":"4bd4d97a1fcaa5deb3cea1c0a102a895a15af32f","modified":1598185528595},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1598185528595},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1598185528595},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1598185528595},{"_id":"public/js/bookmark.js","hash":"9734ebcb9b83489686f5c2da67dc9e6157e988ad","modified":1598185528595},{"_id":"public/js/algolia-search.js","hash":"498d233eb5c7af6940baf94c1a1c36fdf1dd2636","modified":1598185528595},{"_id":"public/js/local-search.js","hash":"35ccf100d8f9c0fd6bfbb7fa88c2a76c42a69110","modified":1598185528595},{"_id":"public/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1598185528595},{"_id":"public/js/utils.js","hash":"730cca7f164eaf258661a61ff3f769851ff1e5da","modified":1598185528595},{"_id":"public/js/next-boot.js","hash":"a1b0636423009d4a4e4cea97bcbf1842bfab582c","modified":1598185528595},{"_id":"public/live2d-widget/README.html","hash":"779dbb731b7a3a8450c1d19fadfb317e7e7cdad9","modified":1598185528595},{"_id":"public/live2d-widget/autoload.js","hash":"16e35e99b188f2485058a1f52e52d66ef3362bf0","modified":1598185528595},{"_id":"public/live2d-widget/waifu-tips.js","hash":"f8bdc91fa1e51d46dc18e04174c63034d68299bf","modified":1598185528595},{"_id":"public/live2d-widget/waifu-tips.json","hash":"11845afc8cdc6395f2affcb9de13c68ffbd87698","modified":1598185528595},{"_id":"public/live2d-widget/waifu.css","hash":"7b0ef41399802acd71b3e66ad9234ca66d76c049","modified":1598185528595},{"_id":"public/js/schemes/muse.js","hash":"1eb9b88103ddcf8827b1a7cbc56471a9c5592d53","modified":1598185528595},{"_id":"public/js/schemes/pisces.js","hash":"0ac5ce155bc58c972fe21c4c447f85e6f8755c62","modified":1598185528595},{"_id":"public/live2d-widget/demo/demo.html","hash":"2617b8aa4c4728d38a8f062465304e5433056abc","modified":1598185528595},{"_id":"public/live2d-widget/demo/login.html","hash":"595ff5297e8dd9b6fb99759c1f49f2cacda0c5c4","modified":1598185528595},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1598185528595},{"_id":"public/css/main.css","hash":"0301f2624c578780be7ee667b5f723e07ed5bb78","modified":1598185528595},{"_id":"public/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1598185528595},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1598185528595},{"_id":"public/live2d-widget/assets/screenshot-3.png","hash":"f89c6fdf44008e7d3c7a1aafe65dc39b212edb6c","modified":1598185528595},{"_id":"public/live2d-widget/assets/screenshot-2.png","hash":"76b844653136184c573b3632e12296e008a7ff5c","modified":1598185528595},{"_id":"public/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1598185528595},{"_id":"public/live2d-widget/live2d.min.js","hash":"94383fb61de815c3f806ae3f11026bbcfe384082","modified":1598185528595}],"Category":[{"name":"java","_id":"cke72eefm0003dfsefmi3c7fg"},{"name":"多线程","_id":"cke72eefq0007dfse02qf081k"},{"name":"Spring","_id":"cke72eefw000fdfsehxj436o1"},{"name":"linux","_id":"cke72eefy000kdfseb1j3dckk"},{"name":"工具","_id":"cke72eeg5000zdfseabye1vyt"},{"name":"python","_id":"cke72eeg60015dfseh88b5zwq"},{"name":"数据结构","_id":"cke72eeg8001bdfsee53tbysr"},{"name":"系统设计","_id":"cke72eeg9001fdfse4s4y3qy9"},{"name":"链表","parent":"cke72eeg8001bdfsee53tbysr","_id":"cke72eeg9001gdfse6mfv8kf8"}],"Data":[],"Page":[{"title":"文章分类","date":"2018-10-14T16:03:57.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: 文章分类\ndate: 2018-10-15 00:03:57\ntype: \"categories\"\ncomments: false\n---\n","updated":"2020-08-23T11:38:36.071Z","path":"categories/index.html","layout":"page","_id":"cke72eefd0000dfse3cfz1spd","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"ArrayList源码分析","date":"2020-07-08T14:08:19.000Z","_content":"\n- **构造方法**\n```java\nprivate static final Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = {};\n\nprivate static final Object[] EMPTY_ELEMENTDATA = {};\n\n// 无参构造，默认初始化一个空数组\npublic ArrayList() {\n    this.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;\n}\n\n// 指定初始容量的构造方法\npublic ArrayList(int initialCapacity) {\n    if (initialCapacity > 0) {\n        this.elementData = new Object[initialCapacity];\n    } else if (initialCapacity == 0) {\n        this.elementData = EMPTY_ELEMENTDATA;\n    } else {\n        throw new IllegalArgumentException(\"Illegal Capacity: \"+\n                                           initialCapacity);\n    }\n}\n\n// 传入一个集合子类的构造方法\npublic ArrayList(Collection<? extends E> c) {\n    elementData = c.toArray();\n    if ((size = elementData.length) != 0) {\n        // c.toArray might (incorrectly) not return Object[] (see 6260652)\n        if (elementData.getClass() != Object[].class)\n            elementData = Arrays.copyOf(elementData, size, Object[].class);\n    } else {\n        // replace with empty array.\n        this.elementData = EMPTY_ELEMENTDATA;\n    }\n}\n```\n第二个传入指定容量的构造方法，会对数组的容量进行初始化；\n\n第三个传入集合的构造方法，主要应用在对集合的深拷贝。\n\n---\n\n- **add(E)方法及扩容**\n```java\nprivate static final int DEFAULT_CAPACITY = 10;\nprivate static final int MAX_ARRAY_SIZE = Integer.MAX_VALUE - 8;\n\npublic boolean add(E e) {\n    ensureCapacityInternal(size + 1);  // Increments modCount!!\n    elementData[size++] = e;\n    return true;\n}\n\n// 根据需要的最小容量扩容\nprivate void ensureCapacityInternal(int minCapacity) {\n    ensureExplicitCapacity(calculateCapacity(elementData, minCapacity));\n}\n\n// 根据需要的最终最小容量扩容\nprivate void ensureExplicitCapacity(int minCapacity) {\n    modCount++;\n\n    // overflow-conscious code\n    if (minCapacity - elementData.length > 0)\n        grow(minCapacity);\n}\n\n// 计算得到需要的最终最小容量\nprivate static int calculateCapacity(Object[] elementData, int minCapacity) {\n    if (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) {\n        return Math.max(DEFAULT_CAPACITY, minCapacity);\n    }\n    return minCapacity;\n}\n\n// 具体的扩容方法\nprivate void grow(int minCapacity) {\n    // overflow-conscious code\n    int oldCapacity = elementData.length;\n    // 计算得到新容量\n    int newCapacity = oldCapacity + (oldCapacity >> 1);\n    // 如果新容量小于需要的最小容量，就扩容到需要的最小容量\n    // （一般只有无参构造add第一个元素会走到这里）\n    if (newCapacity - minCapacity < 0)\n        newCapacity = minCapacity;\n    // 如果新容量大于int最大值-8，通过需要的最小容量重新定义新容量\n    if (newCapacity - MAX_ARRAY_SIZE > 0)\n        newCapacity = hugeCapacity(minCapacity);\n    // minCapacity is usually close to size, so this is a win:\n    elementData = Arrays.copyOf(elementData, newCapacity);\n}\n\n// 通过需要的最小容量重新定义新容量\nprivate static int hugeCapacity(int minCapacity) {\n    if (minCapacity < 0) // overflow\n        throw new OutOfMemoryError();\n    // 如果需要的最小容量大于int最大值-8，去int最大值；否则取int最大值-8   \n    return (minCapacity > MAX_ARRAY_SIZE) ?\n        Integer.MAX_VALUE :\n        MAX_ARRAY_SIZE;\n}\n\n\n```\n添加一个元素时，首先对原数组进行一次扩容，其中size代表当前已有的元素个数，所以需要的最小容量minCapacity是size+1；\n\n对minCapacity进行重新计算，如果是无参构造方法，由于初始化时默认是DEFAULTCAPACITY_EMPTY_ELEMENTDATA这样的空数组，所以minCapacity重新定义为size+1和默认值10的较大值。\n\n之后根据计算得到的minCapacity进行扩容：只有当minCapacity大于当前数组的长度时才需要扩容，否则不需要扩容。例如：当前数组长度10，已有3个元素，计算得到的minCapacity是4，那么不需要扩容，只有数组中元素装满时，size+1大于数组长度就需要扩容了。\n\n具体的扩容grow方法：新容量先定义成原来容量的1.5倍，然后和需要的最小容量做比较，如果依然小于需要的最小容量就用最小容量；之后判断新容量是否超过了int最大值-8，如果超过了就用需要的最小容量重新计算新容量。\n\n如果需要的最小容量大于int最大值-8，就定义为int最大值，否则定义为int最大值-8。\n\n最后通过Arrays.copyOf(elementData, newCapacity)方法扩容，具体放在后面。\n\n--- \n\n- **add(int, E)方法**\n```java\n// 插入元素E到指定的索引位置\npublic void add(int index, E element) {\n    // 检查是否索引越界\n    rangeCheckForAdd(index);\n    \n    // 扩容，与前面的add(E)方法相同\n    ensureCapacityInternal(size + 1);  // Increments modCount!!\n    // 数组拷贝\n    System.arraycopy(elementData, index, elementData, index + 1,\n                     size - index);\n    elementData[index] = element;\n    size++;\n}\n\nprivate void rangeCheckForAdd(int index) {\n    if (index > size || index < 0)\n        throw new IndexOutOfBoundsException(outOfBoundsMsg(index));\n}\n```\n与add(E)方法相比，先检查索引是否越界，因为add(E)方法默认放在最后，先扩容再插入不会存在索引越界问题，后续操作基本与add(E)相同，进行数组拷贝，然后在待插入位置赋值，size++。\n\n---\n\n- **Arrays.copyof()和System.arraycopy()**\n\n```java\n// 原数组src从某个索引位置srcPos开始，\n// 拷贝到新数组dest从某个索引位置destPos开始，拷贝长度length\npublic static native void arraycopy(Object src,  int  srcPos,\n                                    Object dest, int destPos,\n                                    int length);\n\n// 对原数组original拷贝newLength的长度，返回拷贝形成的新数组\n// newLength可以大于原数组的长度，这样相当于复制原数组的所有元素并扩容\npublic static <T> T[] copyOf(T[] original, int newLength) {\n    return (T[]) copyOf(original, newLength, original.getClass());\n}\n\npublic static <T,U> T[] copyOf(U[] original, int newLength, Class<? extends T[]> newType) {\n    @SuppressWarnings(\"unchecked\")\n    T[] copy = ((Object)newType == (Object)Object[].class)\n        ? (T[]) new Object[newLength]\n        : (T[]) Array.newInstance(newType.getComponentType(), newLength);\n    System.arraycopy(original, 0, copy, 0,\n                     Math.min(original.length, newLength));\n    return copy;\n}\n```\n其实Arrays.copyOf()方法底层仍然调用了System.arraycopy()方法；\n\n只是我们不需要自己创建新数组，方法内部已经创建好了；Arrayas.copyOf()方法主要是为了给原数组扩容。\n\n--- \n\n- **手动扩容方法**\n\nArrayList源码中有一个扩容方法是对外提供的。\n\n```java\npublic void ensureCapacity(int minCapacity) {\n    int minExpand = (elementData != DEFAULTCAPACITY_EMPTY_ELEMENTDATA)\n        // any size if not default element table\n        ? 0\n        // larger than default for default empty table. It's already\n        // supposed to be at default size.\n        : DEFAULT_CAPACITY;\n    // 需要的最小容量大于当前这个数组的最小范围\n    if (minCapacity > minExpand) {\n        ensureExplicitCapacity(minCapacity);\n    }\n}\n```\n最好在添加大量元素时先手动调用该方法进行扩容，减少后续自动扩容的次数。\n","source":"_posts/ArrayList源码分析.md","raw":"---\ntitle: ArrayList源码分析\ndate: 2020-07-08 22:08:19\ntags:\ncategories:\n- java\n---\n\n- **构造方法**\n```java\nprivate static final Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = {};\n\nprivate static final Object[] EMPTY_ELEMENTDATA = {};\n\n// 无参构造，默认初始化一个空数组\npublic ArrayList() {\n    this.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;\n}\n\n// 指定初始容量的构造方法\npublic ArrayList(int initialCapacity) {\n    if (initialCapacity > 0) {\n        this.elementData = new Object[initialCapacity];\n    } else if (initialCapacity == 0) {\n        this.elementData = EMPTY_ELEMENTDATA;\n    } else {\n        throw new IllegalArgumentException(\"Illegal Capacity: \"+\n                                           initialCapacity);\n    }\n}\n\n// 传入一个集合子类的构造方法\npublic ArrayList(Collection<? extends E> c) {\n    elementData = c.toArray();\n    if ((size = elementData.length) != 0) {\n        // c.toArray might (incorrectly) not return Object[] (see 6260652)\n        if (elementData.getClass() != Object[].class)\n            elementData = Arrays.copyOf(elementData, size, Object[].class);\n    } else {\n        // replace with empty array.\n        this.elementData = EMPTY_ELEMENTDATA;\n    }\n}\n```\n第二个传入指定容量的构造方法，会对数组的容量进行初始化；\n\n第三个传入集合的构造方法，主要应用在对集合的深拷贝。\n\n---\n\n- **add(E)方法及扩容**\n```java\nprivate static final int DEFAULT_CAPACITY = 10;\nprivate static final int MAX_ARRAY_SIZE = Integer.MAX_VALUE - 8;\n\npublic boolean add(E e) {\n    ensureCapacityInternal(size + 1);  // Increments modCount!!\n    elementData[size++] = e;\n    return true;\n}\n\n// 根据需要的最小容量扩容\nprivate void ensureCapacityInternal(int minCapacity) {\n    ensureExplicitCapacity(calculateCapacity(elementData, minCapacity));\n}\n\n// 根据需要的最终最小容量扩容\nprivate void ensureExplicitCapacity(int minCapacity) {\n    modCount++;\n\n    // overflow-conscious code\n    if (minCapacity - elementData.length > 0)\n        grow(minCapacity);\n}\n\n// 计算得到需要的最终最小容量\nprivate static int calculateCapacity(Object[] elementData, int minCapacity) {\n    if (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) {\n        return Math.max(DEFAULT_CAPACITY, minCapacity);\n    }\n    return minCapacity;\n}\n\n// 具体的扩容方法\nprivate void grow(int minCapacity) {\n    // overflow-conscious code\n    int oldCapacity = elementData.length;\n    // 计算得到新容量\n    int newCapacity = oldCapacity + (oldCapacity >> 1);\n    // 如果新容量小于需要的最小容量，就扩容到需要的最小容量\n    // （一般只有无参构造add第一个元素会走到这里）\n    if (newCapacity - minCapacity < 0)\n        newCapacity = minCapacity;\n    // 如果新容量大于int最大值-8，通过需要的最小容量重新定义新容量\n    if (newCapacity - MAX_ARRAY_SIZE > 0)\n        newCapacity = hugeCapacity(minCapacity);\n    // minCapacity is usually close to size, so this is a win:\n    elementData = Arrays.copyOf(elementData, newCapacity);\n}\n\n// 通过需要的最小容量重新定义新容量\nprivate static int hugeCapacity(int minCapacity) {\n    if (minCapacity < 0) // overflow\n        throw new OutOfMemoryError();\n    // 如果需要的最小容量大于int最大值-8，去int最大值；否则取int最大值-8   \n    return (minCapacity > MAX_ARRAY_SIZE) ?\n        Integer.MAX_VALUE :\n        MAX_ARRAY_SIZE;\n}\n\n\n```\n添加一个元素时，首先对原数组进行一次扩容，其中size代表当前已有的元素个数，所以需要的最小容量minCapacity是size+1；\n\n对minCapacity进行重新计算，如果是无参构造方法，由于初始化时默认是DEFAULTCAPACITY_EMPTY_ELEMENTDATA这样的空数组，所以minCapacity重新定义为size+1和默认值10的较大值。\n\n之后根据计算得到的minCapacity进行扩容：只有当minCapacity大于当前数组的长度时才需要扩容，否则不需要扩容。例如：当前数组长度10，已有3个元素，计算得到的minCapacity是4，那么不需要扩容，只有数组中元素装满时，size+1大于数组长度就需要扩容了。\n\n具体的扩容grow方法：新容量先定义成原来容量的1.5倍，然后和需要的最小容量做比较，如果依然小于需要的最小容量就用最小容量；之后判断新容量是否超过了int最大值-8，如果超过了就用需要的最小容量重新计算新容量。\n\n如果需要的最小容量大于int最大值-8，就定义为int最大值，否则定义为int最大值-8。\n\n最后通过Arrays.copyOf(elementData, newCapacity)方法扩容，具体放在后面。\n\n--- \n\n- **add(int, E)方法**\n```java\n// 插入元素E到指定的索引位置\npublic void add(int index, E element) {\n    // 检查是否索引越界\n    rangeCheckForAdd(index);\n    \n    // 扩容，与前面的add(E)方法相同\n    ensureCapacityInternal(size + 1);  // Increments modCount!!\n    // 数组拷贝\n    System.arraycopy(elementData, index, elementData, index + 1,\n                     size - index);\n    elementData[index] = element;\n    size++;\n}\n\nprivate void rangeCheckForAdd(int index) {\n    if (index > size || index < 0)\n        throw new IndexOutOfBoundsException(outOfBoundsMsg(index));\n}\n```\n与add(E)方法相比，先检查索引是否越界，因为add(E)方法默认放在最后，先扩容再插入不会存在索引越界问题，后续操作基本与add(E)相同，进行数组拷贝，然后在待插入位置赋值，size++。\n\n---\n\n- **Arrays.copyof()和System.arraycopy()**\n\n```java\n// 原数组src从某个索引位置srcPos开始，\n// 拷贝到新数组dest从某个索引位置destPos开始，拷贝长度length\npublic static native void arraycopy(Object src,  int  srcPos,\n                                    Object dest, int destPos,\n                                    int length);\n\n// 对原数组original拷贝newLength的长度，返回拷贝形成的新数组\n// newLength可以大于原数组的长度，这样相当于复制原数组的所有元素并扩容\npublic static <T> T[] copyOf(T[] original, int newLength) {\n    return (T[]) copyOf(original, newLength, original.getClass());\n}\n\npublic static <T,U> T[] copyOf(U[] original, int newLength, Class<? extends T[]> newType) {\n    @SuppressWarnings(\"unchecked\")\n    T[] copy = ((Object)newType == (Object)Object[].class)\n        ? (T[]) new Object[newLength]\n        : (T[]) Array.newInstance(newType.getComponentType(), newLength);\n    System.arraycopy(original, 0, copy, 0,\n                     Math.min(original.length, newLength));\n    return copy;\n}\n```\n其实Arrays.copyOf()方法底层仍然调用了System.arraycopy()方法；\n\n只是我们不需要自己创建新数组，方法内部已经创建好了；Arrayas.copyOf()方法主要是为了给原数组扩容。\n\n--- \n\n- **手动扩容方法**\n\nArrayList源码中有一个扩容方法是对外提供的。\n\n```java\npublic void ensureCapacity(int minCapacity) {\n    int minExpand = (elementData != DEFAULTCAPACITY_EMPTY_ELEMENTDATA)\n        // any size if not default element table\n        ? 0\n        // larger than default for default empty table. It's already\n        // supposed to be at default size.\n        : DEFAULT_CAPACITY;\n    // 需要的最小容量大于当前这个数组的最小范围\n    if (minCapacity > minExpand) {\n        ensureExplicitCapacity(minCapacity);\n    }\n}\n```\n最好在添加大量元素时先手动调用该方法进行扩容，减少后续自动扩容的次数。\n","slug":"ArrayList源码分析","published":1,"updated":"2020-08-23T12:17:13.485Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cke72eefi0001dfseh8kb7jnp","content":"<ul>\n<li><strong>构造方法</strong><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Object[] EMPTY_ELEMENTDATA = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 无参构造，默认初始化一个空数组</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ArrayList</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 指定初始容量的构造方法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ArrayList</span><span class=\"params\">(<span class=\"keyword\">int</span> initialCapacity)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (initialCapacity &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.elementData = <span class=\"keyword\">new</span> Object[initialCapacity];</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (initialCapacity == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.elementData = EMPTY_ELEMENTDATA;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">&quot;Illegal Capacity: &quot;</span>+</span><br><span class=\"line\">                                           initialCapacity);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 传入一个集合子类的构造方法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ArrayList</span><span class=\"params\">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class=\"line\">    elementData = c.toArray();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((size = elementData.length) != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// c.toArray might (incorrectly) not return Object[] (see 6260652)</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (elementData.getClass() != Object[].class)</span><br><span class=\"line\">            elementData = Arrays.copyOf(elementData, size, Object[].class);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// replace with empty array.</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.elementData = EMPTY_ELEMENTDATA;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n第二个传入指定容量的构造方法，会对数组的容量进行初始化；</li>\n</ul>\n<p>第三个传入集合的构造方法，主要应用在对集合的深拷贝。</p>\n<hr>\n<ul>\n<li><strong>add(E)方法及扩容</strong><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> DEFAULT_CAPACITY = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> MAX_ARRAY_SIZE = Integer.MAX_VALUE - <span class=\"number\">8</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">add</span><span class=\"params\">(E e)</span> </span>&#123;</span><br><span class=\"line\">    ensureCapacityInternal(size + <span class=\"number\">1</span>);  <span class=\"comment\">// Increments modCount!!</span></span><br><span class=\"line\">    elementData[size++] = e;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 根据需要的最小容量扩容</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">ensureCapacityInternal</span><span class=\"params\">(<span class=\"keyword\">int</span> minCapacity)</span> </span>&#123;</span><br><span class=\"line\">    ensureExplicitCapacity(calculateCapacity(elementData, minCapacity));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 根据需要的最终最小容量扩容</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">ensureExplicitCapacity</span><span class=\"params\">(<span class=\"keyword\">int</span> minCapacity)</span> </span>&#123;</span><br><span class=\"line\">    modCount++;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// overflow-conscious code</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (minCapacity - elementData.length &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        grow(minCapacity);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 计算得到需要的最终最小容量</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">calculateCapacity</span><span class=\"params\">(Object[] elementData, <span class=\"keyword\">int</span> minCapacity)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Math.max(DEFAULT_CAPACITY, minCapacity);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> minCapacity;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 具体的扩容方法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">grow</span><span class=\"params\">(<span class=\"keyword\">int</span> minCapacity)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// overflow-conscious code</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> oldCapacity = elementData.length;</span><br><span class=\"line\">    <span class=\"comment\">// 计算得到新容量</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> newCapacity = oldCapacity + (oldCapacity &gt;&gt; <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 如果新容量小于需要的最小容量，就扩容到需要的最小容量</span></span><br><span class=\"line\">    <span class=\"comment\">// （一般只有无参构造add第一个元素会走到这里）</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (newCapacity - minCapacity &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        newCapacity = minCapacity;</span><br><span class=\"line\">    <span class=\"comment\">// 如果新容量大于int最大值-8，通过需要的最小容量重新定义新容量</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        newCapacity = hugeCapacity(minCapacity);</span><br><span class=\"line\">    <span class=\"comment\">// minCapacity is usually close to size, so this is a win:</span></span><br><span class=\"line\">    elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 通过需要的最小容量重新定义新容量</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">hugeCapacity</span><span class=\"params\">(<span class=\"keyword\">int</span> minCapacity)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (minCapacity &lt; <span class=\"number\">0</span>) <span class=\"comment\">// overflow</span></span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> OutOfMemoryError();</span><br><span class=\"line\">    <span class=\"comment\">// 如果需要的最小容量大于int最大值-8，去int最大值；否则取int最大值-8   </span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (minCapacity &gt; MAX_ARRAY_SIZE) ?</span><br><span class=\"line\">        Integer.MAX_VALUE :</span><br><span class=\"line\">        MAX_ARRAY_SIZE;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n添加一个元素时，首先对原数组进行一次扩容，其中size代表当前已有的元素个数，所以需要的最小容量minCapacity是size+1；</li>\n</ul>\n<p>对minCapacity进行重新计算，如果是无参构造方法，由于初始化时默认是DEFAULTCAPACITY_EMPTY_ELEMENTDATA这样的空数组，所以minCapacity重新定义为size+1和默认值10的较大值。</p>\n<p>之后根据计算得到的minCapacity进行扩容：只有当minCapacity大于当前数组的长度时才需要扩容，否则不需要扩容。例如：当前数组长度10，已有3个元素，计算得到的minCapacity是4，那么不需要扩容，只有数组中元素装满时，size+1大于数组长度就需要扩容了。</p>\n<p>具体的扩容grow方法：新容量先定义成原来容量的1.5倍，然后和需要的最小容量做比较，如果依然小于需要的最小容量就用最小容量；之后判断新容量是否超过了int最大值-8，如果超过了就用需要的最小容量重新计算新容量。</p>\n<p>如果需要的最小容量大于int最大值-8，就定义为int最大值，否则定义为int最大值-8。</p>\n<p>最后通过Arrays.copyOf(elementData, newCapacity)方法扩容，具体放在后面。</p>\n<hr>\n<ul>\n<li><strong>add(int, E)方法</strong><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 插入元素E到指定的索引位置</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> index, E element)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 检查是否索引越界</span></span><br><span class=\"line\">    rangeCheckForAdd(index);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 扩容，与前面的add(E)方法相同</span></span><br><span class=\"line\">    ensureCapacityInternal(size + <span class=\"number\">1</span>);  <span class=\"comment\">// Increments modCount!!</span></span><br><span class=\"line\">    <span class=\"comment\">// 数组拷贝</span></span><br><span class=\"line\">    System.arraycopy(elementData, index, elementData, index + <span class=\"number\">1</span>,</span><br><span class=\"line\">                     size - index);</span><br><span class=\"line\">    elementData[index] = element;</span><br><span class=\"line\">    size++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">rangeCheckForAdd</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (index &gt; size || index &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IndexOutOfBoundsException(outOfBoundsMsg(index));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n与add(E)方法相比，先检查索引是否越界，因为add(E)方法默认放在最后，先扩容再插入不会存在索引越界问题，后续操作基本与add(E)相同，进行数组拷贝，然后在待插入位置赋值，size++。</li>\n</ul>\n<hr>\n<ul>\n<li><strong>Arrays.copyof()和System.arraycopy()</strong></li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 原数组src从某个索引位置srcPos开始，</span></span><br><span class=\"line\"><span class=\"comment\">// 拷贝到新数组dest从某个索引位置destPos开始，拷贝长度length</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">native</span> <span class=\"keyword\">void</span> <span class=\"title\">arraycopy</span><span class=\"params\">(Object src,  <span class=\"keyword\">int</span>  srcPos,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                    Object dest, <span class=\"keyword\">int</span> destPos,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                    <span class=\"keyword\">int</span> length)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 对原数组original拷贝newLength的长度，返回拷贝形成的新数组</span></span><br><span class=\"line\"><span class=\"comment\">// newLength可以大于原数组的长度，这样相当于复制原数组的所有元素并扩容</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; T[] copyOf(T[] original, <span class=\"keyword\">int</span> newLength) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (T[]) copyOf(original, newLength, original.getClass());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T,U&gt; T[] copyOf(U[] original, <span class=\"keyword\">int</span> newLength, Class&lt;? extends T[]&gt; newType) &#123;</span><br><span class=\"line\">    <span class=\"meta\">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class=\"line\">    T[] copy = ((Object)newType == (Object)Object[].class)</span><br><span class=\"line\">        ? (T[]) <span class=\"keyword\">new</span> Object[newLength]</span><br><span class=\"line\">        : (T[]) Array.newInstance(newType.getComponentType(), newLength);</span><br><span class=\"line\">    System.arraycopy(original, <span class=\"number\">0</span>, copy, <span class=\"number\">0</span>,</span><br><span class=\"line\">                     Math.min(original.length, newLength));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> copy;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其实Arrays.copyOf()方法底层仍然调用了System.arraycopy()方法；</p>\n<p>只是我们不需要自己创建新数组，方法内部已经创建好了；Arrayas.copyOf()方法主要是为了给原数组扩容。</p>\n<hr>\n<ul>\n<li><strong>手动扩容方法</strong></li>\n</ul>\n<p>ArrayList源码中有一个扩容方法是对外提供的。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ensureCapacity</span><span class=\"params\">(<span class=\"keyword\">int</span> minCapacity)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> minExpand = (elementData != DEFAULTCAPACITY_EMPTY_ELEMENTDATA)</span><br><span class=\"line\">        <span class=\"comment\">// any size if not default element table</span></span><br><span class=\"line\">        ? <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"comment\">// larger than default for default empty table. It&#x27;s already</span></span><br><span class=\"line\">        <span class=\"comment\">// supposed to be at default size.</span></span><br><span class=\"line\">        : DEFAULT_CAPACITY;</span><br><span class=\"line\">    <span class=\"comment\">// 需要的最小容量大于当前这个数组的最小范围</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (minCapacity &gt; minExpand) &#123;</span><br><span class=\"line\">        ensureExplicitCapacity(minCapacity);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>最好在添加大量元素时先手动调用该方法进行扩容，减少后续自动扩容的次数。</p>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li><strong>构造方法</strong><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Object[] EMPTY_ELEMENTDATA = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 无参构造，默认初始化一个空数组</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ArrayList</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 指定初始容量的构造方法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ArrayList</span><span class=\"params\">(<span class=\"keyword\">int</span> initialCapacity)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (initialCapacity &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.elementData = <span class=\"keyword\">new</span> Object[initialCapacity];</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (initialCapacity == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.elementData = EMPTY_ELEMENTDATA;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">&quot;Illegal Capacity: &quot;</span>+</span><br><span class=\"line\">                                           initialCapacity);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 传入一个集合子类的构造方法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ArrayList</span><span class=\"params\">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class=\"line\">    elementData = c.toArray();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((size = elementData.length) != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// c.toArray might (incorrectly) not return Object[] (see 6260652)</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (elementData.getClass() != Object[].class)</span><br><span class=\"line\">            elementData = Arrays.copyOf(elementData, size, Object[].class);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// replace with empty array.</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.elementData = EMPTY_ELEMENTDATA;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n第二个传入指定容量的构造方法，会对数组的容量进行初始化；</li>\n</ul>\n<p>第三个传入集合的构造方法，主要应用在对集合的深拷贝。</p>\n<hr>\n<ul>\n<li><strong>add(E)方法及扩容</strong><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> DEFAULT_CAPACITY = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> MAX_ARRAY_SIZE = Integer.MAX_VALUE - <span class=\"number\">8</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">add</span><span class=\"params\">(E e)</span> </span>&#123;</span><br><span class=\"line\">    ensureCapacityInternal(size + <span class=\"number\">1</span>);  <span class=\"comment\">// Increments modCount!!</span></span><br><span class=\"line\">    elementData[size++] = e;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 根据需要的最小容量扩容</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">ensureCapacityInternal</span><span class=\"params\">(<span class=\"keyword\">int</span> minCapacity)</span> </span>&#123;</span><br><span class=\"line\">    ensureExplicitCapacity(calculateCapacity(elementData, minCapacity));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 根据需要的最终最小容量扩容</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">ensureExplicitCapacity</span><span class=\"params\">(<span class=\"keyword\">int</span> minCapacity)</span> </span>&#123;</span><br><span class=\"line\">    modCount++;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// overflow-conscious code</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (minCapacity - elementData.length &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        grow(minCapacity);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 计算得到需要的最终最小容量</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">calculateCapacity</span><span class=\"params\">(Object[] elementData, <span class=\"keyword\">int</span> minCapacity)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Math.max(DEFAULT_CAPACITY, minCapacity);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> minCapacity;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 具体的扩容方法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">grow</span><span class=\"params\">(<span class=\"keyword\">int</span> minCapacity)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// overflow-conscious code</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> oldCapacity = elementData.length;</span><br><span class=\"line\">    <span class=\"comment\">// 计算得到新容量</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> newCapacity = oldCapacity + (oldCapacity &gt;&gt; <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 如果新容量小于需要的最小容量，就扩容到需要的最小容量</span></span><br><span class=\"line\">    <span class=\"comment\">// （一般只有无参构造add第一个元素会走到这里）</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (newCapacity - minCapacity &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        newCapacity = minCapacity;</span><br><span class=\"line\">    <span class=\"comment\">// 如果新容量大于int最大值-8，通过需要的最小容量重新定义新容量</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        newCapacity = hugeCapacity(minCapacity);</span><br><span class=\"line\">    <span class=\"comment\">// minCapacity is usually close to size, so this is a win:</span></span><br><span class=\"line\">    elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 通过需要的最小容量重新定义新容量</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">hugeCapacity</span><span class=\"params\">(<span class=\"keyword\">int</span> minCapacity)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (minCapacity &lt; <span class=\"number\">0</span>) <span class=\"comment\">// overflow</span></span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> OutOfMemoryError();</span><br><span class=\"line\">    <span class=\"comment\">// 如果需要的最小容量大于int最大值-8，去int最大值；否则取int最大值-8   </span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (minCapacity &gt; MAX_ARRAY_SIZE) ?</span><br><span class=\"line\">        Integer.MAX_VALUE :</span><br><span class=\"line\">        MAX_ARRAY_SIZE;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n添加一个元素时，首先对原数组进行一次扩容，其中size代表当前已有的元素个数，所以需要的最小容量minCapacity是size+1；</li>\n</ul>\n<p>对minCapacity进行重新计算，如果是无参构造方法，由于初始化时默认是DEFAULTCAPACITY_EMPTY_ELEMENTDATA这样的空数组，所以minCapacity重新定义为size+1和默认值10的较大值。</p>\n<p>之后根据计算得到的minCapacity进行扩容：只有当minCapacity大于当前数组的长度时才需要扩容，否则不需要扩容。例如：当前数组长度10，已有3个元素，计算得到的minCapacity是4，那么不需要扩容，只有数组中元素装满时，size+1大于数组长度就需要扩容了。</p>\n<p>具体的扩容grow方法：新容量先定义成原来容量的1.5倍，然后和需要的最小容量做比较，如果依然小于需要的最小容量就用最小容量；之后判断新容量是否超过了int最大值-8，如果超过了就用需要的最小容量重新计算新容量。</p>\n<p>如果需要的最小容量大于int最大值-8，就定义为int最大值，否则定义为int最大值-8。</p>\n<p>最后通过Arrays.copyOf(elementData, newCapacity)方法扩容，具体放在后面。</p>\n<hr>\n<ul>\n<li><strong>add(int, E)方法</strong><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 插入元素E到指定的索引位置</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> index, E element)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 检查是否索引越界</span></span><br><span class=\"line\">    rangeCheckForAdd(index);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 扩容，与前面的add(E)方法相同</span></span><br><span class=\"line\">    ensureCapacityInternal(size + <span class=\"number\">1</span>);  <span class=\"comment\">// Increments modCount!!</span></span><br><span class=\"line\">    <span class=\"comment\">// 数组拷贝</span></span><br><span class=\"line\">    System.arraycopy(elementData, index, elementData, index + <span class=\"number\">1</span>,</span><br><span class=\"line\">                     size - index);</span><br><span class=\"line\">    elementData[index] = element;</span><br><span class=\"line\">    size++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">rangeCheckForAdd</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (index &gt; size || index &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IndexOutOfBoundsException(outOfBoundsMsg(index));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n与add(E)方法相比，先检查索引是否越界，因为add(E)方法默认放在最后，先扩容再插入不会存在索引越界问题，后续操作基本与add(E)相同，进行数组拷贝，然后在待插入位置赋值，size++。</li>\n</ul>\n<hr>\n<ul>\n<li><strong>Arrays.copyof()和System.arraycopy()</strong></li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 原数组src从某个索引位置srcPos开始，</span></span><br><span class=\"line\"><span class=\"comment\">// 拷贝到新数组dest从某个索引位置destPos开始，拷贝长度length</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">native</span> <span class=\"keyword\">void</span> <span class=\"title\">arraycopy</span><span class=\"params\">(Object src,  <span class=\"keyword\">int</span>  srcPos,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                    Object dest, <span class=\"keyword\">int</span> destPos,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                    <span class=\"keyword\">int</span> length)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 对原数组original拷贝newLength的长度，返回拷贝形成的新数组</span></span><br><span class=\"line\"><span class=\"comment\">// newLength可以大于原数组的长度，这样相当于复制原数组的所有元素并扩容</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; T[] copyOf(T[] original, <span class=\"keyword\">int</span> newLength) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (T[]) copyOf(original, newLength, original.getClass());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T,U&gt; T[] copyOf(U[] original, <span class=\"keyword\">int</span> newLength, Class&lt;? extends T[]&gt; newType) &#123;</span><br><span class=\"line\">    <span class=\"meta\">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class=\"line\">    T[] copy = ((Object)newType == (Object)Object[].class)</span><br><span class=\"line\">        ? (T[]) <span class=\"keyword\">new</span> Object[newLength]</span><br><span class=\"line\">        : (T[]) Array.newInstance(newType.getComponentType(), newLength);</span><br><span class=\"line\">    System.arraycopy(original, <span class=\"number\">0</span>, copy, <span class=\"number\">0</span>,</span><br><span class=\"line\">                     Math.min(original.length, newLength));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> copy;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其实Arrays.copyOf()方法底层仍然调用了System.arraycopy()方法；</p>\n<p>只是我们不需要自己创建新数组，方法内部已经创建好了；Arrayas.copyOf()方法主要是为了给原数组扩容。</p>\n<hr>\n<ul>\n<li><strong>手动扩容方法</strong></li>\n</ul>\n<p>ArrayList源码中有一个扩容方法是对外提供的。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ensureCapacity</span><span class=\"params\">(<span class=\"keyword\">int</span> minCapacity)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> minExpand = (elementData != DEFAULTCAPACITY_EMPTY_ELEMENTDATA)</span><br><span class=\"line\">        <span class=\"comment\">// any size if not default element table</span></span><br><span class=\"line\">        ? <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"comment\">// larger than default for default empty table. It&#x27;s already</span></span><br><span class=\"line\">        <span class=\"comment\">// supposed to be at default size.</span></span><br><span class=\"line\">        : DEFAULT_CAPACITY;</span><br><span class=\"line\">    <span class=\"comment\">// 需要的最小容量大于当前这个数组的最小范围</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (minCapacity &gt; minExpand) &#123;</span><br><span class=\"line\">        ensureExplicitCapacity(minCapacity);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>最好在添加大量元素时先手动调用该方法进行扩容，减少后续自动扩容的次数。</p>\n"},{"title":"Executors中的线程池","date":"2020-06-03T13:21:19.000Z","_content":"\n- newFixedThreadPool:创建固定大小的线程池, 多于这个数量的放在无界队列中。\n\n```java\npublic static ExecutorService newFixedThreadPool(int nThreads) {\n    return new ThreadPoolExecutor(nThreads, nThreads,\n                                  0L, TimeUnit.MILLISECONDS,\n                                  new LinkedBlockingQueue<Runnable>());\n}\n```\n\n- newSingleThreadExecutor：大小为1的newFixedThreadPool\n\n```java\npublic static ExecutorService newSingleThreadExecutor() {\n    return new FinalizableDelegatedExecutorService\n        (new ThreadPoolExecutor(1, 1,\n                                0L, TimeUnit.MILLISECONDS,\n                                new LinkedBlockingQueue<Runnable>()));\n}\n```\n- newCachedThreadPool：没有核心线程，一个任务进来以后创建一个线程。\n\n```java\npublic static ExecutorService newCachedThreadPool() {\n    return new ThreadPoolExecutor(0, Integer.MAX_VALUE,\n                                  60L, TimeUnit.SECONDS,\n                                  new SynchronousQueue<Runnable>());\n}\n```\n\n- newScheduledThreadPool：具有延时执行和可以周期性执行的队列的线程池。\n\n```java\npublic ScheduledThreadPoolExecutor(int corePoolSize) {\n    super(corePoolSize, Integer.MAX_VALUE, 0, NANOSECONDS,\n          new DelayedWorkQueue());\n}\n```\n\n- newWorkStealingPool: 可用于并行操作的线程池。\n\n```java\npublic static ExecutorService newWorkStealingPool(int parallelism) {\n    return new ForkJoinPool\n        (parallelism,\n         ForkJoinPool.defaultForkJoinWorkerThreadFactory,\n         null, true);\n}\n```\n\n    ","source":"_posts/Executors中的线程池.md","raw":"---\ntitle: Executors中的线程池\ndate: 2020-06-03 21:21:19\ntags:\ncategories:\n- 多线程\n---\n\n- newFixedThreadPool:创建固定大小的线程池, 多于这个数量的放在无界队列中。\n\n```java\npublic static ExecutorService newFixedThreadPool(int nThreads) {\n    return new ThreadPoolExecutor(nThreads, nThreads,\n                                  0L, TimeUnit.MILLISECONDS,\n                                  new LinkedBlockingQueue<Runnable>());\n}\n```\n\n- newSingleThreadExecutor：大小为1的newFixedThreadPool\n\n```java\npublic static ExecutorService newSingleThreadExecutor() {\n    return new FinalizableDelegatedExecutorService\n        (new ThreadPoolExecutor(1, 1,\n                                0L, TimeUnit.MILLISECONDS,\n                                new LinkedBlockingQueue<Runnable>()));\n}\n```\n- newCachedThreadPool：没有核心线程，一个任务进来以后创建一个线程。\n\n```java\npublic static ExecutorService newCachedThreadPool() {\n    return new ThreadPoolExecutor(0, Integer.MAX_VALUE,\n                                  60L, TimeUnit.SECONDS,\n                                  new SynchronousQueue<Runnable>());\n}\n```\n\n- newScheduledThreadPool：具有延时执行和可以周期性执行的队列的线程池。\n\n```java\npublic ScheduledThreadPoolExecutor(int corePoolSize) {\n    super(corePoolSize, Integer.MAX_VALUE, 0, NANOSECONDS,\n          new DelayedWorkQueue());\n}\n```\n\n- newWorkStealingPool: 可用于并行操作的线程池。\n\n```java\npublic static ExecutorService newWorkStealingPool(int parallelism) {\n    return new ForkJoinPool\n        (parallelism,\n         ForkJoinPool.defaultForkJoinWorkerThreadFactory,\n         null, true);\n}\n```\n\n    ","slug":"Executors中的线程池","published":1,"updated":"2020-08-23T12:16:59.506Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cke72eefl0002dfse6pskdw71","content":"<ul>\n<li>newFixedThreadPool:创建固定大小的线程池, 多于这个数量的放在无界队列中。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ExecutorService <span class=\"title\">newFixedThreadPool</span><span class=\"params\">(<span class=\"keyword\">int</span> nThreads)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ThreadPoolExecutor(nThreads, nThreads,</span><br><span class=\"line\">                                  <span class=\"number\">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class=\"line\">                                  <span class=\"keyword\">new</span> LinkedBlockingQueue&lt;Runnable&gt;());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>newSingleThreadExecutor：大小为1的newFixedThreadPool</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ExecutorService <span class=\"title\">newSingleThreadExecutor</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> FinalizableDelegatedExecutorService</span><br><span class=\"line\">        (<span class=\"keyword\">new</span> ThreadPoolExecutor(<span class=\"number\">1</span>, <span class=\"number\">1</span>,</span><br><span class=\"line\">                                <span class=\"number\">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class=\"line\">                                <span class=\"keyword\">new</span> LinkedBlockingQueue&lt;Runnable&gt;()));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>newCachedThreadPool：没有核心线程，一个任务进来以后创建一个线程。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ExecutorService <span class=\"title\">newCachedThreadPool</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ThreadPoolExecutor(<span class=\"number\">0</span>, Integer.MAX_VALUE,</span><br><span class=\"line\">                                  <span class=\"number\">60L</span>, TimeUnit.SECONDS,</span><br><span class=\"line\">                                  <span class=\"keyword\">new</span> SynchronousQueue&lt;Runnable&gt;());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>newScheduledThreadPool：具有延时执行和可以周期性执行的队列的线程池。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ScheduledThreadPoolExecutor</span><span class=\"params\">(<span class=\"keyword\">int</span> corePoolSize)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(corePoolSize, Integer.MAX_VALUE, <span class=\"number\">0</span>, NANOSECONDS,</span><br><span class=\"line\">          <span class=\"keyword\">new</span> DelayedWorkQueue());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>newWorkStealingPool: 可用于并行操作的线程池。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ExecutorService <span class=\"title\">newWorkStealingPool</span><span class=\"params\">(<span class=\"keyword\">int</span> parallelism)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ForkJoinPool</span><br><span class=\"line\">        (parallelism,</span><br><span class=\"line\">         ForkJoinPool.defaultForkJoinWorkerThreadFactory,</span><br><span class=\"line\">         <span class=\"keyword\">null</span>, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li>newFixedThreadPool:创建固定大小的线程池, 多于这个数量的放在无界队列中。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ExecutorService <span class=\"title\">newFixedThreadPool</span><span class=\"params\">(<span class=\"keyword\">int</span> nThreads)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ThreadPoolExecutor(nThreads, nThreads,</span><br><span class=\"line\">                                  <span class=\"number\">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class=\"line\">                                  <span class=\"keyword\">new</span> LinkedBlockingQueue&lt;Runnable&gt;());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>newSingleThreadExecutor：大小为1的newFixedThreadPool</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ExecutorService <span class=\"title\">newSingleThreadExecutor</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> FinalizableDelegatedExecutorService</span><br><span class=\"line\">        (<span class=\"keyword\">new</span> ThreadPoolExecutor(<span class=\"number\">1</span>, <span class=\"number\">1</span>,</span><br><span class=\"line\">                                <span class=\"number\">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class=\"line\">                                <span class=\"keyword\">new</span> LinkedBlockingQueue&lt;Runnable&gt;()));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>newCachedThreadPool：没有核心线程，一个任务进来以后创建一个线程。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ExecutorService <span class=\"title\">newCachedThreadPool</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ThreadPoolExecutor(<span class=\"number\">0</span>, Integer.MAX_VALUE,</span><br><span class=\"line\">                                  <span class=\"number\">60L</span>, TimeUnit.SECONDS,</span><br><span class=\"line\">                                  <span class=\"keyword\">new</span> SynchronousQueue&lt;Runnable&gt;());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>newScheduledThreadPool：具有延时执行和可以周期性执行的队列的线程池。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ScheduledThreadPoolExecutor</span><span class=\"params\">(<span class=\"keyword\">int</span> corePoolSize)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(corePoolSize, Integer.MAX_VALUE, <span class=\"number\">0</span>, NANOSECONDS,</span><br><span class=\"line\">          <span class=\"keyword\">new</span> DelayedWorkQueue());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>newWorkStealingPool: 可用于并行操作的线程池。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ExecutorService <span class=\"title\">newWorkStealingPool</span><span class=\"params\">(<span class=\"keyword\">int</span> parallelism)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ForkJoinPool</span><br><span class=\"line\">        (parallelism,</span><br><span class=\"line\">         ForkJoinPool.defaultForkJoinWorkerThreadFactory,</span><br><span class=\"line\">         <span class=\"keyword\">null</span>, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"CopyOnWriteArrayList分析","date":"2020-07-08T13:18:22.000Z","_content":"\n- **读写分离**\n\n1. 写操作是在一个复制数组上进行的，读操作是在原数组上进行的。读写分离，互不影响。\n2. 写操作会加锁，防止并发写入时导致数据丢失。\n3. 写操作结束后会把原数组的引用指向该复制数组。\n\n```java\n// 写\npublic boolean add(E e) {\n    final ReentrantLock lock = this.lock;\n    lock.lock();\n    try {\n        Object[] elements = getArray();\n        int len = elements.length;\n        Object[] newElements = Arrays.copyOf(elements, len + 1);\n        newElements[len] = e;\n        setArray(newElements);\n        return true;\n    } finally {\n        lock.unlock();\n    }\n}\n\nfinal void setArray(Object[] a) {\n    array = a;\n}\n\n// 读\n@SuppressWarnings(\"unchecked\")\nprivate E get(Object[] a, int index) {\n    return (E) a[index];\n}\n\n```\n\n- **适用场景**\n\n    - **优点**：\n    \n      在写的同时允许读操作，读操作的性能得到了极大的提升，比较适合读多写少的场景。\n    \n    - **缺点**：\n        - 内存占用：写操作需要复制一个新的数组，导致内存占用是原来的两倍多。\n        - 数据不一致：不能实时读到最新的数据，会出现读写同时发生的时候部分数据还未被同步到读数组。\n        \n    所以CopyOnWriteArrayList不适合内存敏感和对实时性要求很高的场景。\n\n    ","source":"_posts/CopyOnWriteArrayList分析.md","raw":"---\ntitle: CopyOnWriteArrayList分析\ndate: 2020-07-08 21:18:22\ntags:\ncategories:\n- java\n---\n\n- **读写分离**\n\n1. 写操作是在一个复制数组上进行的，读操作是在原数组上进行的。读写分离，互不影响。\n2. 写操作会加锁，防止并发写入时导致数据丢失。\n3. 写操作结束后会把原数组的引用指向该复制数组。\n\n```java\n// 写\npublic boolean add(E e) {\n    final ReentrantLock lock = this.lock;\n    lock.lock();\n    try {\n        Object[] elements = getArray();\n        int len = elements.length;\n        Object[] newElements = Arrays.copyOf(elements, len + 1);\n        newElements[len] = e;\n        setArray(newElements);\n        return true;\n    } finally {\n        lock.unlock();\n    }\n}\n\nfinal void setArray(Object[] a) {\n    array = a;\n}\n\n// 读\n@SuppressWarnings(\"unchecked\")\nprivate E get(Object[] a, int index) {\n    return (E) a[index];\n}\n\n```\n\n- **适用场景**\n\n    - **优点**：\n    \n      在写的同时允许读操作，读操作的性能得到了极大的提升，比较适合读多写少的场景。\n    \n    - **缺点**：\n        - 内存占用：写操作需要复制一个新的数组，导致内存占用是原来的两倍多。\n        - 数据不一致：不能实时读到最新的数据，会出现读写同时发生的时候部分数据还未被同步到读数组。\n        \n    所以CopyOnWriteArrayList不适合内存敏感和对实时性要求很高的场景。\n\n    ","slug":"CopyOnWriteArrayList分析","published":1,"updated":"2020-08-23T12:17:23.765Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cke72eefo0004dfse0u89f87r","content":"<ul>\n<li><strong>读写分离</strong></li>\n</ul>\n<ol>\n<li>写操作是在一个复制数组上进行的，读操作是在原数组上进行的。读写分离，互不影响。</li>\n<li>写操作会加锁，防止并发写入时导致数据丢失。</li>\n<li>写操作结束后会把原数组的引用指向该复制数组。</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 写</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">add</span><span class=\"params\">(E e)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> ReentrantLock lock = <span class=\"keyword\">this</span>.lock;</span><br><span class=\"line\">    lock.lock();</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        Object[] elements = getArray();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> len = elements.length;</span><br><span class=\"line\">        Object[] newElements = Arrays.copyOf(elements, len + <span class=\"number\">1</span>);</span><br><span class=\"line\">        newElements[len] = e;</span><br><span class=\"line\">        setArray(newElements);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        lock.unlock();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">setArray</span><span class=\"params\">(Object[] a)</span> </span>&#123;</span><br><span class=\"line\">    array = a;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 读</span></span><br><span class=\"line\"><span class=\"meta\">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> E <span class=\"title\">get</span><span class=\"params\">(Object[] a, <span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (E) a[index];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p><strong>适用场景</strong></p>\n<ul>\n<li><p><strong>优点</strong>：</p>\n<p>在写的同时允许读操作，读操作的性能得到了极大的提升，比较适合读多写少的场景。</p>\n</li>\n<li><p><strong>缺点</strong>：</p>\n<ul>\n<li>内存占用：写操作需要复制一个新的数组，导致内存占用是原来的两倍多。</li>\n<li>数据不一致：不能实时读到最新的数据，会出现读写同时发生的时候部分数据还未被同步到读数组。</li>\n</ul>\n<p>所以CopyOnWriteArrayList不适合内存敏感和对实时性要求很高的场景。</p>\n</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li><strong>读写分离</strong></li>\n</ul>\n<ol>\n<li>写操作是在一个复制数组上进行的，读操作是在原数组上进行的。读写分离，互不影响。</li>\n<li>写操作会加锁，防止并发写入时导致数据丢失。</li>\n<li>写操作结束后会把原数组的引用指向该复制数组。</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 写</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">add</span><span class=\"params\">(E e)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> ReentrantLock lock = <span class=\"keyword\">this</span>.lock;</span><br><span class=\"line\">    lock.lock();</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        Object[] elements = getArray();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> len = elements.length;</span><br><span class=\"line\">        Object[] newElements = Arrays.copyOf(elements, len + <span class=\"number\">1</span>);</span><br><span class=\"line\">        newElements[len] = e;</span><br><span class=\"line\">        setArray(newElements);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        lock.unlock();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">setArray</span><span class=\"params\">(Object[] a)</span> </span>&#123;</span><br><span class=\"line\">    array = a;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 读</span></span><br><span class=\"line\"><span class=\"meta\">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> E <span class=\"title\">get</span><span class=\"params\">(Object[] a, <span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (E) a[index];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p><strong>适用场景</strong></p>\n<ul>\n<li><p><strong>优点</strong>：</p>\n<p>在写的同时允许读操作，读操作的性能得到了极大的提升，比较适合读多写少的场景。</p>\n</li>\n<li><p><strong>缺点</strong>：</p>\n<ul>\n<li>内存占用：写操作需要复制一个新的数组，导致内存占用是原来的两倍多。</li>\n<li>数据不一致：不能实时读到最新的数据，会出现读写同时发生的时候部分数据还未被同步到读数组。</li>\n</ul>\n<p>所以CopyOnWriteArrayList不适合内存敏感和对实时性要求很高的场景。</p>\n</li>\n</ul>\n</li>\n</ul>\n"},{"title":"Java中字符串分割问题","date":"2019-10-19T06:37:52.000Z","_content":"\n```\nstringObj.split([separator，[limit]]) \n```\n\n1. 直接分割：\n\n```\nString s = \"a,b,c,d,,,\";\nString[] strArr = s.split(\",\");\n//此时strArr为a,b,c,d\n```\n\n2. 带limit条件分割:\n\n```\nString s = \"a,b,c,d,,,\";\nString[] strArr = s.split(\",\"，-1);\n//此时strArr为a,b,c,d,\"\",\"\",\"\"\n```\n\n3. 分割特殊字符时需要使用转义字符:\n\n```\nString s = \"a$b$c\";\nString[] strArr = s.split(\"\\\\$\");\n//此时strArr为a,b,c\n```\n\n","source":"_posts/Java中字符串分割问题.md","raw":"---\ntitle: Java中字符串分割问题\ndate: 2019-10-19 14:37:52\ntags:\ncategories:\n- java\n---\n\n```\nstringObj.split([separator，[limit]]) \n```\n\n1. 直接分割：\n\n```\nString s = \"a,b,c,d,,,\";\nString[] strArr = s.split(\",\");\n//此时strArr为a,b,c,d\n```\n\n2. 带limit条件分割:\n\n```\nString s = \"a,b,c,d,,,\";\nString[] strArr = s.split(\",\"，-1);\n//此时strArr为a,b,c,d,\"\",\"\",\"\"\n```\n\n3. 分割特殊字符时需要使用转义字符:\n\n```\nString s = \"a$b$c\";\nString[] strArr = s.split(\"\\\\$\");\n//此时strArr为a,b,c\n```\n\n","slug":"Java中字符串分割问题","published":1,"updated":"2020-08-23T11:42:25.325Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cke72eefp0005dfse49ofg177","content":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">stringObj.split([separator，[limit]]) </span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>直接分割：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String s &#x3D; &quot;a,b,c,d,,,&quot;;</span><br><span class=\"line\">String[] strArr &#x3D; s.split(&quot;,&quot;);</span><br><span class=\"line\">&#x2F;&#x2F;此时strArr为a,b,c,d</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>带limit条件分割:</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String s &#x3D; &quot;a,b,c,d,,,&quot;;</span><br><span class=\"line\">String[] strArr &#x3D; s.split(&quot;,&quot;，-1);</span><br><span class=\"line\">&#x2F;&#x2F;此时strArr为a,b,c,d,&quot;&quot;,&quot;&quot;,&quot;&quot;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>分割特殊字符时需要使用转义字符:</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String s &#x3D; &quot;a$b$c&quot;;</span><br><span class=\"line\">String[] strArr &#x3D; s.split(&quot;\\\\$&quot;);</span><br><span class=\"line\">&#x2F;&#x2F;此时strArr为a,b,c</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">stringObj.split([separator，[limit]]) </span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>直接分割：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String s &#x3D; &quot;a,b,c,d,,,&quot;;</span><br><span class=\"line\">String[] strArr &#x3D; s.split(&quot;,&quot;);</span><br><span class=\"line\">&#x2F;&#x2F;此时strArr为a,b,c,d</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>带limit条件分割:</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String s &#x3D; &quot;a,b,c,d,,,&quot;;</span><br><span class=\"line\">String[] strArr &#x3D; s.split(&quot;,&quot;，-1);</span><br><span class=\"line\">&#x2F;&#x2F;此时strArr为a,b,c,d,&quot;&quot;,&quot;&quot;,&quot;&quot;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>分割特殊字符时需要使用转义字符:</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String s &#x3D; &quot;a$b$c&quot;;</span><br><span class=\"line\">String[] strArr &#x3D; s.split(&quot;\\\\$&quot;);</span><br><span class=\"line\">&#x2F;&#x2F;此时strArr为a,b,c</span><br></pre></td></tr></table></figure>\n\n"},{"title":"SpringBoot启动时SLF4J警告的一次解决","date":"2019-11-10T07:35:05.000Z","_content":"\n- 问题：SpringBoot中启动时发生**SLF4J: Class path contains multiple SLF4J bindings**警告\n\n```java\nSLF4J: Class path contains multiple SLF4J bindings.\nSLF4J: Found binding in [jar:file:/D:/MavenRepository/ch/qos/logback/logback-classic/1.1.11/logback-classic-1.1.11.jar!/org/slf4j/impl/StaticLoggerBinder.class]\nSLF4J: Found binding in [jar:file:/D:/MavenRepository/org/slf4j/slf4j-log4j12/1.7.25/slf4j-log4j12-1.7.25.jar!/org/slf4j/impl/StaticLoggerBinder.class]\nSLF4J: See http://www.slf4j.org/codes.html#multiple_bindings for an explanation.\nSLF4J: Actual binding is of type [ch.qos.logback.classic.util.ContextSelectorStaticBinder]\n```\n\n- 影响：这个警告不仅会在本地启动项目时发生，部署在服务器上也会出现这种情况，目前并没有发现有什么影响，但是作为一个有洁癖的程序猿，肯定不能容忍每次启动项目都是一大堆警告，所以需要对这个问题进行研究并把警告去除掉。\n- 解析：上面的意思是说在类路径下包含多个SLF4J绑定，并且`logback-classic-1.1.11.jar`这个包和`slf4j-log4j12-1.7.25.jar`这个包，在`/org/slf4j/impl/StaticLoggerBinder.class`这个类身上发生了冲突。\n\n- 原因：通过网上查阅资料，了解到发生这个错误的原因，首先logback 日志的开发者和log4j 的开发者据说是一波人，而springboot 默认日志是较新的logback 日志。但是在以前流行的日志却是log4j ，而且很多的第三方工具都默认含有log4j 的引入。而我们在项目开发中，难免会引入各种各样的工具包，所以，基本上springboot 项目，如果不注意，肯定会出现这种冲突的，这样势必会导致SLF4J发生多个绑定的警告。(参考 https://blog.csdn.net/wohaqiyi/article/details/81009689 )\n\n- 验证：通过使用`mvn dependency:tree `命令来进行排查。发现springboot默认引入了logback日志，而前不久加进项目中的zookeeper依赖默认引入了log4j日志，从而导致SLF4J绑定冲突。\n\n```java\n[INFO] +- org.springframework.boot:spring-boot-starter-mail:jar:1.5.16.RELEASE:compile\n[INFO] |  +- org.springframework.boot:spring-boot-starter:jar:1.5.16.RELEASE:compile\n[INFO] |  |  +- org.springframework.boot:spring-boot:jar:1.5.16.RELEASE:compile\n[INFO] |  |  +- org.springframework.boot:spring-boot-starter-logging:jar:1.5.16.RELEASE:compile\n[INFO] |  |  |  +- ch.qos.logback:logback-classic:jar:1.1.11:compile\n[INFO] |  |  |  |  \\- ch.qos.logback:logback-core:jar:1.1.11:compile\n\n[INFO] +- org.apache.zookeeper:zookeeper:jar:3.5.4-beta:compile\n[INFO] |  +- org.slf4j:slf4j-api:jar:1.7.25:compile\n[INFO] |  +- org.slf4j:slf4j-log4j12:jar:1.7.25:compile\n[INFO] |  +- commons-cli:commons-cli:jar:1.2:compile\n[INFO] |  +- log4j:log4j:jar:1.2.17:compile\n[INFO] |  +- org.apache.yetus:audience-annotations:jar:0.5.0:compile\n[INFO] |  \\- io.netty:netty:jar:3.10.6.Final:compile\n```\n\n- 解决：把上面冲突的其中一个jar包排除掉即可，很显然我选择排除zookeeper。\n\n```\n<dependency>\n\t<groupId>org.apache.zookeeper</groupId>\n\t<artifactId>zookeeper</artifactId>\n\t<version>3.5.4-beta</version>\n\t<exclusions>\n\t\t<exclusion>\n\t\t\t<groupId>org.slf4j</groupId>\n\t\t\t<artifactId>slf4j-log4j12</artifactId>\n\t\t</exclusion>\n\t</exclusions>\n</dependency>\n```\n\n再次启动项目，发现再也没有烦人的SLF4J警告啦，完美解决问题。","source":"_posts/SpringBoot启动时SLF4J警告的一次解决.md","raw":"---\ntitle: SpringBoot启动时SLF4J警告的一次解决\ndate: 2019-11-10 15:35:05\ntags:\ncategories:\n- Spring\n---\n\n- 问题：SpringBoot中启动时发生**SLF4J: Class path contains multiple SLF4J bindings**警告\n\n```java\nSLF4J: Class path contains multiple SLF4J bindings.\nSLF4J: Found binding in [jar:file:/D:/MavenRepository/ch/qos/logback/logback-classic/1.1.11/logback-classic-1.1.11.jar!/org/slf4j/impl/StaticLoggerBinder.class]\nSLF4J: Found binding in [jar:file:/D:/MavenRepository/org/slf4j/slf4j-log4j12/1.7.25/slf4j-log4j12-1.7.25.jar!/org/slf4j/impl/StaticLoggerBinder.class]\nSLF4J: See http://www.slf4j.org/codes.html#multiple_bindings for an explanation.\nSLF4J: Actual binding is of type [ch.qos.logback.classic.util.ContextSelectorStaticBinder]\n```\n\n- 影响：这个警告不仅会在本地启动项目时发生，部署在服务器上也会出现这种情况，目前并没有发现有什么影响，但是作为一个有洁癖的程序猿，肯定不能容忍每次启动项目都是一大堆警告，所以需要对这个问题进行研究并把警告去除掉。\n- 解析：上面的意思是说在类路径下包含多个SLF4J绑定，并且`logback-classic-1.1.11.jar`这个包和`slf4j-log4j12-1.7.25.jar`这个包，在`/org/slf4j/impl/StaticLoggerBinder.class`这个类身上发生了冲突。\n\n- 原因：通过网上查阅资料，了解到发生这个错误的原因，首先logback 日志的开发者和log4j 的开发者据说是一波人，而springboot 默认日志是较新的logback 日志。但是在以前流行的日志却是log4j ，而且很多的第三方工具都默认含有log4j 的引入。而我们在项目开发中，难免会引入各种各样的工具包，所以，基本上springboot 项目，如果不注意，肯定会出现这种冲突的，这样势必会导致SLF4J发生多个绑定的警告。(参考 https://blog.csdn.net/wohaqiyi/article/details/81009689 )\n\n- 验证：通过使用`mvn dependency:tree `命令来进行排查。发现springboot默认引入了logback日志，而前不久加进项目中的zookeeper依赖默认引入了log4j日志，从而导致SLF4J绑定冲突。\n\n```java\n[INFO] +- org.springframework.boot:spring-boot-starter-mail:jar:1.5.16.RELEASE:compile\n[INFO] |  +- org.springframework.boot:spring-boot-starter:jar:1.5.16.RELEASE:compile\n[INFO] |  |  +- org.springframework.boot:spring-boot:jar:1.5.16.RELEASE:compile\n[INFO] |  |  +- org.springframework.boot:spring-boot-starter-logging:jar:1.5.16.RELEASE:compile\n[INFO] |  |  |  +- ch.qos.logback:logback-classic:jar:1.1.11:compile\n[INFO] |  |  |  |  \\- ch.qos.logback:logback-core:jar:1.1.11:compile\n\n[INFO] +- org.apache.zookeeper:zookeeper:jar:3.5.4-beta:compile\n[INFO] |  +- org.slf4j:slf4j-api:jar:1.7.25:compile\n[INFO] |  +- org.slf4j:slf4j-log4j12:jar:1.7.25:compile\n[INFO] |  +- commons-cli:commons-cli:jar:1.2:compile\n[INFO] |  +- log4j:log4j:jar:1.2.17:compile\n[INFO] |  +- org.apache.yetus:audience-annotations:jar:0.5.0:compile\n[INFO] |  \\- io.netty:netty:jar:3.10.6.Final:compile\n```\n\n- 解决：把上面冲突的其中一个jar包排除掉即可，很显然我选择排除zookeeper。\n\n```\n<dependency>\n\t<groupId>org.apache.zookeeper</groupId>\n\t<artifactId>zookeeper</artifactId>\n\t<version>3.5.4-beta</version>\n\t<exclusions>\n\t\t<exclusion>\n\t\t\t<groupId>org.slf4j</groupId>\n\t\t\t<artifactId>slf4j-log4j12</artifactId>\n\t\t</exclusion>\n\t</exclusions>\n</dependency>\n```\n\n再次启动项目，发现再也没有烦人的SLF4J警告啦，完美解决问题。","slug":"SpringBoot启动时SLF4J警告的一次解决","published":1,"updated":"2020-08-23T11:47:07.827Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cke72eefq0006dfseda2dcbh5","content":"<ul>\n<li>问题：SpringBoot中启动时发生<strong>SLF4J: Class path contains multiple SLF4J bindings</strong>警告</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SLF4J: Class path contains multiple SLF4J bindings.</span><br><span class=\"line\">SLF4J: Found binding in [jar:file:/D:/MavenRepository/ch/qos/logback/logback-classic/<span class=\"number\">1.1</span>.<span class=\"number\">11</span>/logback-classic-<span class=\"number\">1.1</span>.<span class=\"number\">11.</span>jar!/org/slf4j/impl/StaticLoggerBinder.class]</span><br><span class=\"line\">SLF4J: Found binding in [jar:file:/D:/MavenRepository/org/slf4j/slf4j-log4j12/<span class=\"number\">1.7</span>.<span class=\"number\">25</span>/slf4j-log4j12-<span class=\"number\">1.7</span>.<span class=\"number\">25.</span>jar!/org/slf4j/impl/StaticLoggerBinder.class]</span><br><span class=\"line\">SLF4J: See http:<span class=\"comment\">//www.slf4j.org/codes.html#multiple_bindings for an explanation.</span></span><br><span class=\"line\">SLF4J: Actual binding is of type [ch.qos.logback.classic.util.ContextSelectorStaticBinder]</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>影响：这个警告不仅会在本地启动项目时发生，部署在服务器上也会出现这种情况，目前并没有发现有什么影响，但是作为一个有洁癖的程序猿，肯定不能容忍每次启动项目都是一大堆警告，所以需要对这个问题进行研究并把警告去除掉。</p>\n</li>\n<li><p>解析：上面的意思是说在类路径下包含多个SLF4J绑定，并且<code>logback-classic-1.1.11.jar</code>这个包和<code>slf4j-log4j12-1.7.25.jar</code>这个包，在<code>/org/slf4j/impl/StaticLoggerBinder.class</code>这个类身上发生了冲突。</p>\n</li>\n<li><p>原因：通过网上查阅资料，了解到发生这个错误的原因，首先logback 日志的开发者和log4j 的开发者据说是一波人，而springboot 默认日志是较新的logback 日志。但是在以前流行的日志却是log4j ，而且很多的第三方工具都默认含有log4j 的引入。而我们在项目开发中，难免会引入各种各样的工具包，所以，基本上springboot 项目，如果不注意，肯定会出现这种冲突的，这样势必会导致SLF4J发生多个绑定的警告。(参考 <a href=\"https://blog.csdn.net/wohaqiyi/article/details/81009689\">https://blog.csdn.net/wohaqiyi/article/details/81009689</a> )</p>\n</li>\n<li><p>验证：通过使用<code>mvn dependency:tree </code>命令来进行排查。发现springboot默认引入了logback日志，而前不久加进项目中的zookeeper依赖默认引入了log4j日志，从而导致SLF4J绑定冲突。</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[INFO] +- org.springframework.boot:spring-boot-starter-mail:jar:<span class=\"number\">1.5</span>.<span class=\"number\">16.</span>RELEASE:compile</span><br><span class=\"line\">[INFO] |  +- org.springframework.boot:spring-boot-starter:jar:<span class=\"number\">1.5</span>.<span class=\"number\">16.</span>RELEASE:compile</span><br><span class=\"line\">[INFO] |  |  +- org.springframework.boot:spring-boot:jar:<span class=\"number\">1.5</span>.<span class=\"number\">16.</span>RELEASE:compile</span><br><span class=\"line\">[INFO] |  |  +- org.springframework.boot:spring-boot-starter-logging:jar:<span class=\"number\">1.5</span>.<span class=\"number\">16.</span>RELEASE:compile</span><br><span class=\"line\">[INFO] |  |  |  +- ch.qos.logback:logback-classic:jar:<span class=\"number\">1.1</span>.<span class=\"number\">11</span>:compile</span><br><span class=\"line\">[INFO] |  |  |  |  \\- ch.qos.logback:logback-core:jar:<span class=\"number\">1.1</span>.<span class=\"number\">11</span>:compile</span><br><span class=\"line\"></span><br><span class=\"line\">[INFO] +- org.apache.zookeeper:zookeeper:jar:<span class=\"number\">3.5</span>.<span class=\"number\">4</span>-beta:compile</span><br><span class=\"line\">[INFO] |  +- org.slf4j:slf4j-api:jar:<span class=\"number\">1.7</span>.<span class=\"number\">25</span>:compile</span><br><span class=\"line\">[INFO] |  +- org.slf4j:slf4j-log4j12:jar:<span class=\"number\">1.7</span>.<span class=\"number\">25</span>:compile</span><br><span class=\"line\">[INFO] |  +- commons-cli:commons-cli:jar:<span class=\"number\">1.2</span>:compile</span><br><span class=\"line\">[INFO] |  +- log4j:log4j:jar:<span class=\"number\">1.2</span>.<span class=\"number\">17</span>:compile</span><br><span class=\"line\">[INFO] |  +- org.apache.yetus:audience-annotations:jar:<span class=\"number\">0.5</span>.<span class=\"number\">0</span>:compile</span><br><span class=\"line\">[INFO] |  \\- io.netty:netty:jar:<span class=\"number\">3.10</span>.<span class=\"number\">6.F</span>inal:compile</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>解决：把上面冲突的其中一个jar包排除掉即可，很显然我选择排除zookeeper。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">\t&lt;groupId&gt;org.apache.zookeeper&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">\t&lt;artifactId&gt;zookeeper&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">\t&lt;version&gt;3.5.4-beta&lt;&#x2F;version&gt;</span><br><span class=\"line\">\t&lt;exclusions&gt;</span><br><span class=\"line\">\t\t&lt;exclusion&gt;</span><br><span class=\"line\">\t\t\t&lt;groupId&gt;org.slf4j&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">\t\t\t&lt;artifactId&gt;slf4j-log4j12&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">\t\t&lt;&#x2F;exclusion&gt;</span><br><span class=\"line\">\t&lt;&#x2F;exclusions&gt;</span><br><span class=\"line\">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>\n\n<p>再次启动项目，发现再也没有烦人的SLF4J警告啦，完美解决问题。</p>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li>问题：SpringBoot中启动时发生<strong>SLF4J: Class path contains multiple SLF4J bindings</strong>警告</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SLF4J: Class path contains multiple SLF4J bindings.</span><br><span class=\"line\">SLF4J: Found binding in [jar:file:/D:/MavenRepository/ch/qos/logback/logback-classic/<span class=\"number\">1.1</span>.<span class=\"number\">11</span>/logback-classic-<span class=\"number\">1.1</span>.<span class=\"number\">11.</span>jar!/org/slf4j/impl/StaticLoggerBinder.class]</span><br><span class=\"line\">SLF4J: Found binding in [jar:file:/D:/MavenRepository/org/slf4j/slf4j-log4j12/<span class=\"number\">1.7</span>.<span class=\"number\">25</span>/slf4j-log4j12-<span class=\"number\">1.7</span>.<span class=\"number\">25.</span>jar!/org/slf4j/impl/StaticLoggerBinder.class]</span><br><span class=\"line\">SLF4J: See http:<span class=\"comment\">//www.slf4j.org/codes.html#multiple_bindings for an explanation.</span></span><br><span class=\"line\">SLF4J: Actual binding is of type [ch.qos.logback.classic.util.ContextSelectorStaticBinder]</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>影响：这个警告不仅会在本地启动项目时发生，部署在服务器上也会出现这种情况，目前并没有发现有什么影响，但是作为一个有洁癖的程序猿，肯定不能容忍每次启动项目都是一大堆警告，所以需要对这个问题进行研究并把警告去除掉。</p>\n</li>\n<li><p>解析：上面的意思是说在类路径下包含多个SLF4J绑定，并且<code>logback-classic-1.1.11.jar</code>这个包和<code>slf4j-log4j12-1.7.25.jar</code>这个包，在<code>/org/slf4j/impl/StaticLoggerBinder.class</code>这个类身上发生了冲突。</p>\n</li>\n<li><p>原因：通过网上查阅资料，了解到发生这个错误的原因，首先logback 日志的开发者和log4j 的开发者据说是一波人，而springboot 默认日志是较新的logback 日志。但是在以前流行的日志却是log4j ，而且很多的第三方工具都默认含有log4j 的引入。而我们在项目开发中，难免会引入各种各样的工具包，所以，基本上springboot 项目，如果不注意，肯定会出现这种冲突的，这样势必会导致SLF4J发生多个绑定的警告。(参考 <a href=\"https://blog.csdn.net/wohaqiyi/article/details/81009689\">https://blog.csdn.net/wohaqiyi/article/details/81009689</a> )</p>\n</li>\n<li><p>验证：通过使用<code>mvn dependency:tree </code>命令来进行排查。发现springboot默认引入了logback日志，而前不久加进项目中的zookeeper依赖默认引入了log4j日志，从而导致SLF4J绑定冲突。</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[INFO] +- org.springframework.boot:spring-boot-starter-mail:jar:<span class=\"number\">1.5</span>.<span class=\"number\">16.</span>RELEASE:compile</span><br><span class=\"line\">[INFO] |  +- org.springframework.boot:spring-boot-starter:jar:<span class=\"number\">1.5</span>.<span class=\"number\">16.</span>RELEASE:compile</span><br><span class=\"line\">[INFO] |  |  +- org.springframework.boot:spring-boot:jar:<span class=\"number\">1.5</span>.<span class=\"number\">16.</span>RELEASE:compile</span><br><span class=\"line\">[INFO] |  |  +- org.springframework.boot:spring-boot-starter-logging:jar:<span class=\"number\">1.5</span>.<span class=\"number\">16.</span>RELEASE:compile</span><br><span class=\"line\">[INFO] |  |  |  +- ch.qos.logback:logback-classic:jar:<span class=\"number\">1.1</span>.<span class=\"number\">11</span>:compile</span><br><span class=\"line\">[INFO] |  |  |  |  \\- ch.qos.logback:logback-core:jar:<span class=\"number\">1.1</span>.<span class=\"number\">11</span>:compile</span><br><span class=\"line\"></span><br><span class=\"line\">[INFO] +- org.apache.zookeeper:zookeeper:jar:<span class=\"number\">3.5</span>.<span class=\"number\">4</span>-beta:compile</span><br><span class=\"line\">[INFO] |  +- org.slf4j:slf4j-api:jar:<span class=\"number\">1.7</span>.<span class=\"number\">25</span>:compile</span><br><span class=\"line\">[INFO] |  +- org.slf4j:slf4j-log4j12:jar:<span class=\"number\">1.7</span>.<span class=\"number\">25</span>:compile</span><br><span class=\"line\">[INFO] |  +- commons-cli:commons-cli:jar:<span class=\"number\">1.2</span>:compile</span><br><span class=\"line\">[INFO] |  +- log4j:log4j:jar:<span class=\"number\">1.2</span>.<span class=\"number\">17</span>:compile</span><br><span class=\"line\">[INFO] |  +- org.apache.yetus:audience-annotations:jar:<span class=\"number\">0.5</span>.<span class=\"number\">0</span>:compile</span><br><span class=\"line\">[INFO] |  \\- io.netty:netty:jar:<span class=\"number\">3.10</span>.<span class=\"number\">6.F</span>inal:compile</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>解决：把上面冲突的其中一个jar包排除掉即可，很显然我选择排除zookeeper。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">\t&lt;groupId&gt;org.apache.zookeeper&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">\t&lt;artifactId&gt;zookeeper&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">\t&lt;version&gt;3.5.4-beta&lt;&#x2F;version&gt;</span><br><span class=\"line\">\t&lt;exclusions&gt;</span><br><span class=\"line\">\t\t&lt;exclusion&gt;</span><br><span class=\"line\">\t\t\t&lt;groupId&gt;org.slf4j&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">\t\t\t&lt;artifactId&gt;slf4j-log4j12&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">\t\t&lt;&#x2F;exclusion&gt;</span><br><span class=\"line\">\t&lt;&#x2F;exclusions&gt;</span><br><span class=\"line\">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>\n\n<p>再次启动项目，发现再也没有烦人的SLF4J警告啦，完美解决问题。</p>\n"},{"title":"Linux基本操作命令","date":"2019-10-19T06:30:09.000Z","_content":"\n##### 常用的grep 查找方式\n\n1. **单个文件搜索**\n   grep 字符串 a.log\n\n2. **多个文件搜索**\n   grep 字符串 *.log\n\n3. **上下文多少行** \n   -C n 前后 多少行，  -A n  之后n行， -B n 之前n行\n   grep Exce base.log  -C 20\n   grep Exce base.log  -A 20\n   grep Exce base.log  -B 20\n\n4. **管道，在上个结果的基础上继续搜索  =  and 条件**\n   grep 字符串 *.log  | grep 第二个条件\n\n5. **或条件**\n\n   grep -E '广点通|今日头条' base.log ","source":"_posts/Linux基本操作命令.md","raw":"---\ntitle: Linux基本操作命令\ndate: 2019-10-19 14:30:09\ntags:\ncategories:\n- linux\n---\n\n##### 常用的grep 查找方式\n\n1. **单个文件搜索**\n   grep 字符串 a.log\n\n2. **多个文件搜索**\n   grep 字符串 *.log\n\n3. **上下文多少行** \n   -C n 前后 多少行，  -A n  之后n行， -B n 之前n行\n   grep Exce base.log  -C 20\n   grep Exce base.log  -A 20\n   grep Exce base.log  -B 20\n\n4. **管道，在上个结果的基础上继续搜索  =  and 条件**\n   grep 字符串 *.log  | grep 第二个条件\n\n5. **或条件**\n\n   grep -E '广点通|今日头条' base.log ","slug":"Linux基本操作命令","published":1,"updated":"2020-08-23T11:42:34.598Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cke72eefr0008dfse3zdohk57","content":"<h5 id=\"常用的grep-查找方式\"><a href=\"#常用的grep-查找方式\" class=\"headerlink\" title=\"常用的grep 查找方式\"></a>常用的grep 查找方式</h5><ol>\n<li><p><strong>单个文件搜索</strong><br>grep 字符串 a.log</p>\n</li>\n<li><p><strong>多个文件搜索</strong><br>grep 字符串 *.log</p>\n</li>\n<li><p><strong>上下文多少行</strong><br>-C n 前后 多少行，  -A n  之后n行， -B n 之前n行<br>grep Exce base.log  -C 20<br>grep Exce base.log  -A 20<br>grep Exce base.log  -B 20</p>\n</li>\n<li><p><strong>管道，在上个结果的基础上继续搜索  =  and 条件</strong><br>grep 字符串 *.log  | grep 第二个条件</p>\n</li>\n<li><p><strong>或条件</strong></p>\n<p>grep -E ‘广点通|今日头条’ base.log </p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h5 id=\"常用的grep-查找方式\"><a href=\"#常用的grep-查找方式\" class=\"headerlink\" title=\"常用的grep 查找方式\"></a>常用的grep 查找方式</h5><ol>\n<li><p><strong>单个文件搜索</strong><br>grep 字符串 a.log</p>\n</li>\n<li><p><strong>多个文件搜索</strong><br>grep 字符串 *.log</p>\n</li>\n<li><p><strong>上下文多少行</strong><br>-C n 前后 多少行，  -A n  之后n行， -B n 之前n行<br>grep Exce base.log  -C 20<br>grep Exce base.log  -A 20<br>grep Exce base.log  -B 20</p>\n</li>\n<li><p><strong>管道，在上个结果的基础上继续搜索  =  and 条件</strong><br>grep 字符串 *.log  | grep 第二个条件</p>\n</li>\n<li><p><strong>或条件</strong></p>\n<p>grep -E ‘广点通|今日头条’ base.log </p>\n</li>\n</ol>\n"},{"title":"SpringBoot项目启动时@Mapper注解相关警告","date":"2019-09-08T19:26:59.000Z","draft":true,"_content":"\n```\n2019-08-27 15:27:27 | WARN  | main | org.mybatis.spring.mapper.ClassPathMapperScanner | Skipping MapperFactoryBean with name 'Xxx1Mapper' and 'com.demo.finance.mapper.Xxx1Mapper' mapperInterface. Bean already defined with the same name!\n2019-08-27 15:27:27 | WARN  | main | org.mybatis.spring.mapper.ClassPathMapperScanner | Skipping MapperFactoryBean with name 'YyMapper' and 'com.demo.finance.mapper.YyMapper' mapperInterface. Bean already defined with the same name!\n2019-08-27 15:27:27 | WARN  | main | org.mybatis.spring.mapper.ClassPathMapperScanner | Skipping MapperFactoryBean with name 'ZzMapper' and 'com.demo.finance.mapper.ZzMapper' mapperInterface. Bean already defined with the same name!\n2019-08-27 15:27:27 | WARN  | main | org.mybatis.spring.mapper.ClassPathMapperScanner | Skipping MapperFactoryBean with name 'AaMapper' and 'com.demo.finance.mapper.AaMapper' mapperInterface. Bean already defined with the same name!\n2019-08-27 15:27:27 | WARN  | main | org.mybatis.spring.mapper.ClassPathMapperScanner | Skipping MapperFactoryBean with name 'BbMapper' and 'com.demo.finance.mapper.BbMapper' mapperInterface. Bean already defined with the same name!\n2019-08-27 15:27:27 | WARN  | main | org.mybatis.spring.mapper.ClassPathMapperScanner | Skipping MapperFactoryBean with name 'CcMapper' and 'com.demo.finance.mapper.CcMapper' mapperInterface. Bean already defined with the same name!\n```\n项目启动时，控制台打印上述日志，原因是在Dao层使用了@Mapper注解，同时在启动类上添加了@MapperScane注解。\n#### 解决方案\n1. 只使用@Mapper注解，无需在启动类上开启扫描；\n2. Dao层使用@Repository注解，并在启动类上使用@MapperScane(\"mapper目录\")进行扫描","source":"_posts/SpringBoot项目启动时@Mapper注解相关警告.md","raw":"---\ntitle: \"SpringBoot项目启动时@Mapper注解相关警告\"\ndate: 2019-09-09T11:26:59+08:00\ndraft: true\ncategories:\n- Spring\n---\n\n```\n2019-08-27 15:27:27 | WARN  | main | org.mybatis.spring.mapper.ClassPathMapperScanner | Skipping MapperFactoryBean with name 'Xxx1Mapper' and 'com.demo.finance.mapper.Xxx1Mapper' mapperInterface. Bean already defined with the same name!\n2019-08-27 15:27:27 | WARN  | main | org.mybatis.spring.mapper.ClassPathMapperScanner | Skipping MapperFactoryBean with name 'YyMapper' and 'com.demo.finance.mapper.YyMapper' mapperInterface. Bean already defined with the same name!\n2019-08-27 15:27:27 | WARN  | main | org.mybatis.spring.mapper.ClassPathMapperScanner | Skipping MapperFactoryBean with name 'ZzMapper' and 'com.demo.finance.mapper.ZzMapper' mapperInterface. Bean already defined with the same name!\n2019-08-27 15:27:27 | WARN  | main | org.mybatis.spring.mapper.ClassPathMapperScanner | Skipping MapperFactoryBean with name 'AaMapper' and 'com.demo.finance.mapper.AaMapper' mapperInterface. Bean already defined with the same name!\n2019-08-27 15:27:27 | WARN  | main | org.mybatis.spring.mapper.ClassPathMapperScanner | Skipping MapperFactoryBean with name 'BbMapper' and 'com.demo.finance.mapper.BbMapper' mapperInterface. Bean already defined with the same name!\n2019-08-27 15:27:27 | WARN  | main | org.mybatis.spring.mapper.ClassPathMapperScanner | Skipping MapperFactoryBean with name 'CcMapper' and 'com.demo.finance.mapper.CcMapper' mapperInterface. Bean already defined with the same name!\n```\n项目启动时，控制台打印上述日志，原因是在Dao层使用了@Mapper注解，同时在启动类上添加了@MapperScane注解。\n#### 解决方案\n1. 只使用@Mapper注解，无需在启动类上开启扫描；\n2. Dao层使用@Repository注解，并在启动类上使用@MapperScane(\"mapper目录\")进行扫描","slug":"SpringBoot项目启动时@Mapper注解相关警告","published":1,"updated":"2020-08-23T11:47:15.732Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cke72eefs0009dfse13l017zr","content":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2019-08-27 15:27:27 | WARN  | main | org.mybatis.spring.mapper.ClassPathMapperScanner | Skipping MapperFactoryBean with name &#39;Xxx1Mapper&#39; and &#39;com.demo.finance.mapper.Xxx1Mapper&#39; mapperInterface. Bean already defined with the same name!</span><br><span class=\"line\">2019-08-27 15:27:27 | WARN  | main | org.mybatis.spring.mapper.ClassPathMapperScanner | Skipping MapperFactoryBean with name &#39;YyMapper&#39; and &#39;com.demo.finance.mapper.YyMapper&#39; mapperInterface. Bean already defined with the same name!</span><br><span class=\"line\">2019-08-27 15:27:27 | WARN  | main | org.mybatis.spring.mapper.ClassPathMapperScanner | Skipping MapperFactoryBean with name &#39;ZzMapper&#39; and &#39;com.demo.finance.mapper.ZzMapper&#39; mapperInterface. Bean already defined with the same name!</span><br><span class=\"line\">2019-08-27 15:27:27 | WARN  | main | org.mybatis.spring.mapper.ClassPathMapperScanner | Skipping MapperFactoryBean with name &#39;AaMapper&#39; and &#39;com.demo.finance.mapper.AaMapper&#39; mapperInterface. Bean already defined with the same name!</span><br><span class=\"line\">2019-08-27 15:27:27 | WARN  | main | org.mybatis.spring.mapper.ClassPathMapperScanner | Skipping MapperFactoryBean with name &#39;BbMapper&#39; and &#39;com.demo.finance.mapper.BbMapper&#39; mapperInterface. Bean already defined with the same name!</span><br><span class=\"line\">2019-08-27 15:27:27 | WARN  | main | org.mybatis.spring.mapper.ClassPathMapperScanner | Skipping MapperFactoryBean with name &#39;CcMapper&#39; and &#39;com.demo.finance.mapper.CcMapper&#39; mapperInterface. Bean already defined with the same name!</span><br></pre></td></tr></table></figure>\n<p>项目启动时，控制台打印上述日志，原因是在Dao层使用了@Mapper注解，同时在启动类上添加了@MapperScane注解。</p>\n<h4 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h4><ol>\n<li>只使用@Mapper注解，无需在启动类上开启扫描；</li>\n<li>Dao层使用@Repository注解，并在启动类上使用@MapperScane(“mapper目录”)进行扫描</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2019-08-27 15:27:27 | WARN  | main | org.mybatis.spring.mapper.ClassPathMapperScanner | Skipping MapperFactoryBean with name &#39;Xxx1Mapper&#39; and &#39;com.demo.finance.mapper.Xxx1Mapper&#39; mapperInterface. Bean already defined with the same name!</span><br><span class=\"line\">2019-08-27 15:27:27 | WARN  | main | org.mybatis.spring.mapper.ClassPathMapperScanner | Skipping MapperFactoryBean with name &#39;YyMapper&#39; and &#39;com.demo.finance.mapper.YyMapper&#39; mapperInterface. Bean already defined with the same name!</span><br><span class=\"line\">2019-08-27 15:27:27 | WARN  | main | org.mybatis.spring.mapper.ClassPathMapperScanner | Skipping MapperFactoryBean with name &#39;ZzMapper&#39; and &#39;com.demo.finance.mapper.ZzMapper&#39; mapperInterface. Bean already defined with the same name!</span><br><span class=\"line\">2019-08-27 15:27:27 | WARN  | main | org.mybatis.spring.mapper.ClassPathMapperScanner | Skipping MapperFactoryBean with name &#39;AaMapper&#39; and &#39;com.demo.finance.mapper.AaMapper&#39; mapperInterface. Bean already defined with the same name!</span><br><span class=\"line\">2019-08-27 15:27:27 | WARN  | main | org.mybatis.spring.mapper.ClassPathMapperScanner | Skipping MapperFactoryBean with name &#39;BbMapper&#39; and &#39;com.demo.finance.mapper.BbMapper&#39; mapperInterface. Bean already defined with the same name!</span><br><span class=\"line\">2019-08-27 15:27:27 | WARN  | main | org.mybatis.spring.mapper.ClassPathMapperScanner | Skipping MapperFactoryBean with name &#39;CcMapper&#39; and &#39;com.demo.finance.mapper.CcMapper&#39; mapperInterface. Bean already defined with the same name!</span><br></pre></td></tr></table></figure>\n<p>项目启动时，控制台打印上述日志，原因是在Dao层使用了@Mapper注解，同时在启动类上添加了@MapperScane注解。</p>\n<h4 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h4><ol>\n<li>只使用@Mapper注解，无需在启动类上开启扫描；</li>\n<li>Dao层使用@Repository注解，并在启动类上使用@MapperScane(“mapper目录”)进行扫描</li>\n</ol>\n"},{"title":"SpringCloud中不同模块间调用传参问题","date":"2019-09-08T19:26:00.000Z","draft":true,"_content":"\n不同模块间调用时，通过Feign客户端组件调用其他服务，出现参数传过去后变成null的问题。注意如下：\n\n**1. 尽量使用@PostMapping注解，而不是@RequestMapping(value = \"url\",method = RequestMethod.POST)**\n\n**2. 使用@RequestParam注解时必须要在后面加上参数名**\n\n**3. Controller层互相调用不要忘记@RequestBody注解**\n\n**4. 接口和实现类都需要加@RequestBody**\n\n**5. 如果使用@RequestParam注解，只需要在接口处添加，不要在实现类上添加该注解**\n\n","source":"_posts/SpringCloud中不同模块间调用传参问题.md","raw":"---\ntitle: \"SpringCloud中不同模块间调用传参问题\"\ndate: 2019-09-09T11:26:00+08:00\ndraft: true\ncategories:\n- Spring\n---\n\n不同模块间调用时，通过Feign客户端组件调用其他服务，出现参数传过去后变成null的问题。注意如下：\n\n**1. 尽量使用@PostMapping注解，而不是@RequestMapping(value = \"url\",method = RequestMethod.POST)**\n\n**2. 使用@RequestParam注解时必须要在后面加上参数名**\n\n**3. Controller层互相调用不要忘记@RequestBody注解**\n\n**4. 接口和实现类都需要加@RequestBody**\n\n**5. 如果使用@RequestParam注解，只需要在接口处添加，不要在实现类上添加该注解**\n\n","slug":"SpringCloud中不同模块间调用传参问题","published":1,"updated":"2020-08-23T11:47:19.689Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cke72eefu000cdfsehizbhp9z","content":"<p>不同模块间调用时，通过Feign客户端组件调用其他服务，出现参数传过去后变成null的问题。注意如下：</p>\n<p><strong>1. 尽量使用@PostMapping注解，而不是@RequestMapping(value = “url”,method = RequestMethod.POST)</strong></p>\n<p><strong>2. 使用@RequestParam注解时必须要在后面加上参数名</strong></p>\n<p><strong>3. Controller层互相调用不要忘记@RequestBody注解</strong></p>\n<p><strong>4. 接口和实现类都需要加@RequestBody</strong></p>\n<p><strong>5. 如果使用@RequestParam注解，只需要在接口处添加，不要在实现类上添加该注解</strong></p>\n","site":{"data":{}},"excerpt":"","more":"<p>不同模块间调用时，通过Feign客户端组件调用其他服务，出现参数传过去后变成null的问题。注意如下：</p>\n<p><strong>1. 尽量使用@PostMapping注解，而不是@RequestMapping(value = “url”,method = RequestMethod.POST)</strong></p>\n<p><strong>2. 使用@RequestParam注解时必须要在后面加上参数名</strong></p>\n<p><strong>3. Controller层互相调用不要忘记@RequestBody注解</strong></p>\n<p><strong>4. 接口和实现类都需要加@RequestBody</strong></p>\n<p><strong>5. 如果使用@RequestParam注解，只需要在接口处添加，不要在实现类上添加该注解</strong></p>\n"},{"title":"SpringCloud中其他模块事务能否回滚","date":"2019-09-08T19:20:30.000Z","draft":true,"_content":"\n在处理业务逻辑时，遇到异常回滚数据库操作是非常常见的，但是，在SpringCloud的项目中，如果遇到业务抛异常需要回滚调用的其他模块数据库操作，能否有效呢？<br>\n**1. 使用@Transactional注解在方法上**\n<br>\n发现无法回滚，可以回滚本地自己模块的操作，但无法回滚调用的其他模块的数据库操作。\n<br>\n**2. 使用手动事务**\n<br>\n手动设置回滚点在需要回滚的操作之前，抛异常后手动回滚事务。<br>\n\n```\n//设置回滚点\nObject savePoint = TransactionAspectSupport.currentTransactionStatus().createSavepoint(); \n//数据库代码\n/*\n    代码~~~\n*/\n//手动回滚\nTransactionAspectSupport.currentTransactionStatus().rollbackToSavepoint(savePoint);\n```\n根据最终结果发现，这种方式也是无效的。\n<br><br>\n#### 结论\nSpringCloud模块中，每个模块对于自己模块的事务管理都是独立的，调用其他模块的服务，想要在本地通过回滚的方式回滚数据库操作是不现实的，所以，需要在代码设计之初就要考虑到这种情况，根据某些确定的条件之后再去做数据库操作，如果确实需要根据结果做回滚操作，可以再将数据update回去或者delete掉。也可以采用分布式事务框架。","source":"_posts/SpringCloud中其他模块事务能否回滚.md","raw":"---\ntitle: \"SpringCloud中其他模块事务能否回滚\"\ndate: 2019-09-09T11:20:30+08:00\ndraft: true\ncategories:\n- Spring\n---\n\n在处理业务逻辑时，遇到异常回滚数据库操作是非常常见的，但是，在SpringCloud的项目中，如果遇到业务抛异常需要回滚调用的其他模块数据库操作，能否有效呢？<br>\n**1. 使用@Transactional注解在方法上**\n<br>\n发现无法回滚，可以回滚本地自己模块的操作，但无法回滚调用的其他模块的数据库操作。\n<br>\n**2. 使用手动事务**\n<br>\n手动设置回滚点在需要回滚的操作之前，抛异常后手动回滚事务。<br>\n\n```\n//设置回滚点\nObject savePoint = TransactionAspectSupport.currentTransactionStatus().createSavepoint(); \n//数据库代码\n/*\n    代码~~~\n*/\n//手动回滚\nTransactionAspectSupport.currentTransactionStatus().rollbackToSavepoint(savePoint);\n```\n根据最终结果发现，这种方式也是无效的。\n<br><br>\n#### 结论\nSpringCloud模块中，每个模块对于自己模块的事务管理都是独立的，调用其他模块的服务，想要在本地通过回滚的方式回滚数据库操作是不现实的，所以，需要在代码设计之初就要考虑到这种情况，根据某些确定的条件之后再去做数据库操作，如果确实需要根据结果做回滚操作，可以再将数据update回去或者delete掉。也可以采用分布式事务框架。","slug":"SpringCloud中其他模块事务能否回滚","published":1,"updated":"2020-08-23T11:47:23.534Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cke72eefv000edfsebk97drcy","content":"<p>在处理业务逻辑时，遇到异常回滚数据库操作是非常常见的，但是，在SpringCloud的项目中，如果遇到业务抛异常需要回滚调用的其他模块数据库操作，能否有效呢？<br><br><strong>1. 使用@Transactional注解在方法上</strong><br><br><br>发现无法回滚，可以回滚本地自己模块的操作，但无法回滚调用的其他模块的数据库操作。<br><br><br><strong>2. 使用手动事务</strong><br><br><br>手动设置回滚点在需要回滚的操作之前，抛异常后手动回滚事务。<br></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;设置回滚点</span><br><span class=\"line\">Object savePoint &#x3D; TransactionAspectSupport.currentTransactionStatus().createSavepoint(); </span><br><span class=\"line\">&#x2F;&#x2F;数据库代码</span><br><span class=\"line\">&#x2F;*</span><br><span class=\"line\">    代码~~~</span><br><span class=\"line\">*&#x2F;</span><br><span class=\"line\">&#x2F;&#x2F;手动回滚</span><br><span class=\"line\">TransactionAspectSupport.currentTransactionStatus().rollbackToSavepoint(savePoint);</span><br></pre></td></tr></table></figure>\n<p>根据最终结果发现，这种方式也是无效的。<br><br><br></p>\n<h4 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h4><p>SpringCloud模块中，每个模块对于自己模块的事务管理都是独立的，调用其他模块的服务，想要在本地通过回滚的方式回滚数据库操作是不现实的，所以，需要在代码设计之初就要考虑到这种情况，根据某些确定的条件之后再去做数据库操作，如果确实需要根据结果做回滚操作，可以再将数据update回去或者delete掉。也可以采用分布式事务框架。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>在处理业务逻辑时，遇到异常回滚数据库操作是非常常见的，但是，在SpringCloud的项目中，如果遇到业务抛异常需要回滚调用的其他模块数据库操作，能否有效呢？<br><br><strong>1. 使用@Transactional注解在方法上</strong><br><br><br>发现无法回滚，可以回滚本地自己模块的操作，但无法回滚调用的其他模块的数据库操作。<br><br><br><strong>2. 使用手动事务</strong><br><br><br>手动设置回滚点在需要回滚的操作之前，抛异常后手动回滚事务。<br></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;设置回滚点</span><br><span class=\"line\">Object savePoint &#x3D; TransactionAspectSupport.currentTransactionStatus().createSavepoint(); </span><br><span class=\"line\">&#x2F;&#x2F;数据库代码</span><br><span class=\"line\">&#x2F;*</span><br><span class=\"line\">    代码~~~</span><br><span class=\"line\">*&#x2F;</span><br><span class=\"line\">&#x2F;&#x2F;手动回滚</span><br><span class=\"line\">TransactionAspectSupport.currentTransactionStatus().rollbackToSavepoint(savePoint);</span><br></pre></td></tr></table></figure>\n<p>根据最终结果发现，这种方式也是无效的。<br><br><br></p>\n<h4 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h4><p>SpringCloud模块中，每个模块对于自己模块的事务管理都是独立的，调用其他模块的服务，想要在本地通过回滚的方式回滚数据库操作是不现实的，所以，需要在代码设计之初就要考虑到这种情况，根据某些确定的条件之后再去做数据库操作，如果确实需要根据结果做回滚操作，可以再将数据update回去或者delete掉。也可以采用分布式事务框架。</p>\n"},{"title":"Git新建一个分支","date":"2019-09-04T00:12:53.000Z","draft":true,"_content":"\n参考：[https://www.cnblogs.com/kaerxifa/p/11045573.html](https://www.cnblogs.com/kaerxifa/p/11045573.html)\n\n1. 进入本地git仓库目录，使用git branch指令，发现只有master分支\n\n   ```shell\n   git branch\n   * master\n   ```\n\n2. 使用git branch 分支名来创建分支，创建完成后再次使用git branch查看，发现本地已经多出了一个新建的分支。\n\n   ```shell\n   输入：git branch 201909\n   输入：git branch\n   输出：201909\n       *master \n   ```\n\n3. 此时远程仓库并没有这个分支，我们需要使用git push origin 分支名 命令将本地修改推送到远程服务器上。\n\n   ```shell\n   输入：git push origin 201909\n   ```\n\n   \n\n4. push完成后就可以在远程服务上看到新建的分支了（原本是1 branches）。\n\n   ```shell\n   2 branchches\n   ```\n\n","source":"_posts/git新建一个分支.md","raw":"---\ntitle: \"Git新建一个分支\"\ndate: 2019-09-04T16:12:53+08:00\ndraft: true\ncategories:\n- 工具\n---\n\n参考：[https://www.cnblogs.com/kaerxifa/p/11045573.html](https://www.cnblogs.com/kaerxifa/p/11045573.html)\n\n1. 进入本地git仓库目录，使用git branch指令，发现只有master分支\n\n   ```shell\n   git branch\n   * master\n   ```\n\n2. 使用git branch 分支名来创建分支，创建完成后再次使用git branch查看，发现本地已经多出了一个新建的分支。\n\n   ```shell\n   输入：git branch 201909\n   输入：git branch\n   输出：201909\n       *master \n   ```\n\n3. 此时远程仓库并没有这个分支，我们需要使用git push origin 分支名 命令将本地修改推送到远程服务器上。\n\n   ```shell\n   输入：git push origin 201909\n   ```\n\n   \n\n4. push完成后就可以在远程服务上看到新建的分支了（原本是1 branches）。\n\n   ```shell\n   2 branchches\n   ```\n\n","slug":"git新建一个分支","published":1,"updated":"2020-08-23T11:42:07.671Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cke72eefw000hdfsebsw05sgx","content":"<p>参考：<a href=\"https://www.cnblogs.com/kaerxifa/p/11045573.html\">https://www.cnblogs.com/kaerxifa/p/11045573.html</a></p>\n<ol>\n<li><p>进入本地git仓库目录，使用git branch指令，发现只有master分支</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch</span><br><span class=\"line\">* master</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用git branch 分支名来创建分支，创建完成后再次使用git branch查看，发现本地已经多出了一个新建的分支。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：git branch 201909</span><br><span class=\"line\">输入：git branch</span><br><span class=\"line\">输出：201909</span><br><span class=\"line\">    *master </span><br></pre></td></tr></table></figure>\n</li>\n<li><p>此时远程仓库并没有这个分支，我们需要使用git push origin 分支名 命令将本地修改推送到远程服务器上。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：git push origin 201909</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ol>\n<ol start=\"4\">\n<li><p>push完成后就可以在远程服务上看到新建的分支了（原本是1 branches）。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2 branchches</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>参考：<a href=\"https://www.cnblogs.com/kaerxifa/p/11045573.html\">https://www.cnblogs.com/kaerxifa/p/11045573.html</a></p>\n<ol>\n<li><p>进入本地git仓库目录，使用git branch指令，发现只有master分支</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch</span><br><span class=\"line\">* master</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用git branch 分支名来创建分支，创建完成后再次使用git branch查看，发现本地已经多出了一个新建的分支。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：git branch 201909</span><br><span class=\"line\">输入：git branch</span><br><span class=\"line\">输出：201909</span><br><span class=\"line\">    *master </span><br></pre></td></tr></table></figure>\n</li>\n<li><p>此时远程仓库并没有这个分支，我们需要使用git push origin 分支名 命令将本地修改推送到远程服务器上。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：git push origin 201909</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ol>\n<ol start=\"4\">\n<li><p>push完成后就可以在远程服务上看到新建的分支了（原本是1 branches）。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2 branchches</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n"},{"title":"hexo搭建","date":"2019-09-04T18:07:01.000Z","draft":true,"_content":"\n#### 1.安装依赖环境<br>\n- 需要提前安装git，并拥有一个github账号。\n- 安装Nodejs,npm\n- node -v #查看node版本\n- npm -v #查看npm版本\n- npm install -g cnpm -- registry=http://registry.npm.taobao.org #安装淘宝的cnpm 管理器\n- cnpm -v #查看cnpm版本\n- cnpm install -g hexo-cli #安装hexo框架\n- hexo -v #查看hexo版本\n---\n#### 2.安装本地博客<br>\n- mkdir blog #创建blog目录\n- cd blog #进入blog目录\n- sudo hexo init #生成博客 初始化博客\n- hexo s #启动本地博客服务\nhttp://localhost:4000/ #本地访问地址\n- hexo n \"我的第一篇文章\" #创建新的文章\n\n#### 3.发布到github<br>\n- 返回blog目录\n- hexo clean #清理\n- hexo g #生成\n- #Github创建一个新的仓库 YourGithubName.github.io\n- cnpm install --save hexo-deployer-git #在blog目录下安装git部署插件\n- 配置_config.yml\n- Deployment\n- Docs: https://hexo.io/docs/deployment.html\n\n- 内容\n```java\ndeploy:\n  type: git\n  repo: https://github.com/YourGithubName/YourGithubName.github.io.git\n  branch: master\n```\n- hexo d #部署到Github仓库里\n- https://YourGithubName.github.io/ #访问这个地址可以查看博客\n\n#### 4.个性化主题<br>\n\n- git clone https://github.com/litten/hexo-theme-yilia.git themes/yilia #下载yilia主题到本地\n- 修改hexo根目录下的 _config.yml 文件 ： theme: yilia\n\n#### 5. 每次重新发布<br>\n\n- hexo c #清理一下\n- hexo g #生成\n- hexo d #部署到远程Github仓库\n- https://YourGithubName.github.io/ #查看博客\n\n\n\n","source":"_posts/hexo搭建.md","raw":"---\ntitle: \"hexo搭建\"\ndate: 2019-09-05T10:07:01+08:00\ndraft: true\ncategories:\n- 工具\n---\n\n#### 1.安装依赖环境<br>\n- 需要提前安装git，并拥有一个github账号。\n- 安装Nodejs,npm\n- node -v #查看node版本\n- npm -v #查看npm版本\n- npm install -g cnpm -- registry=http://registry.npm.taobao.org #安装淘宝的cnpm 管理器\n- cnpm -v #查看cnpm版本\n- cnpm install -g hexo-cli #安装hexo框架\n- hexo -v #查看hexo版本\n---\n#### 2.安装本地博客<br>\n- mkdir blog #创建blog目录\n- cd blog #进入blog目录\n- sudo hexo init #生成博客 初始化博客\n- hexo s #启动本地博客服务\nhttp://localhost:4000/ #本地访问地址\n- hexo n \"我的第一篇文章\" #创建新的文章\n\n#### 3.发布到github<br>\n- 返回blog目录\n- hexo clean #清理\n- hexo g #生成\n- #Github创建一个新的仓库 YourGithubName.github.io\n- cnpm install --save hexo-deployer-git #在blog目录下安装git部署插件\n- 配置_config.yml\n- Deployment\n- Docs: https://hexo.io/docs/deployment.html\n\n- 内容\n```java\ndeploy:\n  type: git\n  repo: https://github.com/YourGithubName/YourGithubName.github.io.git\n  branch: master\n```\n- hexo d #部署到Github仓库里\n- https://YourGithubName.github.io/ #访问这个地址可以查看博客\n\n#### 4.个性化主题<br>\n\n- git clone https://github.com/litten/hexo-theme-yilia.git themes/yilia #下载yilia主题到本地\n- 修改hexo根目录下的 _config.yml 文件 ： theme: yilia\n\n#### 5. 每次重新发布<br>\n\n- hexo c #清理一下\n- hexo g #生成\n- hexo d #部署到远程Github仓库\n- https://YourGithubName.github.io/ #查看博客\n\n\n\n","slug":"hexo搭建","published":1,"updated":"2020-08-23T12:18:29.384Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cke72eefx000idfsefqsma5nx","content":"<h4 id=\"1-安装依赖环境\"><a href=\"#1-安装依赖环境\" class=\"headerlink\" title=\"1.安装依赖环境\"></a>1.安装依赖环境<br></h4><ul>\n<li>需要提前安装git，并拥有一个github账号。</li>\n<li>安装Nodejs,npm</li>\n<li>node -v #查看node版本</li>\n<li>npm -v #查看npm版本</li>\n<li>npm install -g cnpm – registry=<a href=\"http://registry.npm.taobao.org/\">http://registry.npm.taobao.org</a> #安装淘宝的cnpm 管理器</li>\n<li>cnpm -v #查看cnpm版本</li>\n<li>cnpm install -g hexo-cli #安装hexo框架</li>\n<li>hexo -v #查看hexo版本</li>\n</ul>\n<hr>\n<h4 id=\"2-安装本地博客\"><a href=\"#2-安装本地博客\" class=\"headerlink\" title=\"2.安装本地博客\"></a>2.安装本地博客<br></h4><ul>\n<li>mkdir blog #创建blog目录</li>\n<li>cd blog #进入blog目录</li>\n<li>sudo hexo init #生成博客 初始化博客</li>\n<li>hexo s #启动本地博客服务<br><a href=\"http://localhost:4000/\">http://localhost:4000/</a> #本地访问地址</li>\n<li>hexo n “我的第一篇文章” #创建新的文章</li>\n</ul>\n<h4 id=\"3-发布到github\"><a href=\"#3-发布到github\" class=\"headerlink\" title=\"3.发布到github\"></a>3.发布到github<br></h4><ul>\n<li><p>返回blog目录</p>\n</li>\n<li><p>hexo clean #清理</p>\n</li>\n<li><p>hexo g #生成</p>\n</li>\n<li><p>#Github创建一个新的仓库 YourGithubName.github.io</p>\n</li>\n<li><p>cnpm install –save hexo-deployer-git #在blog目录下安装git部署插件</p>\n</li>\n<li><p>配置_config.yml</p>\n</li>\n<li><p>Deployment</p>\n</li>\n<li><p>Docs: <a href=\"https://hexo.io/docs/deployment.html\">https://hexo.io/docs/deployment.html</a></p>\n</li>\n<li><p>内容</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repo: https:<span class=\"comment\">//github.com/YourGithubName/YourGithubName.github.io.git</span></span><br><span class=\"line\">  branch: master</span><br></pre></td></tr></table></figure></li>\n<li><p>hexo d #部署到Github仓库里</p>\n</li>\n<li><p><a href=\"https://yourgithubname.github.io/\">https://YourGithubName.github.io/</a> #访问这个地址可以查看博客</p>\n</li>\n</ul>\n<h4 id=\"4-个性化主题\"><a href=\"#4-个性化主题\" class=\"headerlink\" title=\"4.个性化主题\"></a>4.个性化主题<br></h4><ul>\n<li>git clone <a href=\"https://github.com/litten/hexo-theme-yilia.git\">https://github.com/litten/hexo-theme-yilia.git</a> themes/yilia #下载yilia主题到本地</li>\n<li>修改hexo根目录下的 _config.yml 文件 ： theme: yilia</li>\n</ul>\n<h4 id=\"5-每次重新发布\"><a href=\"#5-每次重新发布\" class=\"headerlink\" title=\"5. 每次重新发布\"></a>5. 每次重新发布<br></h4><ul>\n<li>hexo c #清理一下</li>\n<li>hexo g #生成</li>\n<li>hexo d #部署到远程Github仓库</li>\n<li><a href=\"https://yourgithubname.github.io/\">https://YourGithubName.github.io/</a> #查看博客</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"1-安装依赖环境\"><a href=\"#1-安装依赖环境\" class=\"headerlink\" title=\"1.安装依赖环境\"></a>1.安装依赖环境<br></h4><ul>\n<li>需要提前安装git，并拥有一个github账号。</li>\n<li>安装Nodejs,npm</li>\n<li>node -v #查看node版本</li>\n<li>npm -v #查看npm版本</li>\n<li>npm install -g cnpm – registry=<a href=\"http://registry.npm.taobao.org/\">http://registry.npm.taobao.org</a> #安装淘宝的cnpm 管理器</li>\n<li>cnpm -v #查看cnpm版本</li>\n<li>cnpm install -g hexo-cli #安装hexo框架</li>\n<li>hexo -v #查看hexo版本</li>\n</ul>\n<hr>\n<h4 id=\"2-安装本地博客\"><a href=\"#2-安装本地博客\" class=\"headerlink\" title=\"2.安装本地博客\"></a>2.安装本地博客<br></h4><ul>\n<li>mkdir blog #创建blog目录</li>\n<li>cd blog #进入blog目录</li>\n<li>sudo hexo init #生成博客 初始化博客</li>\n<li>hexo s #启动本地博客服务<br><a href=\"http://localhost:4000/\">http://localhost:4000/</a> #本地访问地址</li>\n<li>hexo n “我的第一篇文章” #创建新的文章</li>\n</ul>\n<h4 id=\"3-发布到github\"><a href=\"#3-发布到github\" class=\"headerlink\" title=\"3.发布到github\"></a>3.发布到github<br></h4><ul>\n<li><p>返回blog目录</p>\n</li>\n<li><p>hexo clean #清理</p>\n</li>\n<li><p>hexo g #生成</p>\n</li>\n<li><p>#Github创建一个新的仓库 YourGithubName.github.io</p>\n</li>\n<li><p>cnpm install –save hexo-deployer-git #在blog目录下安装git部署插件</p>\n</li>\n<li><p>配置_config.yml</p>\n</li>\n<li><p>Deployment</p>\n</li>\n<li><p>Docs: <a href=\"https://hexo.io/docs/deployment.html\">https://hexo.io/docs/deployment.html</a></p>\n</li>\n<li><p>内容</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repo: https:<span class=\"comment\">//github.com/YourGithubName/YourGithubName.github.io.git</span></span><br><span class=\"line\">  branch: master</span><br></pre></td></tr></table></figure></li>\n<li><p>hexo d #部署到Github仓库里</p>\n</li>\n<li><p><a href=\"https://yourgithubname.github.io/\">https://YourGithubName.github.io/</a> #访问这个地址可以查看博客</p>\n</li>\n</ul>\n<h4 id=\"4-个性化主题\"><a href=\"#4-个性化主题\" class=\"headerlink\" title=\"4.个性化主题\"></a>4.个性化主题<br></h4><ul>\n<li>git clone <a href=\"https://github.com/litten/hexo-theme-yilia.git\">https://github.com/litten/hexo-theme-yilia.git</a> themes/yilia #下载yilia主题到本地</li>\n<li>修改hexo根目录下的 _config.yml 文件 ： theme: yilia</li>\n</ul>\n<h4 id=\"5-每次重新发布\"><a href=\"#5-每次重新发布\" class=\"headerlink\" title=\"5. 每次重新发布\"></a>5. 每次重新发布<br></h4><ul>\n<li>hexo c #清理一下</li>\n<li>hexo g #生成</li>\n<li>hexo d #部署到远程Github仓库</li>\n<li><a href=\"https://yourgithubname.github.io/\">https://YourGithubName.github.io/</a> #查看博客</li>\n</ul>\n"},{"title":"python学习1","date":"2020-04-22T14:50:21.000Z","_content":"\n**变量定义，输入**\n\n```python\nprint(\"zhanglong\")\nprint('*' * 10)\n#---------------------------------------\nprice = 10\nprice = 20\nrating = 2.9\nname = 'zhanglong'\nis_publish = True\nprint(price)\n#---------------------------------------\nname = input('What is your name?\\n')\nprint('Hi, ' + name)\n#---------------------------------------\nbirth_year = input('Birth year: ')\nprint(type(birth_year))\nage = 2020 - int(birth_year)\nprint(type(age))\nint()\nfloat()\nprint(age)\nweight_lbs = input('Weight (lbs): ')\nweight_kg = float(weight_lbs) * 0.45\nprint(weight_kg)\n```\n**字符串，格式化**\n```python\ncourse = \"Python's course\"\nprint(course)\ncourse = 'Python \"course\"'\nprint(course)\nprint(course[0]+'---'+course[-2])\nprint(course[0:3])\nprint(course[1:])\nprint(course[:5])\nprint(course[1:-1])\nemail = ''' \nHi long.\nThank you\n\nI am leaning python\n'''\nprint(email)\n#---------------------------------------\nfirst = 'John'\nlast = 'Smith'\nmessage = first + ' [' + last +'] is a coder'\nprint(message)\nmsg = f'{first} [{last}] is a coder'\nprint(msg)\n```\n\n**字符串API，数学运算**\n```python\ncourse = 'Python for Beginners'\nprint(len(course))\nprint(course.upper())\nprint(course.lower())\nprint(course)\nprint('----------------------------')\n\nprint(course.find('P'))\nprint(course.find('Beg'))\n\nprint('-------------------------------')\n\nprint(course.replace('Beginners', 'Absolute Begginners'))\n\nprint('Python' in course)\n#---------------------------------------\nprint(10 / 3)\nprint(10 // 3)\nprint(10 % 3)\n# 10的3次幂\nprint(10 ** 3)\n#---------------------------------------\nx = 10\nx = x + 3\nx += 3\nprint(x)\n\ny = 10 + 3 * 2 ** 2\nprint(y)\n```\n    ","source":"_posts/python学习1.md","raw":"---\ntitle: python学习1\ndate: 2020-04-22 22:50:21\ntags:\ncategories:\n- python\n---\n\n**变量定义，输入**\n\n```python\nprint(\"zhanglong\")\nprint('*' * 10)\n#---------------------------------------\nprice = 10\nprice = 20\nrating = 2.9\nname = 'zhanglong'\nis_publish = True\nprint(price)\n#---------------------------------------\nname = input('What is your name?\\n')\nprint('Hi, ' + name)\n#---------------------------------------\nbirth_year = input('Birth year: ')\nprint(type(birth_year))\nage = 2020 - int(birth_year)\nprint(type(age))\nint()\nfloat()\nprint(age)\nweight_lbs = input('Weight (lbs): ')\nweight_kg = float(weight_lbs) * 0.45\nprint(weight_kg)\n```\n**字符串，格式化**\n```python\ncourse = \"Python's course\"\nprint(course)\ncourse = 'Python \"course\"'\nprint(course)\nprint(course[0]+'---'+course[-2])\nprint(course[0:3])\nprint(course[1:])\nprint(course[:5])\nprint(course[1:-1])\nemail = ''' \nHi long.\nThank you\n\nI am leaning python\n'''\nprint(email)\n#---------------------------------------\nfirst = 'John'\nlast = 'Smith'\nmessage = first + ' [' + last +'] is a coder'\nprint(message)\nmsg = f'{first} [{last}] is a coder'\nprint(msg)\n```\n\n**字符串API，数学运算**\n```python\ncourse = 'Python for Beginners'\nprint(len(course))\nprint(course.upper())\nprint(course.lower())\nprint(course)\nprint('----------------------------')\n\nprint(course.find('P'))\nprint(course.find('Beg'))\n\nprint('-------------------------------')\n\nprint(course.replace('Beginners', 'Absolute Begginners'))\n\nprint('Python' in course)\n#---------------------------------------\nprint(10 / 3)\nprint(10 // 3)\nprint(10 % 3)\n# 10的3次幂\nprint(10 ** 3)\n#---------------------------------------\nx = 10\nx = x + 3\nx += 3\nprint(x)\n\ny = 10 + 3 * 2 ** 2\nprint(y)\n```\n    ","slug":"python学习1","published":1,"updated":"2020-08-23T12:17:30.965Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cke72eefy000ldfse6ww11288","content":"<p><strong>变量定义，输入</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(<span class=\"string\">&quot;zhanglong&quot;</span>)</span><br><span class=\"line\">print(<span class=\"string\">&#x27;*&#x27;</span> * <span class=\"number\">10</span>)</span><br><span class=\"line\"><span class=\"comment\">#---------------------------------------</span></span><br><span class=\"line\">price = <span class=\"number\">10</span></span><br><span class=\"line\">price = <span class=\"number\">20</span></span><br><span class=\"line\">rating = <span class=\"number\">2.9</span></span><br><span class=\"line\">name = <span class=\"string\">&#x27;zhanglong&#x27;</span></span><br><span class=\"line\">is_publish = <span class=\"literal\">True</span></span><br><span class=\"line\">print(price)</span><br><span class=\"line\"><span class=\"comment\">#---------------------------------------</span></span><br><span class=\"line\">name = input(<span class=\"string\">&#x27;What is your name?\\n&#x27;</span>)</span><br><span class=\"line\">print(<span class=\"string\">&#x27;Hi, &#x27;</span> + name)</span><br><span class=\"line\"><span class=\"comment\">#---------------------------------------</span></span><br><span class=\"line\">birth_year = input(<span class=\"string\">&#x27;Birth year: &#x27;</span>)</span><br><span class=\"line\">print(type(birth_year))</span><br><span class=\"line\">age = <span class=\"number\">2020</span> - int(birth_year)</span><br><span class=\"line\">print(type(age))</span><br><span class=\"line\">int()</span><br><span class=\"line\">float()</span><br><span class=\"line\">print(age)</span><br><span class=\"line\">weight_lbs = input(<span class=\"string\">&#x27;Weight (lbs): &#x27;</span>)</span><br><span class=\"line\">weight_kg = float(weight_lbs) * <span class=\"number\">0.45</span></span><br><span class=\"line\">print(weight_kg)</span><br></pre></td></tr></table></figure>\n<p><strong>字符串，格式化</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">course = <span class=\"string\">&quot;Python&#x27;s course&quot;</span></span><br><span class=\"line\">print(course)</span><br><span class=\"line\">course = <span class=\"string\">&#x27;Python &quot;course&quot;&#x27;</span></span><br><span class=\"line\">print(course)</span><br><span class=\"line\">print(course[<span class=\"number\">0</span>]+<span class=\"string\">&#x27;---&#x27;</span>+course[<span class=\"number\">-2</span>])</span><br><span class=\"line\">print(course[<span class=\"number\">0</span>:<span class=\"number\">3</span>])</span><br><span class=\"line\">print(course[<span class=\"number\">1</span>:])</span><br><span class=\"line\">print(course[:<span class=\"number\">5</span>])</span><br><span class=\"line\">print(course[<span class=\"number\">1</span>:<span class=\"number\">-1</span>])</span><br><span class=\"line\">email = <span class=\"string\">&#x27;&#x27;&#x27; </span></span><br><span class=\"line\"><span class=\"string\">Hi long.</span></span><br><span class=\"line\"><span class=\"string\">Thank you</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">I am leaning python</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">print(email)</span><br><span class=\"line\"><span class=\"comment\">#---------------------------------------</span></span><br><span class=\"line\">first = <span class=\"string\">&#x27;John&#x27;</span></span><br><span class=\"line\">last = <span class=\"string\">&#x27;Smith&#x27;</span></span><br><span class=\"line\">message = first + <span class=\"string\">&#x27; [&#x27;</span> + last +<span class=\"string\">&#x27;] is a coder&#x27;</span></span><br><span class=\"line\">print(message)</span><br><span class=\"line\">msg = <span class=\"string\">f&#x27;<span class=\"subst\">&#123;first&#125;</span> [<span class=\"subst\">&#123;last&#125;</span>] is a coder&#x27;</span></span><br><span class=\"line\">print(msg)</span><br></pre></td></tr></table></figure>\n\n<p><strong>字符串API，数学运算</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">course = <span class=\"string\">&#x27;Python for Beginners&#x27;</span></span><br><span class=\"line\">print(len(course))</span><br><span class=\"line\">print(course.upper())</span><br><span class=\"line\">print(course.lower())</span><br><span class=\"line\">print(course)</span><br><span class=\"line\">print(<span class=\"string\">&#x27;----------------------------&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">print(course.find(<span class=\"string\">&#x27;P&#x27;</span>))</span><br><span class=\"line\">print(course.find(<span class=\"string\">&#x27;Beg&#x27;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">print(<span class=\"string\">&#x27;-------------------------------&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">print(course.replace(<span class=\"string\">&#x27;Beginners&#x27;</span>, <span class=\"string\">&#x27;Absolute Begginners&#x27;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">print(<span class=\"string\">&#x27;Python&#x27;</span> <span class=\"keyword\">in</span> course)</span><br><span class=\"line\"><span class=\"comment\">#---------------------------------------</span></span><br><span class=\"line\">print(<span class=\"number\">10</span> / <span class=\"number\">3</span>)</span><br><span class=\"line\">print(<span class=\"number\">10</span> // <span class=\"number\">3</span>)</span><br><span class=\"line\">print(<span class=\"number\">10</span> % <span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"comment\"># 10的3次幂</span></span><br><span class=\"line\">print(<span class=\"number\">10</span> ** <span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"comment\">#---------------------------------------</span></span><br><span class=\"line\">x = <span class=\"number\">10</span></span><br><span class=\"line\">x = x + <span class=\"number\">3</span></span><br><span class=\"line\">x += <span class=\"number\">3</span></span><br><span class=\"line\">print(x)</span><br><span class=\"line\"></span><br><span class=\"line\">y = <span class=\"number\">10</span> + <span class=\"number\">3</span> * <span class=\"number\">2</span> ** <span class=\"number\">2</span></span><br><span class=\"line\">print(y)</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>变量定义，输入</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(<span class=\"string\">&quot;zhanglong&quot;</span>)</span><br><span class=\"line\">print(<span class=\"string\">&#x27;*&#x27;</span> * <span class=\"number\">10</span>)</span><br><span class=\"line\"><span class=\"comment\">#---------------------------------------</span></span><br><span class=\"line\">price = <span class=\"number\">10</span></span><br><span class=\"line\">price = <span class=\"number\">20</span></span><br><span class=\"line\">rating = <span class=\"number\">2.9</span></span><br><span class=\"line\">name = <span class=\"string\">&#x27;zhanglong&#x27;</span></span><br><span class=\"line\">is_publish = <span class=\"literal\">True</span></span><br><span class=\"line\">print(price)</span><br><span class=\"line\"><span class=\"comment\">#---------------------------------------</span></span><br><span class=\"line\">name = input(<span class=\"string\">&#x27;What is your name?\\n&#x27;</span>)</span><br><span class=\"line\">print(<span class=\"string\">&#x27;Hi, &#x27;</span> + name)</span><br><span class=\"line\"><span class=\"comment\">#---------------------------------------</span></span><br><span class=\"line\">birth_year = input(<span class=\"string\">&#x27;Birth year: &#x27;</span>)</span><br><span class=\"line\">print(type(birth_year))</span><br><span class=\"line\">age = <span class=\"number\">2020</span> - int(birth_year)</span><br><span class=\"line\">print(type(age))</span><br><span class=\"line\">int()</span><br><span class=\"line\">float()</span><br><span class=\"line\">print(age)</span><br><span class=\"line\">weight_lbs = input(<span class=\"string\">&#x27;Weight (lbs): &#x27;</span>)</span><br><span class=\"line\">weight_kg = float(weight_lbs) * <span class=\"number\">0.45</span></span><br><span class=\"line\">print(weight_kg)</span><br></pre></td></tr></table></figure>\n<p><strong>字符串，格式化</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">course = <span class=\"string\">&quot;Python&#x27;s course&quot;</span></span><br><span class=\"line\">print(course)</span><br><span class=\"line\">course = <span class=\"string\">&#x27;Python &quot;course&quot;&#x27;</span></span><br><span class=\"line\">print(course)</span><br><span class=\"line\">print(course[<span class=\"number\">0</span>]+<span class=\"string\">&#x27;---&#x27;</span>+course[<span class=\"number\">-2</span>])</span><br><span class=\"line\">print(course[<span class=\"number\">0</span>:<span class=\"number\">3</span>])</span><br><span class=\"line\">print(course[<span class=\"number\">1</span>:])</span><br><span class=\"line\">print(course[:<span class=\"number\">5</span>])</span><br><span class=\"line\">print(course[<span class=\"number\">1</span>:<span class=\"number\">-1</span>])</span><br><span class=\"line\">email = <span class=\"string\">&#x27;&#x27;&#x27; </span></span><br><span class=\"line\"><span class=\"string\">Hi long.</span></span><br><span class=\"line\"><span class=\"string\">Thank you</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">I am leaning python</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">print(email)</span><br><span class=\"line\"><span class=\"comment\">#---------------------------------------</span></span><br><span class=\"line\">first = <span class=\"string\">&#x27;John&#x27;</span></span><br><span class=\"line\">last = <span class=\"string\">&#x27;Smith&#x27;</span></span><br><span class=\"line\">message = first + <span class=\"string\">&#x27; [&#x27;</span> + last +<span class=\"string\">&#x27;] is a coder&#x27;</span></span><br><span class=\"line\">print(message)</span><br><span class=\"line\">msg = <span class=\"string\">f&#x27;<span class=\"subst\">&#123;first&#125;</span> [<span class=\"subst\">&#123;last&#125;</span>] is a coder&#x27;</span></span><br><span class=\"line\">print(msg)</span><br></pre></td></tr></table></figure>\n\n<p><strong>字符串API，数学运算</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">course = <span class=\"string\">&#x27;Python for Beginners&#x27;</span></span><br><span class=\"line\">print(len(course))</span><br><span class=\"line\">print(course.upper())</span><br><span class=\"line\">print(course.lower())</span><br><span class=\"line\">print(course)</span><br><span class=\"line\">print(<span class=\"string\">&#x27;----------------------------&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">print(course.find(<span class=\"string\">&#x27;P&#x27;</span>))</span><br><span class=\"line\">print(course.find(<span class=\"string\">&#x27;Beg&#x27;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">print(<span class=\"string\">&#x27;-------------------------------&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">print(course.replace(<span class=\"string\">&#x27;Beginners&#x27;</span>, <span class=\"string\">&#x27;Absolute Begginners&#x27;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">print(<span class=\"string\">&#x27;Python&#x27;</span> <span class=\"keyword\">in</span> course)</span><br><span class=\"line\"><span class=\"comment\">#---------------------------------------</span></span><br><span class=\"line\">print(<span class=\"number\">10</span> / <span class=\"number\">3</span>)</span><br><span class=\"line\">print(<span class=\"number\">10</span> // <span class=\"number\">3</span>)</span><br><span class=\"line\">print(<span class=\"number\">10</span> % <span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"comment\"># 10的3次幂</span></span><br><span class=\"line\">print(<span class=\"number\">10</span> ** <span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"comment\">#---------------------------------------</span></span><br><span class=\"line\">x = <span class=\"number\">10</span></span><br><span class=\"line\">x = x + <span class=\"number\">3</span></span><br><span class=\"line\">x += <span class=\"number\">3</span></span><br><span class=\"line\">print(x)</span><br><span class=\"line\"></span><br><span class=\"line\">y = <span class=\"number\">10</span> + <span class=\"number\">3</span> * <span class=\"number\">2</span> ** <span class=\"number\">2</span></span><br><span class=\"line\">print(y)</span><br></pre></td></tr></table></figure>\n"},{"title":"windows系统最简单的Hugo博客搭建","date":"2019-09-03T18:11:02.000Z","draft":true,"_content":"\n#### 1.安装<br>\n- 需要提前安装git，并拥有一个github账号。\n- widows需要在[https://github.com/gohugoio/hugo/releases](https://github.com/gohugoio/hugo/releases)处下载hugo运行需要的二级制码**hugo_0.57.2_Windows-64bit.zip**，并解压配置系统变量。<br>\n在命令行使用如下命令确认是否安装正确：\n\n```\nhugo version\n```\n- 打印如下内容表示安装成功：\n\n```\nHugo Static Site Generator v0.57.2-A849CB2D windows/amd64 BuildDate: 2019-08-17T17:54:13Z\n```\n\n#### 2. 生成站点\n切换至想要创建的目录，运行：\n```\nhugo new site myblog\n```\n打印如下内容表示生成站点成功：\n\n```\nCongratulations! Your new Hugo site is created\n```\n#### 3. 下载主题\n\n```\ncd myblog\ngit clone https://github.com/vaga/hugo-theme-m10c.git themes/m10c\n```\n打印如下内容表示主题下载成功：\n\n```\nCloning into 'themes/m10c'...\nremote: Enumerating objects: 18, done.\nremote: Counting objects: 100% (18/18), done.\nremote: Compressing objects: 100% (17/17), done.\nremote: Total 265 (delta 4), reused 11 (delta 1), pack-reused 247\nReceiving objects:  65% (173/265), 420.01 KiB | 136.00 KiB/s\nReceiving objects: 100% (265/265), 447.54 KiB | 140.00 KiB/s, done.\nResolving deltas: 100% (82/82), done.\n```\n#### 4. 创建文章\n在命令行输入：\n```\nhugo new post/blog.md\n```\n会显示：\n```\nmyblog\\content\\post\\myblog.md created\n```\n创建的文章会自动生成到content目录下，你可以去对应的目录找到刚刚创建的文章，使用markdown编辑器编辑你的博客。\n#### 5. 本地启动\n\n```\nhugo server -t m10c --buildDrafts\n```\n打印如下内容表示本地启动成功：\n\n```\nBuilding sites …\n                   | EN\n+------------------+----+\n  Pages            |  7\n  Paginator pages  |  0\n  Non-page files   |  0\n  Static files     |  1\n  Processed images |  0\n  Aliases          |  3\n  Sitemaps         |  1\n  Cleaned          |  0\n\nTotal in 77 ms\nWatching for changes in D:\\qwwww\\mmmqqq\\{archetypes,content,data,layouts,static,themes}\nWatching for config changes in D:\\qwwww\\mmmqqq\\config.toml\nEnvironment: \"development\"\nServing pages from memory\nRunning in Fast Render Mode. For full rebuilds on change: hugo server --disableFastRender\nWeb Server is available at http://localhost:1313/ (bind address 127.0.0.1)\nPress Ctrl+C to stop\n```\n\n启动后安装提示访问[http://localhost:1313/](http://localhost:1313/)，就可以成功看到你的博客网站啦~\n#### 6. 部署到github \n首先在你的github上创建一个新的仓库，这里命名很重要，否则会导致后续无法访问等问题，Repositor的名称要用**你的github名.github.io**，比如我的是**longzhang0314.github.io**否则会导致后续无法正常访问。<br><br>\n回到本地命令行，返回站点目录，输入如下命令，目的是生成最终页面：\n```\nhugo --theme=m10c --baseUrl=\"https://longzhang0314.github.io\" --buildDrafts\n```\n显示如下：\n```\nBuilding sites …\n                   | EN\n+------------------+----+\n  Pages            | 10\n  Paginator pages  |  0\n  Non-page files   |  0\n  Static files     |  1\n  Processed images |  0\n  Aliases          |  4\n  Sitemaps         |  1\n  Cleaned          |  0\n\nTotal in 63 ms\n```\n此时，在站点目录下会生成一个public文件夹，这个文件夹中的内容就是我们的博客展示的静态资源了，我们只需要把这个文件夹中的内容push到master分支即可，命令如下：\n\n```\ncd public\ngit init\ngit remote add origin https://github.com/longzhang0314/longzhang0314.github.io.git\ngit add .\ngit commit -m \"我的 hugo 博客第一次提交\"\ngit push -u origin master\n```\n命令行中最终显示：\n\n```\nEnumerating objects: 32, done.\nCounting objects: 100% (32/32), done.\nDelta compression using up to 8 threads\nCompressing objects: 100% (23/23), done.\nWriting objects: 100% (32/32), 7.49 KiB | 1.07 MiB/s, done.\nTotal 32 (delta 11), reused 0 (delta 0)\nremote: Resolving deltas: 100% (11/11), done.\nTo https://github.com/longzhang0314/longzhang0314.github.io.git\n * [new branch]      master -> master\nBranch 'master' set up to track remote branch 'master' from 'origin'.\n```\n这就表示一切顺利了~<br>\n浏览器中访问[https://longzhang0314.github.io](https://longzhang0314.github.io)就可以看到你的博客啦~\n#### 注：\n之后更换主题等操作以后可能会需要的指令：\n\n```\ngit pull origin master --allow-unrelated-histories\n```","source":"_posts/hugo搭建.md","raw":"---\ntitle: \"windows系统最简单的Hugo博客搭建\"\ndate: 2019-09-04T10:11:02+08:00\ndraft: true\ncategories:\n- 工具\n---\n\n#### 1.安装<br>\n- 需要提前安装git，并拥有一个github账号。\n- widows需要在[https://github.com/gohugoio/hugo/releases](https://github.com/gohugoio/hugo/releases)处下载hugo运行需要的二级制码**hugo_0.57.2_Windows-64bit.zip**，并解压配置系统变量。<br>\n在命令行使用如下命令确认是否安装正确：\n\n```\nhugo version\n```\n- 打印如下内容表示安装成功：\n\n```\nHugo Static Site Generator v0.57.2-A849CB2D windows/amd64 BuildDate: 2019-08-17T17:54:13Z\n```\n\n#### 2. 生成站点\n切换至想要创建的目录，运行：\n```\nhugo new site myblog\n```\n打印如下内容表示生成站点成功：\n\n```\nCongratulations! Your new Hugo site is created\n```\n#### 3. 下载主题\n\n```\ncd myblog\ngit clone https://github.com/vaga/hugo-theme-m10c.git themes/m10c\n```\n打印如下内容表示主题下载成功：\n\n```\nCloning into 'themes/m10c'...\nremote: Enumerating objects: 18, done.\nremote: Counting objects: 100% (18/18), done.\nremote: Compressing objects: 100% (17/17), done.\nremote: Total 265 (delta 4), reused 11 (delta 1), pack-reused 247\nReceiving objects:  65% (173/265), 420.01 KiB | 136.00 KiB/s\nReceiving objects: 100% (265/265), 447.54 KiB | 140.00 KiB/s, done.\nResolving deltas: 100% (82/82), done.\n```\n#### 4. 创建文章\n在命令行输入：\n```\nhugo new post/blog.md\n```\n会显示：\n```\nmyblog\\content\\post\\myblog.md created\n```\n创建的文章会自动生成到content目录下，你可以去对应的目录找到刚刚创建的文章，使用markdown编辑器编辑你的博客。\n#### 5. 本地启动\n\n```\nhugo server -t m10c --buildDrafts\n```\n打印如下内容表示本地启动成功：\n\n```\nBuilding sites …\n                   | EN\n+------------------+----+\n  Pages            |  7\n  Paginator pages  |  0\n  Non-page files   |  0\n  Static files     |  1\n  Processed images |  0\n  Aliases          |  3\n  Sitemaps         |  1\n  Cleaned          |  0\n\nTotal in 77 ms\nWatching for changes in D:\\qwwww\\mmmqqq\\{archetypes,content,data,layouts,static,themes}\nWatching for config changes in D:\\qwwww\\mmmqqq\\config.toml\nEnvironment: \"development\"\nServing pages from memory\nRunning in Fast Render Mode. For full rebuilds on change: hugo server --disableFastRender\nWeb Server is available at http://localhost:1313/ (bind address 127.0.0.1)\nPress Ctrl+C to stop\n```\n\n启动后安装提示访问[http://localhost:1313/](http://localhost:1313/)，就可以成功看到你的博客网站啦~\n#### 6. 部署到github \n首先在你的github上创建一个新的仓库，这里命名很重要，否则会导致后续无法访问等问题，Repositor的名称要用**你的github名.github.io**，比如我的是**longzhang0314.github.io**否则会导致后续无法正常访问。<br><br>\n回到本地命令行，返回站点目录，输入如下命令，目的是生成最终页面：\n```\nhugo --theme=m10c --baseUrl=\"https://longzhang0314.github.io\" --buildDrafts\n```\n显示如下：\n```\nBuilding sites …\n                   | EN\n+------------------+----+\n  Pages            | 10\n  Paginator pages  |  0\n  Non-page files   |  0\n  Static files     |  1\n  Processed images |  0\n  Aliases          |  4\n  Sitemaps         |  1\n  Cleaned          |  0\n\nTotal in 63 ms\n```\n此时，在站点目录下会生成一个public文件夹，这个文件夹中的内容就是我们的博客展示的静态资源了，我们只需要把这个文件夹中的内容push到master分支即可，命令如下：\n\n```\ncd public\ngit init\ngit remote add origin https://github.com/longzhang0314/longzhang0314.github.io.git\ngit add .\ngit commit -m \"我的 hugo 博客第一次提交\"\ngit push -u origin master\n```\n命令行中最终显示：\n\n```\nEnumerating objects: 32, done.\nCounting objects: 100% (32/32), done.\nDelta compression using up to 8 threads\nCompressing objects: 100% (23/23), done.\nWriting objects: 100% (32/32), 7.49 KiB | 1.07 MiB/s, done.\nTotal 32 (delta 11), reused 0 (delta 0)\nremote: Resolving deltas: 100% (11/11), done.\nTo https://github.com/longzhang0314/longzhang0314.github.io.git\n * [new branch]      master -> master\nBranch 'master' set up to track remote branch 'master' from 'origin'.\n```\n这就表示一切顺利了~<br>\n浏览器中访问[https://longzhang0314.github.io](https://longzhang0314.github.io)就可以看到你的博客啦~\n#### 注：\n之后更换主题等操作以后可能会需要的指令：\n\n```\ngit pull origin master --allow-unrelated-histories\n```","slug":"hugo搭建","published":1,"updated":"2020-08-23T11:42:16.281Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cke72eefz000mdfsecne01e8m","content":"<h4 id=\"1-安装\"><a href=\"#1-安装\" class=\"headerlink\" title=\"1.安装\"></a>1.安装<br></h4><ul>\n<li>需要提前安装git，并拥有一个github账号。</li>\n<li>widows需要在<a href=\"https://github.com/gohugoio/hugo/releases\">https://github.com/gohugoio/hugo/releases</a>处下载hugo运行需要的二级制码<strong>hugo_0.57.2_Windows-64bit.zip</strong>，并解压配置系统变量。<br><br>在命令行使用如下命令确认是否安装正确：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hugo version</span><br></pre></td></tr></table></figure>\n<ul>\n<li>打印如下内容表示安装成功：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Hugo Static Site Generator v0.57.2-A849CB2D windows&#x2F;amd64 BuildDate: 2019-08-17T17:54:13Z</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-生成站点\"><a href=\"#2-生成站点\" class=\"headerlink\" title=\"2. 生成站点\"></a>2. 生成站点</h4><p>切换至想要创建的目录，运行：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hugo new site myblog</span><br></pre></td></tr></table></figure>\n<p>打印如下内容表示生成站点成功：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Congratulations! Your new Hugo site is created</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-下载主题\"><a href=\"#3-下载主题\" class=\"headerlink\" title=\"3. 下载主题\"></a>3. 下载主题</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd myblog</span><br><span class=\"line\">git clone https:&#x2F;&#x2F;github.com&#x2F;vaga&#x2F;hugo-theme-m10c.git themes&#x2F;m10c</span><br></pre></td></tr></table></figure>\n<p>打印如下内容表示主题下载成功：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Cloning into &#39;themes&#x2F;m10c&#39;...</span><br><span class=\"line\">remote: Enumerating objects: 18, done.</span><br><span class=\"line\">remote: Counting objects: 100% (18&#x2F;18), done.</span><br><span class=\"line\">remote: Compressing objects: 100% (17&#x2F;17), done.</span><br><span class=\"line\">remote: Total 265 (delta 4), reused 11 (delta 1), pack-reused 247</span><br><span class=\"line\">Receiving objects:  65% (173&#x2F;265), 420.01 KiB | 136.00 KiB&#x2F;s</span><br><span class=\"line\">Receiving objects: 100% (265&#x2F;265), 447.54 KiB | 140.00 KiB&#x2F;s, done.</span><br><span class=\"line\">Resolving deltas: 100% (82&#x2F;82), done.</span><br></pre></td></tr></table></figure>\n<h4 id=\"4-创建文章\"><a href=\"#4-创建文章\" class=\"headerlink\" title=\"4. 创建文章\"></a>4. 创建文章</h4><p>在命令行输入：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hugo new post&#x2F;blog.md</span><br></pre></td></tr></table></figure>\n<p>会显示：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myblog\\content\\post\\myblog.md created</span><br></pre></td></tr></table></figure>\n<p>创建的文章会自动生成到content目录下，你可以去对应的目录找到刚刚创建的文章，使用markdown编辑器编辑你的博客。</p>\n<h4 id=\"5-本地启动\"><a href=\"#5-本地启动\" class=\"headerlink\" title=\"5. 本地启动\"></a>5. 本地启动</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hugo server -t m10c --buildDrafts</span><br></pre></td></tr></table></figure>\n<p>打印如下内容表示本地启动成功：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Building sites …</span><br><span class=\"line\">                   | EN</span><br><span class=\"line\">+------------------+----+</span><br><span class=\"line\">  Pages            |  7</span><br><span class=\"line\">  Paginator pages  |  0</span><br><span class=\"line\">  Non-page files   |  0</span><br><span class=\"line\">  Static files     |  1</span><br><span class=\"line\">  Processed images |  0</span><br><span class=\"line\">  Aliases          |  3</span><br><span class=\"line\">  Sitemaps         |  1</span><br><span class=\"line\">  Cleaned          |  0</span><br><span class=\"line\"></span><br><span class=\"line\">Total in 77 ms</span><br><span class=\"line\">Watching for changes in D:\\qwwww\\mmmqqq\\&#123;archetypes,content,data,layouts,static,themes&#125;</span><br><span class=\"line\">Watching for config changes in D:\\qwwww\\mmmqqq\\config.toml</span><br><span class=\"line\">Environment: &quot;development&quot;</span><br><span class=\"line\">Serving pages from memory</span><br><span class=\"line\">Running in Fast Render Mode. For full rebuilds on change: hugo server --disableFastRender</span><br><span class=\"line\">Web Server is available at http:&#x2F;&#x2F;localhost:1313&#x2F; (bind address 127.0.0.1)</span><br><span class=\"line\">Press Ctrl+C to stop</span><br></pre></td></tr></table></figure>\n\n<p>启动后安装提示访问<a href=\"http://localhost:1313/\">http://localhost:1313/</a>，就可以成功看到你的博客网站啦~</p>\n<h4 id=\"6-部署到github\"><a href=\"#6-部署到github\" class=\"headerlink\" title=\"6. 部署到github\"></a>6. 部署到github</h4><p>首先在你的github上创建一个新的仓库，这里命名很重要，否则会导致后续无法访问等问题，Repositor的名称要用<strong>你的github名.github.io</strong>，比如我的是<strong>longzhang0314.github.io</strong>否则会导致后续无法正常访问。<br><br><br>回到本地命令行，返回站点目录，输入如下命令，目的是生成最终页面：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hugo --theme&#x3D;m10c --baseUrl&#x3D;&quot;https:&#x2F;&#x2F;longzhang0314.github.io&quot; --buildDrafts</span><br></pre></td></tr></table></figure>\n<p>显示如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Building sites …</span><br><span class=\"line\">                   | EN</span><br><span class=\"line\">+------------------+----+</span><br><span class=\"line\">  Pages            | 10</span><br><span class=\"line\">  Paginator pages  |  0</span><br><span class=\"line\">  Non-page files   |  0</span><br><span class=\"line\">  Static files     |  1</span><br><span class=\"line\">  Processed images |  0</span><br><span class=\"line\">  Aliases          |  4</span><br><span class=\"line\">  Sitemaps         |  1</span><br><span class=\"line\">  Cleaned          |  0</span><br><span class=\"line\"></span><br><span class=\"line\">Total in 63 ms</span><br></pre></td></tr></table></figure>\n<p>此时，在站点目录下会生成一个public文件夹，这个文件夹中的内容就是我们的博客展示的静态资源了，我们只需要把这个文件夹中的内容push到master分支即可，命令如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd public</span><br><span class=\"line\">git init</span><br><span class=\"line\">git remote add origin https:&#x2F;&#x2F;github.com&#x2F;longzhang0314&#x2F;longzhang0314.github.io.git</span><br><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m &quot;我的 hugo 博客第一次提交&quot;</span><br><span class=\"line\">git push -u origin master</span><br></pre></td></tr></table></figure>\n<p>命令行中最终显示：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Enumerating objects: 32, done.</span><br><span class=\"line\">Counting objects: 100% (32&#x2F;32), done.</span><br><span class=\"line\">Delta compression using up to 8 threads</span><br><span class=\"line\">Compressing objects: 100% (23&#x2F;23), done.</span><br><span class=\"line\">Writing objects: 100% (32&#x2F;32), 7.49 KiB | 1.07 MiB&#x2F;s, done.</span><br><span class=\"line\">Total 32 (delta 11), reused 0 (delta 0)</span><br><span class=\"line\">remote: Resolving deltas: 100% (11&#x2F;11), done.</span><br><span class=\"line\">To https:&#x2F;&#x2F;github.com&#x2F;longzhang0314&#x2F;longzhang0314.github.io.git</span><br><span class=\"line\"> * [new branch]      master -&gt; master</span><br><span class=\"line\">Branch &#39;master&#39; set up to track remote branch &#39;master&#39; from &#39;origin&#39;.</span><br></pre></td></tr></table></figure>\n<p>这就表示一切顺利了<del><br><br>浏览器中访问<a href=\"https://longzhang0314.github.io/\">https://longzhang0314.github.io</a>就可以看到你的博客啦</del></p>\n<h4 id=\"注：\"><a href=\"#注：\" class=\"headerlink\" title=\"注：\"></a>注：</h4><p>之后更换主题等操作以后可能会需要的指令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git pull origin master --allow-unrelated-histories</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h4 id=\"1-安装\"><a href=\"#1-安装\" class=\"headerlink\" title=\"1.安装\"></a>1.安装<br></h4><ul>\n<li>需要提前安装git，并拥有一个github账号。</li>\n<li>widows需要在<a href=\"https://github.com/gohugoio/hugo/releases\">https://github.com/gohugoio/hugo/releases</a>处下载hugo运行需要的二级制码<strong>hugo_0.57.2_Windows-64bit.zip</strong>，并解压配置系统变量。<br><br>在命令行使用如下命令确认是否安装正确：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hugo version</span><br></pre></td></tr></table></figure>\n<ul>\n<li>打印如下内容表示安装成功：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Hugo Static Site Generator v0.57.2-A849CB2D windows&#x2F;amd64 BuildDate: 2019-08-17T17:54:13Z</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-生成站点\"><a href=\"#2-生成站点\" class=\"headerlink\" title=\"2. 生成站点\"></a>2. 生成站点</h4><p>切换至想要创建的目录，运行：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hugo new site myblog</span><br></pre></td></tr></table></figure>\n<p>打印如下内容表示生成站点成功：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Congratulations! Your new Hugo site is created</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-下载主题\"><a href=\"#3-下载主题\" class=\"headerlink\" title=\"3. 下载主题\"></a>3. 下载主题</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd myblog</span><br><span class=\"line\">git clone https:&#x2F;&#x2F;github.com&#x2F;vaga&#x2F;hugo-theme-m10c.git themes&#x2F;m10c</span><br></pre></td></tr></table></figure>\n<p>打印如下内容表示主题下载成功：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Cloning into &#39;themes&#x2F;m10c&#39;...</span><br><span class=\"line\">remote: Enumerating objects: 18, done.</span><br><span class=\"line\">remote: Counting objects: 100% (18&#x2F;18), done.</span><br><span class=\"line\">remote: Compressing objects: 100% (17&#x2F;17), done.</span><br><span class=\"line\">remote: Total 265 (delta 4), reused 11 (delta 1), pack-reused 247</span><br><span class=\"line\">Receiving objects:  65% (173&#x2F;265), 420.01 KiB | 136.00 KiB&#x2F;s</span><br><span class=\"line\">Receiving objects: 100% (265&#x2F;265), 447.54 KiB | 140.00 KiB&#x2F;s, done.</span><br><span class=\"line\">Resolving deltas: 100% (82&#x2F;82), done.</span><br></pre></td></tr></table></figure>\n<h4 id=\"4-创建文章\"><a href=\"#4-创建文章\" class=\"headerlink\" title=\"4. 创建文章\"></a>4. 创建文章</h4><p>在命令行输入：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hugo new post&#x2F;blog.md</span><br></pre></td></tr></table></figure>\n<p>会显示：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myblog\\content\\post\\myblog.md created</span><br></pre></td></tr></table></figure>\n<p>创建的文章会自动生成到content目录下，你可以去对应的目录找到刚刚创建的文章，使用markdown编辑器编辑你的博客。</p>\n<h4 id=\"5-本地启动\"><a href=\"#5-本地启动\" class=\"headerlink\" title=\"5. 本地启动\"></a>5. 本地启动</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hugo server -t m10c --buildDrafts</span><br></pre></td></tr></table></figure>\n<p>打印如下内容表示本地启动成功：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Building sites …</span><br><span class=\"line\">                   | EN</span><br><span class=\"line\">+------------------+----+</span><br><span class=\"line\">  Pages            |  7</span><br><span class=\"line\">  Paginator pages  |  0</span><br><span class=\"line\">  Non-page files   |  0</span><br><span class=\"line\">  Static files     |  1</span><br><span class=\"line\">  Processed images |  0</span><br><span class=\"line\">  Aliases          |  3</span><br><span class=\"line\">  Sitemaps         |  1</span><br><span class=\"line\">  Cleaned          |  0</span><br><span class=\"line\"></span><br><span class=\"line\">Total in 77 ms</span><br><span class=\"line\">Watching for changes in D:\\qwwww\\mmmqqq\\&#123;archetypes,content,data,layouts,static,themes&#125;</span><br><span class=\"line\">Watching for config changes in D:\\qwwww\\mmmqqq\\config.toml</span><br><span class=\"line\">Environment: &quot;development&quot;</span><br><span class=\"line\">Serving pages from memory</span><br><span class=\"line\">Running in Fast Render Mode. For full rebuilds on change: hugo server --disableFastRender</span><br><span class=\"line\">Web Server is available at http:&#x2F;&#x2F;localhost:1313&#x2F; (bind address 127.0.0.1)</span><br><span class=\"line\">Press Ctrl+C to stop</span><br></pre></td></tr></table></figure>\n\n<p>启动后安装提示访问<a href=\"http://localhost:1313/\">http://localhost:1313/</a>，就可以成功看到你的博客网站啦~</p>\n<h4 id=\"6-部署到github\"><a href=\"#6-部署到github\" class=\"headerlink\" title=\"6. 部署到github\"></a>6. 部署到github</h4><p>首先在你的github上创建一个新的仓库，这里命名很重要，否则会导致后续无法访问等问题，Repositor的名称要用<strong>你的github名.github.io</strong>，比如我的是<strong>longzhang0314.github.io</strong>否则会导致后续无法正常访问。<br><br><br>回到本地命令行，返回站点目录，输入如下命令，目的是生成最终页面：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hugo --theme&#x3D;m10c --baseUrl&#x3D;&quot;https:&#x2F;&#x2F;longzhang0314.github.io&quot; --buildDrafts</span><br></pre></td></tr></table></figure>\n<p>显示如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Building sites …</span><br><span class=\"line\">                   | EN</span><br><span class=\"line\">+------------------+----+</span><br><span class=\"line\">  Pages            | 10</span><br><span class=\"line\">  Paginator pages  |  0</span><br><span class=\"line\">  Non-page files   |  0</span><br><span class=\"line\">  Static files     |  1</span><br><span class=\"line\">  Processed images |  0</span><br><span class=\"line\">  Aliases          |  4</span><br><span class=\"line\">  Sitemaps         |  1</span><br><span class=\"line\">  Cleaned          |  0</span><br><span class=\"line\"></span><br><span class=\"line\">Total in 63 ms</span><br></pre></td></tr></table></figure>\n<p>此时，在站点目录下会生成一个public文件夹，这个文件夹中的内容就是我们的博客展示的静态资源了，我们只需要把这个文件夹中的内容push到master分支即可，命令如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd public</span><br><span class=\"line\">git init</span><br><span class=\"line\">git remote add origin https:&#x2F;&#x2F;github.com&#x2F;longzhang0314&#x2F;longzhang0314.github.io.git</span><br><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m &quot;我的 hugo 博客第一次提交&quot;</span><br><span class=\"line\">git push -u origin master</span><br></pre></td></tr></table></figure>\n<p>命令行中最终显示：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Enumerating objects: 32, done.</span><br><span class=\"line\">Counting objects: 100% (32&#x2F;32), done.</span><br><span class=\"line\">Delta compression using up to 8 threads</span><br><span class=\"line\">Compressing objects: 100% (23&#x2F;23), done.</span><br><span class=\"line\">Writing objects: 100% (32&#x2F;32), 7.49 KiB | 1.07 MiB&#x2F;s, done.</span><br><span class=\"line\">Total 32 (delta 11), reused 0 (delta 0)</span><br><span class=\"line\">remote: Resolving deltas: 100% (11&#x2F;11), done.</span><br><span class=\"line\">To https:&#x2F;&#x2F;github.com&#x2F;longzhang0314&#x2F;longzhang0314.github.io.git</span><br><span class=\"line\"> * [new branch]      master -&gt; master</span><br><span class=\"line\">Branch &#39;master&#39; set up to track remote branch &#39;master&#39; from &#39;origin&#39;.</span><br></pre></td></tr></table></figure>\n<p>这就表示一切顺利了<del><br><br>浏览器中访问<a href=\"https://longzhang0314.github.io/\">https://longzhang0314.github.io</a>就可以看到你的博客啦</del></p>\n<h4 id=\"注：\"><a href=\"#注：\" class=\"headerlink\" title=\"注：\"></a>注：</h4><p>之后更换主题等操作以后可能会需要的指令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git pull origin master --allow-unrelated-histories</span><br></pre></td></tr></table></figure>"},{"title":"python学习2","date":"2020-04-24T14:33:02.000Z","_content":"\n**if控制语句**\n\n```python\nis_hot = True\nis_cold = True\n\nif is_hot:\n    print(\"It's a hot dat!\")\n    print(\"Drink water\")\nelif is_cold:\n    print(\"It's a cold day\")\nelse:\n    print(\"It's a lovely day\")\nprint(\"Enjoy you day\")\n#--------------------------\nhas_high_income = True\nhas_good_credit = False\nhas_criminal = False\n\nif has_high_income and has_good_credit:\n    print(\"loan\")\nelif has_high_income or has_good_credit:\n    print(\"loan too\")\n\nif has_high_income and not has_criminal:\n    print(\"enjoy for loan\")\n#---------------------------------\ntemperature = 30\n\nif temperature > 30:\n    print(\"haha\")\nelse:\n    print(\"hihihi\")\n\nprint('------------------------------')\n\nname = 'J'\n\nif len(name) < 3:\n    print('name is haha')\n```\n\n**if小练习**\n\n```python\nweight = int(input('Weight: '))\nunit = input('L(bs) or K(g): ')\n\nif unit.upper() == 'L':\n    covert = weight * 0.45\n    print(f\"You are {covert} kilos\")\nelse:\n    covert = weight / 0.45\n    print(f\"You are {covert} Kg\")\n```\n\n**while循环**\n\n注意while..else的使用\n\n```python\ni  = 1\n\nwhile i <= 10:\n    print('*' * i)\n    i += 1\n    if i == 8:\n        print(\"haha dao 8 le\")\n        break\n# while执行完执行else，遇到break就失效\nelse:\n    print('9999999')\nprint(\"Done\")\n\nprint('------------------------------')\n```\n\n**for循环**\n\n```python\nfor item in 'Python':\n    print(item)\n\nprint('-----------------------')\n\nfor item in [2, 1, 3, 4]:\n    print(item)\n\nprint('-----------------------')\n\nfor item in range(10):\n    print(item)\n\nprint('----------------')\n\nfor item in range(4,6):\n    print(item)\nprint('-------------------------')\n\nfor item in range(5, 10, 2):\n    print(item)\n```\n\n**一维数组（长度可变）**\n\n```python\nprices = [10, 20, 30]\nprint(prices)\nsum = 0\nfor i in prices:\n    sum += i\nprint(sum)\n\nprint('------------------')\n\nfor i in range(4):\n    for j in range(5):\n        print(f\"{i},{j}\")\n```\n\n**二维数组**\n\n```python\nmatrix = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n]\nprint(matrix[0])\n\nfor i in matrix:\n    for j in i:\n        print(j)\n```\n\n**数组基本操作**\n\n```python\nnumbers = [5, 2, 1, 7, 2, 4]\nnumbers.append(20)\nnumbers.insert(0, 10)\nprint(numbers)\nnumbers.remove(5)\nprint(numbers)\nprint(numbers.index(2))\nprint(numbers.pop())\nprint(numbers.count(2))\nnumbers.sort()\nnumbers.reverse()\nprint(numbers)\n\nnumbers2 = numbers.copy()\n\nnumbers.clear()\nprint(numbers)\n```\n\n**元组（不能修改）**\n\n```python\n# 元组：不能修改\nnumbers = (1, 2, 3)\nprint(numbers[0])\nprint('-----------------------------')\n# 解压缩特性\ncoor = (1, 2, 3)\n# x = coor[0]\n# y = coor[1]\n# z = coor[2]\n# 等价于上面的写法，这个特性也可以用于数组\nx, y, z = coor\n```\n\n**字典**\n\n```python\ncustomers = {\n    \"name\": \"zhanglong\",\n    \"age\": 18,\n    \"is_verfied\": True\n}\n# 如果不存在key会抛异常\nprint(customers['name'])\n# 如果不存在key不会抛异常\nprint(customers.get('Name'))\n# 如果不存在就赋默认值\nprint(customers.get(\"birthday\", \"Jan 1 1994\"))\n# 更新值\ncustomers[\"name\"] = \"令狐冲\"\nprint(customers[\"name\"])\n\n#----------------------------------\n\nphone = input(\"Phone: \")\ndigits_mapping = {\n    '1': 'One',\n    '2': 'Two',\n    '3': 'Three',\n    '4': 'Four',\n}\noutput = \"\"\nfor ch in phone:\n    output += digits_mapping.get(ch, \"!\") + \" \"\nprint(output)\n```\n\n**math**\n\n```python\nimport math\n\nprint(math.ceil(2.9))\nprint(math.floor(2.9))\n\nx = 2.9\nprint(round(2.9))\nprint(abs(-2.9))\n```\n\n    ","source":"_posts/python学习2.md","raw":"---\ntitle: python学习2\ndate: 2020-04-24 22:33:02\ntags:\ncategories:\n- python\n---\n\n**if控制语句**\n\n```python\nis_hot = True\nis_cold = True\n\nif is_hot:\n    print(\"It's a hot dat!\")\n    print(\"Drink water\")\nelif is_cold:\n    print(\"It's a cold day\")\nelse:\n    print(\"It's a lovely day\")\nprint(\"Enjoy you day\")\n#--------------------------\nhas_high_income = True\nhas_good_credit = False\nhas_criminal = False\n\nif has_high_income and has_good_credit:\n    print(\"loan\")\nelif has_high_income or has_good_credit:\n    print(\"loan too\")\n\nif has_high_income and not has_criminal:\n    print(\"enjoy for loan\")\n#---------------------------------\ntemperature = 30\n\nif temperature > 30:\n    print(\"haha\")\nelse:\n    print(\"hihihi\")\n\nprint('------------------------------')\n\nname = 'J'\n\nif len(name) < 3:\n    print('name is haha')\n```\n\n**if小练习**\n\n```python\nweight = int(input('Weight: '))\nunit = input('L(bs) or K(g): ')\n\nif unit.upper() == 'L':\n    covert = weight * 0.45\n    print(f\"You are {covert} kilos\")\nelse:\n    covert = weight / 0.45\n    print(f\"You are {covert} Kg\")\n```\n\n**while循环**\n\n注意while..else的使用\n\n```python\ni  = 1\n\nwhile i <= 10:\n    print('*' * i)\n    i += 1\n    if i == 8:\n        print(\"haha dao 8 le\")\n        break\n# while执行完执行else，遇到break就失效\nelse:\n    print('9999999')\nprint(\"Done\")\n\nprint('------------------------------')\n```\n\n**for循环**\n\n```python\nfor item in 'Python':\n    print(item)\n\nprint('-----------------------')\n\nfor item in [2, 1, 3, 4]:\n    print(item)\n\nprint('-----------------------')\n\nfor item in range(10):\n    print(item)\n\nprint('----------------')\n\nfor item in range(4,6):\n    print(item)\nprint('-------------------------')\n\nfor item in range(5, 10, 2):\n    print(item)\n```\n\n**一维数组（长度可变）**\n\n```python\nprices = [10, 20, 30]\nprint(prices)\nsum = 0\nfor i in prices:\n    sum += i\nprint(sum)\n\nprint('------------------')\n\nfor i in range(4):\n    for j in range(5):\n        print(f\"{i},{j}\")\n```\n\n**二维数组**\n\n```python\nmatrix = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n]\nprint(matrix[0])\n\nfor i in matrix:\n    for j in i:\n        print(j)\n```\n\n**数组基本操作**\n\n```python\nnumbers = [5, 2, 1, 7, 2, 4]\nnumbers.append(20)\nnumbers.insert(0, 10)\nprint(numbers)\nnumbers.remove(5)\nprint(numbers)\nprint(numbers.index(2))\nprint(numbers.pop())\nprint(numbers.count(2))\nnumbers.sort()\nnumbers.reverse()\nprint(numbers)\n\nnumbers2 = numbers.copy()\n\nnumbers.clear()\nprint(numbers)\n```\n\n**元组（不能修改）**\n\n```python\n# 元组：不能修改\nnumbers = (1, 2, 3)\nprint(numbers[0])\nprint('-----------------------------')\n# 解压缩特性\ncoor = (1, 2, 3)\n# x = coor[0]\n# y = coor[1]\n# z = coor[2]\n# 等价于上面的写法，这个特性也可以用于数组\nx, y, z = coor\n```\n\n**字典**\n\n```python\ncustomers = {\n    \"name\": \"zhanglong\",\n    \"age\": 18,\n    \"is_verfied\": True\n}\n# 如果不存在key会抛异常\nprint(customers['name'])\n# 如果不存在key不会抛异常\nprint(customers.get('Name'))\n# 如果不存在就赋默认值\nprint(customers.get(\"birthday\", \"Jan 1 1994\"))\n# 更新值\ncustomers[\"name\"] = \"令狐冲\"\nprint(customers[\"name\"])\n\n#----------------------------------\n\nphone = input(\"Phone: \")\ndigits_mapping = {\n    '1': 'One',\n    '2': 'Two',\n    '3': 'Three',\n    '4': 'Four',\n}\noutput = \"\"\nfor ch in phone:\n    output += digits_mapping.get(ch, \"!\") + \" \"\nprint(output)\n```\n\n**math**\n\n```python\nimport math\n\nprint(math.ceil(2.9))\nprint(math.floor(2.9))\n\nx = 2.9\nprint(round(2.9))\nprint(abs(-2.9))\n```\n\n    ","slug":"python学习2","published":1,"updated":"2020-08-23T12:17:42.995Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cke72eeg0000pdfsea83o84hp","content":"<p><strong>if控制语句</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">is_hot = <span class=\"literal\">True</span></span><br><span class=\"line\">is_cold = <span class=\"literal\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> is_hot:</span><br><span class=\"line\">    print(<span class=\"string\">&quot;It&#x27;s a hot dat!&quot;</span>)</span><br><span class=\"line\">    print(<span class=\"string\">&quot;Drink water&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">elif</span> is_cold:</span><br><span class=\"line\">    print(<span class=\"string\">&quot;It&#x27;s a cold day&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    print(<span class=\"string\">&quot;It&#x27;s a lovely day&quot;</span>)</span><br><span class=\"line\">print(<span class=\"string\">&quot;Enjoy you day&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\">#--------------------------</span></span><br><span class=\"line\">has_high_income = <span class=\"literal\">True</span></span><br><span class=\"line\">has_good_credit = <span class=\"literal\">False</span></span><br><span class=\"line\">has_criminal = <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> has_high_income <span class=\"keyword\">and</span> has_good_credit:</span><br><span class=\"line\">    print(<span class=\"string\">&quot;loan&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">elif</span> has_high_income <span class=\"keyword\">or</span> has_good_credit:</span><br><span class=\"line\">    print(<span class=\"string\">&quot;loan too&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> has_high_income <span class=\"keyword\">and</span> <span class=\"keyword\">not</span> has_criminal:</span><br><span class=\"line\">    print(<span class=\"string\">&quot;enjoy for loan&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\">#---------------------------------</span></span><br><span class=\"line\">temperature = <span class=\"number\">30</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> temperature &gt; <span class=\"number\">30</span>:</span><br><span class=\"line\">    print(<span class=\"string\">&quot;haha&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    print(<span class=\"string\">&quot;hihihi&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">print(<span class=\"string\">&#x27;------------------------------&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">name = <span class=\"string\">&#x27;J&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> len(name) &lt; <span class=\"number\">3</span>:</span><br><span class=\"line\">    print(<span class=\"string\">&#x27;name is haha&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<p><strong>if小练习</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">weight = int(input(<span class=\"string\">&#x27;Weight: &#x27;</span>))</span><br><span class=\"line\">unit = input(<span class=\"string\">&#x27;L(bs) or K(g): &#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> unit.upper() == <span class=\"string\">&#x27;L&#x27;</span>:</span><br><span class=\"line\">    covert = weight * <span class=\"number\">0.45</span></span><br><span class=\"line\">    print(<span class=\"string\">f&quot;You are <span class=\"subst\">&#123;covert&#125;</span> kilos&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    covert = weight / <span class=\"number\">0.45</span></span><br><span class=\"line\">    print(<span class=\"string\">f&quot;You are <span class=\"subst\">&#123;covert&#125;</span> Kg&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<p><strong>while循环</strong></p>\n<p>注意while..else的使用</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">i  = <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> i &lt;= <span class=\"number\">10</span>:</span><br><span class=\"line\">    print(<span class=\"string\">&#x27;*&#x27;</span> * i)</span><br><span class=\"line\">    i += <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> i == <span class=\"number\">8</span>:</span><br><span class=\"line\">        print(<span class=\"string\">&quot;haha dao 8 le&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\"><span class=\"comment\"># while执行完执行else，遇到break就失效</span></span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    print(<span class=\"string\">&#x27;9999999&#x27;</span>)</span><br><span class=\"line\">print(<span class=\"string\">&quot;Done&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">print(<span class=\"string\">&#x27;------------------------------&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<p><strong>for循环</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> <span class=\"string\">&#x27;Python&#x27;</span>:</span><br><span class=\"line\">    print(item)</span><br><span class=\"line\"></span><br><span class=\"line\">print(<span class=\"string\">&#x27;-----------------------&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> [<span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]:</span><br><span class=\"line\">    print(item)</span><br><span class=\"line\"></span><br><span class=\"line\">print(<span class=\"string\">&#x27;-----------------------&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> range(<span class=\"number\">10</span>):</span><br><span class=\"line\">    print(item)</span><br><span class=\"line\"></span><br><span class=\"line\">print(<span class=\"string\">&#x27;----------------&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> range(<span class=\"number\">4</span>,<span class=\"number\">6</span>):</span><br><span class=\"line\">    print(item)</span><br><span class=\"line\">print(<span class=\"string\">&#x27;-------------------------&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> range(<span class=\"number\">5</span>, <span class=\"number\">10</span>, <span class=\"number\">2</span>):</span><br><span class=\"line\">    print(item)</span><br></pre></td></tr></table></figure>\n\n<p><strong>一维数组（长度可变）</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">prices = [<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">30</span>]</span><br><span class=\"line\">print(prices)</span><br><span class=\"line\">sum = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> prices:</span><br><span class=\"line\">    sum += i</span><br><span class=\"line\">print(sum)</span><br><span class=\"line\"></span><br><span class=\"line\">print(<span class=\"string\">&#x27;------------------&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">4</span>):</span><br><span class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(<span class=\"number\">5</span>):</span><br><span class=\"line\">        print(<span class=\"string\">f&quot;<span class=\"subst\">&#123;i&#125;</span>,<span class=\"subst\">&#123;j&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<p><strong>二维数组</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">matrix = [</span><br><span class=\"line\">    [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>],</span><br><span class=\"line\">    [<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>],</span><br><span class=\"line\">    [<span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>]</span><br><span class=\"line\">]</span><br><span class=\"line\">print(matrix[<span class=\"number\">0</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> matrix:</span><br><span class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> i:</span><br><span class=\"line\">        print(j)</span><br></pre></td></tr></table></figure>\n\n<p><strong>数组基本操作</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">numbers = [<span class=\"number\">5</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">7</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>]</span><br><span class=\"line\">numbers.append(<span class=\"number\">20</span>)</span><br><span class=\"line\">numbers.insert(<span class=\"number\">0</span>, <span class=\"number\">10</span>)</span><br><span class=\"line\">print(numbers)</span><br><span class=\"line\">numbers.remove(<span class=\"number\">5</span>)</span><br><span class=\"line\">print(numbers)</span><br><span class=\"line\">print(numbers.index(<span class=\"number\">2</span>))</span><br><span class=\"line\">print(numbers.pop())</span><br><span class=\"line\">print(numbers.count(<span class=\"number\">2</span>))</span><br><span class=\"line\">numbers.sort()</span><br><span class=\"line\">numbers.reverse()</span><br><span class=\"line\">print(numbers)</span><br><span class=\"line\"></span><br><span class=\"line\">numbers2 = numbers.copy()</span><br><span class=\"line\"></span><br><span class=\"line\">numbers.clear()</span><br><span class=\"line\">print(numbers)</span><br></pre></td></tr></table></figure>\n\n<p><strong>元组（不能修改）</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 元组：不能修改</span></span><br><span class=\"line\">numbers = (<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\">print(numbers[<span class=\"number\">0</span>])</span><br><span class=\"line\">print(<span class=\"string\">&#x27;-----------------------------&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\"># 解压缩特性</span></span><br><span class=\"line\">coor = (<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"comment\"># x = coor[0]</span></span><br><span class=\"line\"><span class=\"comment\"># y = coor[1]</span></span><br><span class=\"line\"><span class=\"comment\"># z = coor[2]</span></span><br><span class=\"line\"><span class=\"comment\"># 等价于上面的写法，这个特性也可以用于数组</span></span><br><span class=\"line\">x, y, z = coor</span><br></pre></td></tr></table></figure>\n\n<p><strong>字典</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">customers = &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;zhanglong&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;age&quot;</span>: <span class=\"number\">18</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;is_verfied&quot;</span>: <span class=\"literal\">True</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\"># 如果不存在key会抛异常</span></span><br><span class=\"line\">print(customers[<span class=\"string\">&#x27;name&#x27;</span>])</span><br><span class=\"line\"><span class=\"comment\"># 如果不存在key不会抛异常</span></span><br><span class=\"line\">print(customers.get(<span class=\"string\">&#x27;Name&#x27;</span>))</span><br><span class=\"line\"><span class=\"comment\"># 如果不存在就赋默认值</span></span><br><span class=\"line\">print(customers.get(<span class=\"string\">&quot;birthday&quot;</span>, <span class=\"string\">&quot;Jan 1 1994&quot;</span>))</span><br><span class=\"line\"><span class=\"comment\"># 更新值</span></span><br><span class=\"line\">customers[<span class=\"string\">&quot;name&quot;</span>] = <span class=\"string\">&quot;令狐冲&quot;</span></span><br><span class=\"line\">print(customers[<span class=\"string\">&quot;name&quot;</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#----------------------------------</span></span><br><span class=\"line\"></span><br><span class=\"line\">phone = input(<span class=\"string\">&quot;Phone: &quot;</span>)</span><br><span class=\"line\">digits_mapping = &#123;</span><br><span class=\"line\">    <span class=\"string\">&#x27;1&#x27;</span>: <span class=\"string\">&#x27;One&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;2&#x27;</span>: <span class=\"string\">&#x27;Two&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;3&#x27;</span>: <span class=\"string\">&#x27;Three&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;4&#x27;</span>: <span class=\"string\">&#x27;Four&#x27;</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">output = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> ch <span class=\"keyword\">in</span> phone:</span><br><span class=\"line\">    output += digits_mapping.get(ch, <span class=\"string\">&quot;!&quot;</span>) + <span class=\"string\">&quot; &quot;</span></span><br><span class=\"line\">print(output)</span><br></pre></td></tr></table></figure>\n\n<p><strong>math</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> math</span><br><span class=\"line\"></span><br><span class=\"line\">print(math.ceil(<span class=\"number\">2.9</span>))</span><br><span class=\"line\">print(math.floor(<span class=\"number\">2.9</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">x = <span class=\"number\">2.9</span></span><br><span class=\"line\">print(round(<span class=\"number\">2.9</span>))</span><br><span class=\"line\">print(abs(<span class=\"number\">-2.9</span>))</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<p><strong>if控制语句</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">is_hot = <span class=\"literal\">True</span></span><br><span class=\"line\">is_cold = <span class=\"literal\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> is_hot:</span><br><span class=\"line\">    print(<span class=\"string\">&quot;It&#x27;s a hot dat!&quot;</span>)</span><br><span class=\"line\">    print(<span class=\"string\">&quot;Drink water&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">elif</span> is_cold:</span><br><span class=\"line\">    print(<span class=\"string\">&quot;It&#x27;s a cold day&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    print(<span class=\"string\">&quot;It&#x27;s a lovely day&quot;</span>)</span><br><span class=\"line\">print(<span class=\"string\">&quot;Enjoy you day&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\">#--------------------------</span></span><br><span class=\"line\">has_high_income = <span class=\"literal\">True</span></span><br><span class=\"line\">has_good_credit = <span class=\"literal\">False</span></span><br><span class=\"line\">has_criminal = <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> has_high_income <span class=\"keyword\">and</span> has_good_credit:</span><br><span class=\"line\">    print(<span class=\"string\">&quot;loan&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">elif</span> has_high_income <span class=\"keyword\">or</span> has_good_credit:</span><br><span class=\"line\">    print(<span class=\"string\">&quot;loan too&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> has_high_income <span class=\"keyword\">and</span> <span class=\"keyword\">not</span> has_criminal:</span><br><span class=\"line\">    print(<span class=\"string\">&quot;enjoy for loan&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\">#---------------------------------</span></span><br><span class=\"line\">temperature = <span class=\"number\">30</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> temperature &gt; <span class=\"number\">30</span>:</span><br><span class=\"line\">    print(<span class=\"string\">&quot;haha&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    print(<span class=\"string\">&quot;hihihi&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">print(<span class=\"string\">&#x27;------------------------------&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">name = <span class=\"string\">&#x27;J&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> len(name) &lt; <span class=\"number\">3</span>:</span><br><span class=\"line\">    print(<span class=\"string\">&#x27;name is haha&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<p><strong>if小练习</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">weight = int(input(<span class=\"string\">&#x27;Weight: &#x27;</span>))</span><br><span class=\"line\">unit = input(<span class=\"string\">&#x27;L(bs) or K(g): &#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> unit.upper() == <span class=\"string\">&#x27;L&#x27;</span>:</span><br><span class=\"line\">    covert = weight * <span class=\"number\">0.45</span></span><br><span class=\"line\">    print(<span class=\"string\">f&quot;You are <span class=\"subst\">&#123;covert&#125;</span> kilos&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    covert = weight / <span class=\"number\">0.45</span></span><br><span class=\"line\">    print(<span class=\"string\">f&quot;You are <span class=\"subst\">&#123;covert&#125;</span> Kg&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<p><strong>while循环</strong></p>\n<p>注意while..else的使用</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">i  = <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> i &lt;= <span class=\"number\">10</span>:</span><br><span class=\"line\">    print(<span class=\"string\">&#x27;*&#x27;</span> * i)</span><br><span class=\"line\">    i += <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> i == <span class=\"number\">8</span>:</span><br><span class=\"line\">        print(<span class=\"string\">&quot;haha dao 8 le&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\"><span class=\"comment\"># while执行完执行else，遇到break就失效</span></span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    print(<span class=\"string\">&#x27;9999999&#x27;</span>)</span><br><span class=\"line\">print(<span class=\"string\">&quot;Done&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">print(<span class=\"string\">&#x27;------------------------------&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<p><strong>for循环</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> <span class=\"string\">&#x27;Python&#x27;</span>:</span><br><span class=\"line\">    print(item)</span><br><span class=\"line\"></span><br><span class=\"line\">print(<span class=\"string\">&#x27;-----------------------&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> [<span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]:</span><br><span class=\"line\">    print(item)</span><br><span class=\"line\"></span><br><span class=\"line\">print(<span class=\"string\">&#x27;-----------------------&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> range(<span class=\"number\">10</span>):</span><br><span class=\"line\">    print(item)</span><br><span class=\"line\"></span><br><span class=\"line\">print(<span class=\"string\">&#x27;----------------&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> range(<span class=\"number\">4</span>,<span class=\"number\">6</span>):</span><br><span class=\"line\">    print(item)</span><br><span class=\"line\">print(<span class=\"string\">&#x27;-------------------------&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> range(<span class=\"number\">5</span>, <span class=\"number\">10</span>, <span class=\"number\">2</span>):</span><br><span class=\"line\">    print(item)</span><br></pre></td></tr></table></figure>\n\n<p><strong>一维数组（长度可变）</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">prices = [<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">30</span>]</span><br><span class=\"line\">print(prices)</span><br><span class=\"line\">sum = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> prices:</span><br><span class=\"line\">    sum += i</span><br><span class=\"line\">print(sum)</span><br><span class=\"line\"></span><br><span class=\"line\">print(<span class=\"string\">&#x27;------------------&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">4</span>):</span><br><span class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(<span class=\"number\">5</span>):</span><br><span class=\"line\">        print(<span class=\"string\">f&quot;<span class=\"subst\">&#123;i&#125;</span>,<span class=\"subst\">&#123;j&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<p><strong>二维数组</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">matrix = [</span><br><span class=\"line\">    [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>],</span><br><span class=\"line\">    [<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>],</span><br><span class=\"line\">    [<span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>]</span><br><span class=\"line\">]</span><br><span class=\"line\">print(matrix[<span class=\"number\">0</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> matrix:</span><br><span class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> i:</span><br><span class=\"line\">        print(j)</span><br></pre></td></tr></table></figure>\n\n<p><strong>数组基本操作</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">numbers = [<span class=\"number\">5</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">7</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>]</span><br><span class=\"line\">numbers.append(<span class=\"number\">20</span>)</span><br><span class=\"line\">numbers.insert(<span class=\"number\">0</span>, <span class=\"number\">10</span>)</span><br><span class=\"line\">print(numbers)</span><br><span class=\"line\">numbers.remove(<span class=\"number\">5</span>)</span><br><span class=\"line\">print(numbers)</span><br><span class=\"line\">print(numbers.index(<span class=\"number\">2</span>))</span><br><span class=\"line\">print(numbers.pop())</span><br><span class=\"line\">print(numbers.count(<span class=\"number\">2</span>))</span><br><span class=\"line\">numbers.sort()</span><br><span class=\"line\">numbers.reverse()</span><br><span class=\"line\">print(numbers)</span><br><span class=\"line\"></span><br><span class=\"line\">numbers2 = numbers.copy()</span><br><span class=\"line\"></span><br><span class=\"line\">numbers.clear()</span><br><span class=\"line\">print(numbers)</span><br></pre></td></tr></table></figure>\n\n<p><strong>元组（不能修改）</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 元组：不能修改</span></span><br><span class=\"line\">numbers = (<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\">print(numbers[<span class=\"number\">0</span>])</span><br><span class=\"line\">print(<span class=\"string\">&#x27;-----------------------------&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\"># 解压缩特性</span></span><br><span class=\"line\">coor = (<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"comment\"># x = coor[0]</span></span><br><span class=\"line\"><span class=\"comment\"># y = coor[1]</span></span><br><span class=\"line\"><span class=\"comment\"># z = coor[2]</span></span><br><span class=\"line\"><span class=\"comment\"># 等价于上面的写法，这个特性也可以用于数组</span></span><br><span class=\"line\">x, y, z = coor</span><br></pre></td></tr></table></figure>\n\n<p><strong>字典</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">customers = &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;zhanglong&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;age&quot;</span>: <span class=\"number\">18</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;is_verfied&quot;</span>: <span class=\"literal\">True</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\"># 如果不存在key会抛异常</span></span><br><span class=\"line\">print(customers[<span class=\"string\">&#x27;name&#x27;</span>])</span><br><span class=\"line\"><span class=\"comment\"># 如果不存在key不会抛异常</span></span><br><span class=\"line\">print(customers.get(<span class=\"string\">&#x27;Name&#x27;</span>))</span><br><span class=\"line\"><span class=\"comment\"># 如果不存在就赋默认值</span></span><br><span class=\"line\">print(customers.get(<span class=\"string\">&quot;birthday&quot;</span>, <span class=\"string\">&quot;Jan 1 1994&quot;</span>))</span><br><span class=\"line\"><span class=\"comment\"># 更新值</span></span><br><span class=\"line\">customers[<span class=\"string\">&quot;name&quot;</span>] = <span class=\"string\">&quot;令狐冲&quot;</span></span><br><span class=\"line\">print(customers[<span class=\"string\">&quot;name&quot;</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#----------------------------------</span></span><br><span class=\"line\"></span><br><span class=\"line\">phone = input(<span class=\"string\">&quot;Phone: &quot;</span>)</span><br><span class=\"line\">digits_mapping = &#123;</span><br><span class=\"line\">    <span class=\"string\">&#x27;1&#x27;</span>: <span class=\"string\">&#x27;One&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;2&#x27;</span>: <span class=\"string\">&#x27;Two&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;3&#x27;</span>: <span class=\"string\">&#x27;Three&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;4&#x27;</span>: <span class=\"string\">&#x27;Four&#x27;</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">output = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> ch <span class=\"keyword\">in</span> phone:</span><br><span class=\"line\">    output += digits_mapping.get(ch, <span class=\"string\">&quot;!&quot;</span>) + <span class=\"string\">&quot; &quot;</span></span><br><span class=\"line\">print(output)</span><br></pre></td></tr></table></figure>\n\n<p><strong>math</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> math</span><br><span class=\"line\"></span><br><span class=\"line\">print(math.ceil(<span class=\"number\">2.9</span>))</span><br><span class=\"line\">print(math.floor(<span class=\"number\">2.9</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">x = <span class=\"number\">2.9</span></span><br><span class=\"line\">print(round(<span class=\"number\">2.9</span>))</span><br><span class=\"line\">print(abs(<span class=\"number\">-2.9</span>))</span><br></pre></td></tr></table></figure>\n\n"},{"title":"单链表基本操作（下）","date":"2019-11-11T02:18:10.000Z","_content":"\n##### 在单链表基本操作（上）介绍了单链表最基本的操作，这节介绍一些相对进阶的操作。\n\n- 单链表反转：遍历当前链表，首先创造一个临时节点保存当前节点的下一个节点，然后让当前节点的指针指向前一个节点，依次遍历，直到所有的指针反转，代码相对比较简单，时间复杂度是O(n)，空间复杂度是O(n)。\n\n```java\npublic static Node reverse(Node list) {\n    Node cur = list, pre = null;\n    while (cur != null) {\n        Node next = cur.next;\n        cur.next = pre;\n\n        pre = cur;\n        cur = next;\n    }\n    return pre;\n}\n```\n\n- 检测链表是否有环：\n  - 方法一：每遍历一个新的节点，都和之前的所有节点进行比较，如果存在相同的节点，说明有环。这种方式的时间复杂度是O(n*n)；\n  - 方法二：创建一个HashSet集合，用来存储遍历过的节点，每遍历一个新节点，都add进HashSet中，如果HashSet中存在相同的节点，返回false，链表成环。这种方式的时间复杂度是O(n)，空间复杂度是O(n)。\n  - 方法三：采用快慢指针，快指针一次走两步，慢指针一次走一步，如果链表成环，快慢指针总会相遇，数学证明这里就不介绍了，直接上代码，代码的时间复杂度是O(n)，空间复杂度是O(1)。(这里很多快慢指针其实都可以从起点开始，但是因为快慢指针总会相遇，快指针先走一步，会相应的减少方法所用的时长)。\n\n```java\npublic static boolean checkCircle(Node lsit){\n    if(list == null)return false;\n    Node fast = list.next;\n    Node slow = list;\n    while(fast != null && fast.next != null){\n        fast = fast.next.next;\n        slow = slow.next;\n        if(slow == fast){\n            return true;\n        }\n    }\n    return false;\n}\n```\n\n- 求链表的中间节点：技巧和检测链表成环相似，也是使用快慢指针，快指针一次走两步，慢指针一次走一步，当快指针走完整个链表时，慢指针刚好走到链表的中点。代码的时间复杂度是O(n)，空间复杂度是O(1)。\n\n```java\npublic static Node findMiddleNode(Node list){\n    if(list == null)return null;\n    Node slow = list;\n    Node fast = list;\n    while(fast != null && fast.next != null){\n        fast = fast.next.next;\n        slow = slow.next;\n    }\n    return slow;\n}\n```\n\n- 删除链表的倒数第K个节点（K为正数）：\n  - 方法一：先遍历链表求出链表的长度n，然后将问题转化为删除正数第n-K个节点，这种方法遍历了两次链表，时间复杂度是O(n)。\n  - 方法二：采用快慢指针法：快慢指针每次都走一步，快指针先走。先让快指针达到正数第K的位置，然后慢指针从链表头开始出发，当快指针走完整个链表时，慢指针刚好走到n-K的位置，即倒数第K的位置，删除该节点，这种方法的时间复杂度也是O(n)，但是因为只遍历了一次链表，所以要比第一种方法更快。代码如下。\n\n```java\npublic static Node deleteLastKth(Node list, int k){\n    Node fast = list;\n    int i = 1;\n    // fast指针到达正数第k个位置\n    while(fast != null && i<k){\n        fast = fast.next;\n        ++i;\n    }\n    // list为null或k大于链表长度\n    if(fast == null){\n        return list;\n    }\n    \n    Node slow = list;//慢指针，同时也是待删除节点\n    Node pre  = null;//待删除节点的前一个节点\n    // 走过n-k个位置，slow到达倒数第k的位置\n    while(fast != null){\n        fast = fast.next;\n        pre = slow;\n        slow = slow.next;\n    }\n    \n    if(pre==null){//删除头节点\n        list = list.next;\n    }else{//删除其他节点\n        pre.next = pre.next.next;\n    }\n    return list;\n}\n```\n\n- 判断两个链表是否一致：遍历两个链表，然后比较每个位置的值是否一致即可。时间复杂度时O(n)，空间复杂度时O(1)。\n\n```java\npublic static boolean TFResult(Node left,Node right){\n\tNode l = left;\n\tNode r = right;\n\twhile(l!=null && r!=null){\n\t\tif(l.data == r.data){\n\t\t\tl = l.next;\n\t\t\tr = r.next;\n\t\t}else{\n\t\t\tbreak;\n\t\t}\n\t}\n\tif(l==null && r==null)return true;\n\treturn false;\n}\n```\n\n- 两个有序链表合并成一个有序链表：思路就是新创建一个链表，然后遍历比较两个有序链表的每一个节点的值，更小的放入新节点中，最后将剩余的链表中的剩余节点依次放入新链表中即可。时间复杂度O(n)，空间复杂度O(n)。\n\n```java\n//方式一：从两个链表中获得更小的头节点\npublic Node mergeTwoLisrts(Node l1,Node l2){\n    if(l1 == null)return l2;\n    if(l2 == null)return l1;\n    Node head;\n    Node p = l1;\n    Node q = l2;\n    if(l1.data<l2.data){\n        head = l1;\n        p = p.next;\n    }else{\n        head = l2;\n        q = q.next;\n    }\n    Node r = head;\n    while(p != null && q != null){\n        if(p.daa<q.data){\n            r.next = p;\n            p = p.next;\n        }else{\n            r.next = q;\n            q = q.next;\n        }\n    }\n    if(p != null){\n        r..next = p;\n    }else{\n        r.next = q;\n    }\n    return head;\n}\n\n//方式二：考虑到方式一中对于头节点的选择做了大量的判断，所以方式二使用哨兵的方式进行改进\npublic Node mergeTwoLists2(Node l1, Node l2){\n    Node solider = new Node(0);\n    Node p = solider;\n    while(l1 != null && l2 != null){\n        if(l1.data<l2.data){\n            p.next = l1;\n            l1 = l1.next;\n        }else{\n            p.next = l2;\n            l2 = l2.next;\n        }\n        p = p.next;\n    }\n    if(l1 == null){\n        p.next = l2;\n    }else{\n        p.next = l1;\n    }\n    return solider.next;\n}\n```\n\n**总结**：今天介绍了单链表比较常用的一些进阶操作，单链表操作的本质无非就是根据每个节点都保存有下一个节点的内存地址，通过遍历等操作找到要操作的节点，思路不是很难。其中涉及到了一些技巧，包括临时存储后面要用的节点，快慢双指针，哨兵。在改变指针指向的时候尤其需要注意不要丢失原本可用节点的地址，注意细节，就能写好单链表代码。","source":"_posts/单链表基本操作（下）.md","raw":"---\ntitle: 单链表基本操作（下）\ndate: 2019-11-11 10:18:10\ntags:\ncategories:\n- 数据结构\n- 链表\n---\n\n##### 在单链表基本操作（上）介绍了单链表最基本的操作，这节介绍一些相对进阶的操作。\n\n- 单链表反转：遍历当前链表，首先创造一个临时节点保存当前节点的下一个节点，然后让当前节点的指针指向前一个节点，依次遍历，直到所有的指针反转，代码相对比较简单，时间复杂度是O(n)，空间复杂度是O(n)。\n\n```java\npublic static Node reverse(Node list) {\n    Node cur = list, pre = null;\n    while (cur != null) {\n        Node next = cur.next;\n        cur.next = pre;\n\n        pre = cur;\n        cur = next;\n    }\n    return pre;\n}\n```\n\n- 检测链表是否有环：\n  - 方法一：每遍历一个新的节点，都和之前的所有节点进行比较，如果存在相同的节点，说明有环。这种方式的时间复杂度是O(n*n)；\n  - 方法二：创建一个HashSet集合，用来存储遍历过的节点，每遍历一个新节点，都add进HashSet中，如果HashSet中存在相同的节点，返回false，链表成环。这种方式的时间复杂度是O(n)，空间复杂度是O(n)。\n  - 方法三：采用快慢指针，快指针一次走两步，慢指针一次走一步，如果链表成环，快慢指针总会相遇，数学证明这里就不介绍了，直接上代码，代码的时间复杂度是O(n)，空间复杂度是O(1)。(这里很多快慢指针其实都可以从起点开始，但是因为快慢指针总会相遇，快指针先走一步，会相应的减少方法所用的时长)。\n\n```java\npublic static boolean checkCircle(Node lsit){\n    if(list == null)return false;\n    Node fast = list.next;\n    Node slow = list;\n    while(fast != null && fast.next != null){\n        fast = fast.next.next;\n        slow = slow.next;\n        if(slow == fast){\n            return true;\n        }\n    }\n    return false;\n}\n```\n\n- 求链表的中间节点：技巧和检测链表成环相似，也是使用快慢指针，快指针一次走两步，慢指针一次走一步，当快指针走完整个链表时，慢指针刚好走到链表的中点。代码的时间复杂度是O(n)，空间复杂度是O(1)。\n\n```java\npublic static Node findMiddleNode(Node list){\n    if(list == null)return null;\n    Node slow = list;\n    Node fast = list;\n    while(fast != null && fast.next != null){\n        fast = fast.next.next;\n        slow = slow.next;\n    }\n    return slow;\n}\n```\n\n- 删除链表的倒数第K个节点（K为正数）：\n  - 方法一：先遍历链表求出链表的长度n，然后将问题转化为删除正数第n-K个节点，这种方法遍历了两次链表，时间复杂度是O(n)。\n  - 方法二：采用快慢指针法：快慢指针每次都走一步，快指针先走。先让快指针达到正数第K的位置，然后慢指针从链表头开始出发，当快指针走完整个链表时，慢指针刚好走到n-K的位置，即倒数第K的位置，删除该节点，这种方法的时间复杂度也是O(n)，但是因为只遍历了一次链表，所以要比第一种方法更快。代码如下。\n\n```java\npublic static Node deleteLastKth(Node list, int k){\n    Node fast = list;\n    int i = 1;\n    // fast指针到达正数第k个位置\n    while(fast != null && i<k){\n        fast = fast.next;\n        ++i;\n    }\n    // list为null或k大于链表长度\n    if(fast == null){\n        return list;\n    }\n    \n    Node slow = list;//慢指针，同时也是待删除节点\n    Node pre  = null;//待删除节点的前一个节点\n    // 走过n-k个位置，slow到达倒数第k的位置\n    while(fast != null){\n        fast = fast.next;\n        pre = slow;\n        slow = slow.next;\n    }\n    \n    if(pre==null){//删除头节点\n        list = list.next;\n    }else{//删除其他节点\n        pre.next = pre.next.next;\n    }\n    return list;\n}\n```\n\n- 判断两个链表是否一致：遍历两个链表，然后比较每个位置的值是否一致即可。时间复杂度时O(n)，空间复杂度时O(1)。\n\n```java\npublic static boolean TFResult(Node left,Node right){\n\tNode l = left;\n\tNode r = right;\n\twhile(l!=null && r!=null){\n\t\tif(l.data == r.data){\n\t\t\tl = l.next;\n\t\t\tr = r.next;\n\t\t}else{\n\t\t\tbreak;\n\t\t}\n\t}\n\tif(l==null && r==null)return true;\n\treturn false;\n}\n```\n\n- 两个有序链表合并成一个有序链表：思路就是新创建一个链表，然后遍历比较两个有序链表的每一个节点的值，更小的放入新节点中，最后将剩余的链表中的剩余节点依次放入新链表中即可。时间复杂度O(n)，空间复杂度O(n)。\n\n```java\n//方式一：从两个链表中获得更小的头节点\npublic Node mergeTwoLisrts(Node l1,Node l2){\n    if(l1 == null)return l2;\n    if(l2 == null)return l1;\n    Node head;\n    Node p = l1;\n    Node q = l2;\n    if(l1.data<l2.data){\n        head = l1;\n        p = p.next;\n    }else{\n        head = l2;\n        q = q.next;\n    }\n    Node r = head;\n    while(p != null && q != null){\n        if(p.daa<q.data){\n            r.next = p;\n            p = p.next;\n        }else{\n            r.next = q;\n            q = q.next;\n        }\n    }\n    if(p != null){\n        r..next = p;\n    }else{\n        r.next = q;\n    }\n    return head;\n}\n\n//方式二：考虑到方式一中对于头节点的选择做了大量的判断，所以方式二使用哨兵的方式进行改进\npublic Node mergeTwoLists2(Node l1, Node l2){\n    Node solider = new Node(0);\n    Node p = solider;\n    while(l1 != null && l2 != null){\n        if(l1.data<l2.data){\n            p.next = l1;\n            l1 = l1.next;\n        }else{\n            p.next = l2;\n            l2 = l2.next;\n        }\n        p = p.next;\n    }\n    if(l1 == null){\n        p.next = l2;\n    }else{\n        p.next = l1;\n    }\n    return solider.next;\n}\n```\n\n**总结**：今天介绍了单链表比较常用的一些进阶操作，单链表操作的本质无非就是根据每个节点都保存有下一个节点的内存地址，通过遍历等操作找到要操作的节点，思路不是很难。其中涉及到了一些技巧，包括临时存储后面要用的节点，快慢双指针，哨兵。在改变指针指向的时候尤其需要注意不要丢失原本可用节点的地址，注意细节，就能写好单链表代码。","slug":"单链表基本操作（下）","published":1,"updated":"2020-08-23T11:41:29.723Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cke72eeg1000qdfse1smdahd0","content":"<h5 id=\"在单链表基本操作（上）介绍了单链表最基本的操作，这节介绍一些相对进阶的操作。\"><a href=\"#在单链表基本操作（上）介绍了单链表最基本的操作，这节介绍一些相对进阶的操作。\" class=\"headerlink\" title=\"在单链表基本操作（上）介绍了单链表最基本的操作，这节介绍一些相对进阶的操作。\"></a>在单链表基本操作（上）介绍了单链表最基本的操作，这节介绍一些相对进阶的操作。</h5><ul>\n<li>单链表反转：遍历当前链表，首先创造一个临时节点保存当前节点的下一个节点，然后让当前节点的指针指向前一个节点，依次遍历，直到所有的指针反转，代码相对比较简单，时间复杂度是O(n)，空间复杂度是O(n)。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Node <span class=\"title\">reverse</span><span class=\"params\">(Node list)</span> </span>&#123;</span><br><span class=\"line\">    Node cur = list, pre = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (cur != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        Node next = cur.next;</span><br><span class=\"line\">        cur.next = pre;</span><br><span class=\"line\"></span><br><span class=\"line\">        pre = cur;</span><br><span class=\"line\">        cur = next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> pre;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>检测链表是否有环：<ul>\n<li>方法一：每遍历一个新的节点，都和之前的所有节点进行比较，如果存在相同的节点，说明有环。这种方式的时间复杂度是O(n*n)；</li>\n<li>方法二：创建一个HashSet集合，用来存储遍历过的节点，每遍历一个新节点，都add进HashSet中，如果HashSet中存在相同的节点，返回false，链表成环。这种方式的时间复杂度是O(n)，空间复杂度是O(n)。</li>\n<li>方法三：采用快慢指针，快指针一次走两步，慢指针一次走一步，如果链表成环，快慢指针总会相遇，数学证明这里就不介绍了，直接上代码，代码的时间复杂度是O(n)，空间复杂度是O(1)。(这里很多快慢指针其实都可以从起点开始，但是因为快慢指针总会相遇，快指针先走一步，会相应的减少方法所用的时长)。</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">checkCircle</span><span class=\"params\">(Node lsit)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(list == <span class=\"keyword\">null</span>)<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    Node fast = list.next;</span><br><span class=\"line\">    Node slow = list;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(fast != <span class=\"keyword\">null</span> &amp;&amp; fast.next != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        fast = fast.next.next;</span><br><span class=\"line\">        slow = slow.next;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(slow == fast)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>求链表的中间节点：技巧和检测链表成环相似，也是使用快慢指针，快指针一次走两步，慢指针一次走一步，当快指针走完整个链表时，慢指针刚好走到链表的中点。代码的时间复杂度是O(n)，空间复杂度是O(1)。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Node <span class=\"title\">findMiddleNode</span><span class=\"params\">(Node list)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(list == <span class=\"keyword\">null</span>)<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    Node slow = list;</span><br><span class=\"line\">    Node fast = list;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(fast != <span class=\"keyword\">null</span> &amp;&amp; fast.next != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        fast = fast.next.next;</span><br><span class=\"line\">        slow = slow.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> slow;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>删除链表的倒数第K个节点（K为正数）：<ul>\n<li>方法一：先遍历链表求出链表的长度n，然后将问题转化为删除正数第n-K个节点，这种方法遍历了两次链表，时间复杂度是O(n)。</li>\n<li>方法二：采用快慢指针法：快慢指针每次都走一步，快指针先走。先让快指针达到正数第K的位置，然后慢指针从链表头开始出发，当快指针走完整个链表时，慢指针刚好走到n-K的位置，即倒数第K的位置，删除该节点，这种方法的时间复杂度也是O(n)，但是因为只遍历了一次链表，所以要比第一种方法更快。代码如下。</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Node <span class=\"title\">deleteLastKth</span><span class=\"params\">(Node list, <span class=\"keyword\">int</span> k)</span></span>&#123;</span><br><span class=\"line\">    Node fast = list;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"comment\">// fast指针到达正数第k个位置</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(fast != <span class=\"keyword\">null</span> &amp;&amp; i&lt;k)&#123;</span><br><span class=\"line\">        fast = fast.next;</span><br><span class=\"line\">        ++i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// list为null或k大于链表长度</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(fast == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> list;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    Node slow = list;<span class=\"comment\">//慢指针，同时也是待删除节点</span></span><br><span class=\"line\">    Node pre  = <span class=\"keyword\">null</span>;<span class=\"comment\">//待删除节点的前一个节点</span></span><br><span class=\"line\">    <span class=\"comment\">// 走过n-k个位置，slow到达倒数第k的位置</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(fast != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        fast = fast.next;</span><br><span class=\"line\">        pre = slow;</span><br><span class=\"line\">        slow = slow.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(pre==<span class=\"keyword\">null</span>)&#123;<span class=\"comment\">//删除头节点</span></span><br><span class=\"line\">        list = list.next;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;<span class=\"comment\">//删除其他节点</span></span><br><span class=\"line\">        pre.next = pre.next.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> list;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>判断两个链表是否一致：遍历两个链表，然后比较每个位置的值是否一致即可。时间复杂度时O(n)，空间复杂度时O(1)。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">TFResult</span><span class=\"params\">(Node left,Node right)</span></span>&#123;</span><br><span class=\"line\">\tNode l = left;</span><br><span class=\"line\">\tNode r = right;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(l!=<span class=\"keyword\">null</span> &amp;&amp; r!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(l.data == r.data)&#123;</span><br><span class=\"line\">\t\t\tl = l.next;</span><br><span class=\"line\">\t\t\tr = r.next;</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(l==<span class=\"keyword\">null</span> &amp;&amp; r==<span class=\"keyword\">null</span>)<span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>两个有序链表合并成一个有序链表：思路就是新创建一个链表，然后遍历比较两个有序链表的每一个节点的值，更小的放入新节点中，最后将剩余的链表中的剩余节点依次放入新链表中即可。时间复杂度O(n)，空间复杂度O(n)。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//方式一：从两个链表中获得更小的头节点</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Node <span class=\"title\">mergeTwoLisrts</span><span class=\"params\">(Node l1,Node l2)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l1 == <span class=\"keyword\">null</span>)<span class=\"keyword\">return</span> l2;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l2 == <span class=\"keyword\">null</span>)<span class=\"keyword\">return</span> l1;</span><br><span class=\"line\">    Node head;</span><br><span class=\"line\">    Node p = l1;</span><br><span class=\"line\">    Node q = l2;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l1.data&lt;l2.data)&#123;</span><br><span class=\"line\">        head = l1;</span><br><span class=\"line\">        p = p.next;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        head = l2;</span><br><span class=\"line\">        q = q.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Node r = head;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(p != <span class=\"keyword\">null</span> &amp;&amp; q != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(p.daa&lt;q.data)&#123;</span><br><span class=\"line\">            r.next = p;</span><br><span class=\"line\">            p = p.next;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            r.next = q;</span><br><span class=\"line\">            q = q.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(p != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        r..next = p;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        r.next = q;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//方式二：考虑到方式一中对于头节点的选择做了大量的判断，所以方式二使用哨兵的方式进行改进</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Node <span class=\"title\">mergeTwoLists2</span><span class=\"params\">(Node l1, Node l2)</span></span>&#123;</span><br><span class=\"line\">    Node solider = <span class=\"keyword\">new</span> Node(<span class=\"number\">0</span>);</span><br><span class=\"line\">    Node p = solider;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(l1 != <span class=\"keyword\">null</span> &amp;&amp; l2 != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(l1.data&lt;l2.data)&#123;</span><br><span class=\"line\">            p.next = l1;</span><br><span class=\"line\">            l1 = l1.next;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            p.next = l2;</span><br><span class=\"line\">            l2 = l2.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        p = p.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l1 == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        p.next = l2;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        p.next = l1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> solider.next;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>总结</strong>：今天介绍了单链表比较常用的一些进阶操作，单链表操作的本质无非就是根据每个节点都保存有下一个节点的内存地址，通过遍历等操作找到要操作的节点，思路不是很难。其中涉及到了一些技巧，包括临时存储后面要用的节点，快慢双指针，哨兵。在改变指针指向的时候尤其需要注意不要丢失原本可用节点的地址，注意细节，就能写好单链表代码。</p>\n","site":{"data":{}},"excerpt":"","more":"<h5 id=\"在单链表基本操作（上）介绍了单链表最基本的操作，这节介绍一些相对进阶的操作。\"><a href=\"#在单链表基本操作（上）介绍了单链表最基本的操作，这节介绍一些相对进阶的操作。\" class=\"headerlink\" title=\"在单链表基本操作（上）介绍了单链表最基本的操作，这节介绍一些相对进阶的操作。\"></a>在单链表基本操作（上）介绍了单链表最基本的操作，这节介绍一些相对进阶的操作。</h5><ul>\n<li>单链表反转：遍历当前链表，首先创造一个临时节点保存当前节点的下一个节点，然后让当前节点的指针指向前一个节点，依次遍历，直到所有的指针反转，代码相对比较简单，时间复杂度是O(n)，空间复杂度是O(n)。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Node <span class=\"title\">reverse</span><span class=\"params\">(Node list)</span> </span>&#123;</span><br><span class=\"line\">    Node cur = list, pre = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (cur != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        Node next = cur.next;</span><br><span class=\"line\">        cur.next = pre;</span><br><span class=\"line\"></span><br><span class=\"line\">        pre = cur;</span><br><span class=\"line\">        cur = next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> pre;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>检测链表是否有环：<ul>\n<li>方法一：每遍历一个新的节点，都和之前的所有节点进行比较，如果存在相同的节点，说明有环。这种方式的时间复杂度是O(n*n)；</li>\n<li>方法二：创建一个HashSet集合，用来存储遍历过的节点，每遍历一个新节点，都add进HashSet中，如果HashSet中存在相同的节点，返回false，链表成环。这种方式的时间复杂度是O(n)，空间复杂度是O(n)。</li>\n<li>方法三：采用快慢指针，快指针一次走两步，慢指针一次走一步，如果链表成环，快慢指针总会相遇，数学证明这里就不介绍了，直接上代码，代码的时间复杂度是O(n)，空间复杂度是O(1)。(这里很多快慢指针其实都可以从起点开始，但是因为快慢指针总会相遇，快指针先走一步，会相应的减少方法所用的时长)。</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">checkCircle</span><span class=\"params\">(Node lsit)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(list == <span class=\"keyword\">null</span>)<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    Node fast = list.next;</span><br><span class=\"line\">    Node slow = list;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(fast != <span class=\"keyword\">null</span> &amp;&amp; fast.next != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        fast = fast.next.next;</span><br><span class=\"line\">        slow = slow.next;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(slow == fast)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>求链表的中间节点：技巧和检测链表成环相似，也是使用快慢指针，快指针一次走两步，慢指针一次走一步，当快指针走完整个链表时，慢指针刚好走到链表的中点。代码的时间复杂度是O(n)，空间复杂度是O(1)。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Node <span class=\"title\">findMiddleNode</span><span class=\"params\">(Node list)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(list == <span class=\"keyword\">null</span>)<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    Node slow = list;</span><br><span class=\"line\">    Node fast = list;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(fast != <span class=\"keyword\">null</span> &amp;&amp; fast.next != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        fast = fast.next.next;</span><br><span class=\"line\">        slow = slow.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> slow;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>删除链表的倒数第K个节点（K为正数）：<ul>\n<li>方法一：先遍历链表求出链表的长度n，然后将问题转化为删除正数第n-K个节点，这种方法遍历了两次链表，时间复杂度是O(n)。</li>\n<li>方法二：采用快慢指针法：快慢指针每次都走一步，快指针先走。先让快指针达到正数第K的位置，然后慢指针从链表头开始出发，当快指针走完整个链表时，慢指针刚好走到n-K的位置，即倒数第K的位置，删除该节点，这种方法的时间复杂度也是O(n)，但是因为只遍历了一次链表，所以要比第一种方法更快。代码如下。</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Node <span class=\"title\">deleteLastKth</span><span class=\"params\">(Node list, <span class=\"keyword\">int</span> k)</span></span>&#123;</span><br><span class=\"line\">    Node fast = list;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"comment\">// fast指针到达正数第k个位置</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(fast != <span class=\"keyword\">null</span> &amp;&amp; i&lt;k)&#123;</span><br><span class=\"line\">        fast = fast.next;</span><br><span class=\"line\">        ++i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// list为null或k大于链表长度</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(fast == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> list;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    Node slow = list;<span class=\"comment\">//慢指针，同时也是待删除节点</span></span><br><span class=\"line\">    Node pre  = <span class=\"keyword\">null</span>;<span class=\"comment\">//待删除节点的前一个节点</span></span><br><span class=\"line\">    <span class=\"comment\">// 走过n-k个位置，slow到达倒数第k的位置</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(fast != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        fast = fast.next;</span><br><span class=\"line\">        pre = slow;</span><br><span class=\"line\">        slow = slow.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(pre==<span class=\"keyword\">null</span>)&#123;<span class=\"comment\">//删除头节点</span></span><br><span class=\"line\">        list = list.next;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;<span class=\"comment\">//删除其他节点</span></span><br><span class=\"line\">        pre.next = pre.next.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> list;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>判断两个链表是否一致：遍历两个链表，然后比较每个位置的值是否一致即可。时间复杂度时O(n)，空间复杂度时O(1)。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">TFResult</span><span class=\"params\">(Node left,Node right)</span></span>&#123;</span><br><span class=\"line\">\tNode l = left;</span><br><span class=\"line\">\tNode r = right;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(l!=<span class=\"keyword\">null</span> &amp;&amp; r!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(l.data == r.data)&#123;</span><br><span class=\"line\">\t\t\tl = l.next;</span><br><span class=\"line\">\t\t\tr = r.next;</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(l==<span class=\"keyword\">null</span> &amp;&amp; r==<span class=\"keyword\">null</span>)<span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>两个有序链表合并成一个有序链表：思路就是新创建一个链表，然后遍历比较两个有序链表的每一个节点的值，更小的放入新节点中，最后将剩余的链表中的剩余节点依次放入新链表中即可。时间复杂度O(n)，空间复杂度O(n)。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//方式一：从两个链表中获得更小的头节点</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Node <span class=\"title\">mergeTwoLisrts</span><span class=\"params\">(Node l1,Node l2)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l1 == <span class=\"keyword\">null</span>)<span class=\"keyword\">return</span> l2;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l2 == <span class=\"keyword\">null</span>)<span class=\"keyword\">return</span> l1;</span><br><span class=\"line\">    Node head;</span><br><span class=\"line\">    Node p = l1;</span><br><span class=\"line\">    Node q = l2;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l1.data&lt;l2.data)&#123;</span><br><span class=\"line\">        head = l1;</span><br><span class=\"line\">        p = p.next;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        head = l2;</span><br><span class=\"line\">        q = q.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Node r = head;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(p != <span class=\"keyword\">null</span> &amp;&amp; q != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(p.daa&lt;q.data)&#123;</span><br><span class=\"line\">            r.next = p;</span><br><span class=\"line\">            p = p.next;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            r.next = q;</span><br><span class=\"line\">            q = q.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(p != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        r..next = p;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        r.next = q;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//方式二：考虑到方式一中对于头节点的选择做了大量的判断，所以方式二使用哨兵的方式进行改进</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Node <span class=\"title\">mergeTwoLists2</span><span class=\"params\">(Node l1, Node l2)</span></span>&#123;</span><br><span class=\"line\">    Node solider = <span class=\"keyword\">new</span> Node(<span class=\"number\">0</span>);</span><br><span class=\"line\">    Node p = solider;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(l1 != <span class=\"keyword\">null</span> &amp;&amp; l2 != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(l1.data&lt;l2.data)&#123;</span><br><span class=\"line\">            p.next = l1;</span><br><span class=\"line\">            l1 = l1.next;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            p.next = l2;</span><br><span class=\"line\">            l2 = l2.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        p = p.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l1 == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        p.next = l2;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        p.next = l1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> solider.next;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>总结</strong>：今天介绍了单链表比较常用的一些进阶操作，单链表操作的本质无非就是根据每个节点都保存有下一个节点的内存地址，通过遍历等操作找到要操作的节点，思路不是很难。其中涉及到了一些技巧，包括临时存储后面要用的节点，快慢双指针，哨兵。在改变指针指向的时候尤其需要注意不要丢失原本可用节点的地址，注意细节，就能写好单链表代码。</p>\n"},{"title":"单链表基本操作（上）","date":"2019-11-10T06:02:07.000Z","_content":"\n##### 链表作为最基本的两大数据结构之一，其重要性不言而喻，今天带大家一起回顾一下单链表最基本的一些操作。\n\n- 节点的定义：链表的基础是单个节点，首先来看节点的代码，比较简单，直接列出。\n\n```java\npublic static class Node {\n    private int data;\n    private Node next;\n\n    public Node(int data, Node next) {\n        this.data = data;\n        this.next = next;\n    }\n\n    public Node(int data){\n        this.data = data;\n    }\n\n    public int getData() {\n        return data;\n    }\n}\n```\n\n- 链表的打印：思路也比较简单，就是从头节点开始遍历并打印。\n\n```java\n// list为头节点\npublic static void printAll(Node list) {\n    Node p = list;\n    while (p != null) {\n        System.out.println(p.data + \" \");\n        p = p.next;\n    }\n    System.out.println();\n}\n```\n\n- 创建一个新节点：这里单独列出，目的是后续做链表添加节点等操作时减少重复代码。\n\n```java\npublic static Node createNode(int value) {\n        return new Node(value, null);\n}\n```\n\n- 尾插：尾插的思路比较简单，就是让原链表的最后一个节点的next指针指向待插入节点即可。将指定的值或节点插入链表尾部，插入值和插入节点最终都会调用插入节点，代码如下。\n\n```java\n// 将指定的值插入链表尾部\npublic static void insertTailByValue(Node list, int value) {\n    Node newNode = createNode(value);\n    // 调用将指定的节点插入链表尾部的方法\n    insertTailByNode(list,newNode);\n}\n\n// 将指定的节点插入链表尾部\npublic static void insertTailByNode(Node list,Node p) {\n    if (list == null) {\n            list = p;\n    } else {\n        Node q = list;\n        while (q.next != null) {\n            q = q.next;\n        }\n        p.next = list.next;\n        list.next = p;\n    }\n}\n```\n\n- 头插：将指定的值或节点插入链表头部，插入值和插入节点最终都会调用插入节点，代码如下。\n\n```java\n// 将指定的值插入链表头部\npublic static void insertHeadByValue(Node list, int value) {\n    Node newNode = createNode(value);\n    // 调用将指定的节点插入链表头部的方法\n    insertHeadByNode(list, newNode);\n}\n\n// 将指定的节点插入链表头部\npublic static void insertHeadByNode(Node list, Node p) {\n    if (list == null) {\n        list = p;\n    } else {\n        p.next = list;\n        list = p;\n    }\n}\n```\n\n- 查找：查找的思路也比较简单，根据链表的特性，从头节点往后遍历，查到就返回。\n\n```java\n//根据value查Node\npublic static Node findByValue(Node list, int value) {\n    Node p = list;\n    while (p != null && p.data != value) {\n        p = p.next;\n    }\n    return p;\n}\n\n//根据index查Node\npublic static Node findByIndex(Node list, int index) {\n    Node p = list;\n    int pos = 0;\n    while (p != null && pos != index) {\n        ++pos;\n        p = p.next;\n    }\n    return p;\n}\n```\n\n- 根据指定的值或指定的节点删除指定的节点：基本思路是遍历链表，找到待删除节点的前一个节点，让待删除节点的前一个节点的next指针值向它的下一个节点，需要注意边界条件的处理，代码如下。\n\n```java\n//根据value删除节点\npublic static void deleteByValue(Node list, int value) {\n    if (list == null)\n        return;\n    Node p = list;\n    Node q = null;\n    while (p != null && p.data != value) {\n        q = p;\n        p = p.next;\n    }\n    if (p == null)\n        return;\n    if (q == null) {\n        list = list.next;\n    } else {\n        q.next = q.next.next;\n    }\n}\n\n//根据Node删除节点\npublic static void deleteByNode(Node list, Node p) {\n    if (list == null || p == null)\n        return;\n    if (list == p) {\n        list = list.next;\n        return;\n    }\n\n    Node q = list;\n    while (q != null && q.next != p) {\n        q = q.next;\n    }\n    if (q == null)\n        return;\n    q.next = q.next.next;\n}\n```\n\n**总结**：单链表的基本操作理解起来还是比较容易的，不过链表代码涉及很多指针的移动以及边界条件的判断，要写出free bug的链表代码需要多写多练。单链表还有一些稍微进阶的代码，在单链表基本操（下）篇进行介绍。\n\n","source":"_posts/单链表基本操作（上）.md","raw":"---\ntitle: 单链表基本操作（上）\ndate: 2019-11-10 14:02:07\ntags:\ncategories:\n- 数据结构\n- 链表\n---\n\n##### 链表作为最基本的两大数据结构之一，其重要性不言而喻，今天带大家一起回顾一下单链表最基本的一些操作。\n\n- 节点的定义：链表的基础是单个节点，首先来看节点的代码，比较简单，直接列出。\n\n```java\npublic static class Node {\n    private int data;\n    private Node next;\n\n    public Node(int data, Node next) {\n        this.data = data;\n        this.next = next;\n    }\n\n    public Node(int data){\n        this.data = data;\n    }\n\n    public int getData() {\n        return data;\n    }\n}\n```\n\n- 链表的打印：思路也比较简单，就是从头节点开始遍历并打印。\n\n```java\n// list为头节点\npublic static void printAll(Node list) {\n    Node p = list;\n    while (p != null) {\n        System.out.println(p.data + \" \");\n        p = p.next;\n    }\n    System.out.println();\n}\n```\n\n- 创建一个新节点：这里单独列出，目的是后续做链表添加节点等操作时减少重复代码。\n\n```java\npublic static Node createNode(int value) {\n        return new Node(value, null);\n}\n```\n\n- 尾插：尾插的思路比较简单，就是让原链表的最后一个节点的next指针指向待插入节点即可。将指定的值或节点插入链表尾部，插入值和插入节点最终都会调用插入节点，代码如下。\n\n```java\n// 将指定的值插入链表尾部\npublic static void insertTailByValue(Node list, int value) {\n    Node newNode = createNode(value);\n    // 调用将指定的节点插入链表尾部的方法\n    insertTailByNode(list,newNode);\n}\n\n// 将指定的节点插入链表尾部\npublic static void insertTailByNode(Node list,Node p) {\n    if (list == null) {\n            list = p;\n    } else {\n        Node q = list;\n        while (q.next != null) {\n            q = q.next;\n        }\n        p.next = list.next;\n        list.next = p;\n    }\n}\n```\n\n- 头插：将指定的值或节点插入链表头部，插入值和插入节点最终都会调用插入节点，代码如下。\n\n```java\n// 将指定的值插入链表头部\npublic static void insertHeadByValue(Node list, int value) {\n    Node newNode = createNode(value);\n    // 调用将指定的节点插入链表头部的方法\n    insertHeadByNode(list, newNode);\n}\n\n// 将指定的节点插入链表头部\npublic static void insertHeadByNode(Node list, Node p) {\n    if (list == null) {\n        list = p;\n    } else {\n        p.next = list;\n        list = p;\n    }\n}\n```\n\n- 查找：查找的思路也比较简单，根据链表的特性，从头节点往后遍历，查到就返回。\n\n```java\n//根据value查Node\npublic static Node findByValue(Node list, int value) {\n    Node p = list;\n    while (p != null && p.data != value) {\n        p = p.next;\n    }\n    return p;\n}\n\n//根据index查Node\npublic static Node findByIndex(Node list, int index) {\n    Node p = list;\n    int pos = 0;\n    while (p != null && pos != index) {\n        ++pos;\n        p = p.next;\n    }\n    return p;\n}\n```\n\n- 根据指定的值或指定的节点删除指定的节点：基本思路是遍历链表，找到待删除节点的前一个节点，让待删除节点的前一个节点的next指针值向它的下一个节点，需要注意边界条件的处理，代码如下。\n\n```java\n//根据value删除节点\npublic static void deleteByValue(Node list, int value) {\n    if (list == null)\n        return;\n    Node p = list;\n    Node q = null;\n    while (p != null && p.data != value) {\n        q = p;\n        p = p.next;\n    }\n    if (p == null)\n        return;\n    if (q == null) {\n        list = list.next;\n    } else {\n        q.next = q.next.next;\n    }\n}\n\n//根据Node删除节点\npublic static void deleteByNode(Node list, Node p) {\n    if (list == null || p == null)\n        return;\n    if (list == p) {\n        list = list.next;\n        return;\n    }\n\n    Node q = list;\n    while (q != null && q.next != p) {\n        q = q.next;\n    }\n    if (q == null)\n        return;\n    q.next = q.next.next;\n}\n```\n\n**总结**：单链表的基本操作理解起来还是比较容易的，不过链表代码涉及很多指针的移动以及边界条件的判断，要写出free bug的链表代码需要多写多练。单链表还有一些稍微进阶的代码，在单链表基本操（下）篇进行介绍。\n\n","slug":"单链表基本操作（上）","published":1,"updated":"2020-08-23T11:40:51.055Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cke72eeg2000tdfse6tfraack","content":"<h5 id=\"链表作为最基本的两大数据结构之一，其重要性不言而喻，今天带大家一起回顾一下单链表最基本的一些操作。\"><a href=\"#链表作为最基本的两大数据结构之一，其重要性不言而喻，今天带大家一起回顾一下单链表最基本的一些操作。\" class=\"headerlink\" title=\"链表作为最基本的两大数据结构之一，其重要性不言而喻，今天带大家一起回顾一下单链表最基本的一些操作。\"></a>链表作为最基本的两大数据结构之一，其重要性不言而喻，今天带大家一起回顾一下单链表最基本的一些操作。</h5><ul>\n<li>节点的定义：链表的基础是单个节点，首先来看节点的代码，比较简单，直接列出。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> data;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Node next;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Node</span><span class=\"params\">(<span class=\"keyword\">int</span> data, Node next)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.data = data;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.next = next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Node</span><span class=\"params\">(<span class=\"keyword\">int</span> data)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.data = data;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getData</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> data;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>链表的打印：思路也比较简单，就是从头节点开始遍历并打印。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// list为头节点</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">printAll</span><span class=\"params\">(Node list)</span> </span>&#123;</span><br><span class=\"line\">    Node p = list;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (p != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        System.out.println(p.data + <span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">        p = p.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    System.out.println();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>创建一个新节点：这里单独列出，目的是后续做链表添加节点等操作时减少重复代码。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Node <span class=\"title\">createNode</span><span class=\"params\">(<span class=\"keyword\">int</span> value)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Node(value, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>尾插：尾插的思路比较简单，就是让原链表的最后一个节点的next指针指向待插入节点即可。将指定的值或节点插入链表尾部，插入值和插入节点最终都会调用插入节点，代码如下。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 将指定的值插入链表尾部</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">insertTailByValue</span><span class=\"params\">(Node list, <span class=\"keyword\">int</span> value)</span> </span>&#123;</span><br><span class=\"line\">    Node newNode = createNode(value);</span><br><span class=\"line\">    <span class=\"comment\">// 调用将指定的节点插入链表尾部的方法</span></span><br><span class=\"line\">    insertTailByNode(list,newNode);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将指定的节点插入链表尾部</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">insertTailByNode</span><span class=\"params\">(Node list,Node p)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (list == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            list = p;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        Node q = list;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (q.next != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            q = q.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        p.next = list.next;</span><br><span class=\"line\">        list.next = p;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>头插：将指定的值或节点插入链表头部，插入值和插入节点最终都会调用插入节点，代码如下。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 将指定的值插入链表头部</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">insertHeadByValue</span><span class=\"params\">(Node list, <span class=\"keyword\">int</span> value)</span> </span>&#123;</span><br><span class=\"line\">    Node newNode = createNode(value);</span><br><span class=\"line\">    <span class=\"comment\">// 调用将指定的节点插入链表头部的方法</span></span><br><span class=\"line\">    insertHeadByNode(list, newNode);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将指定的节点插入链表头部</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">insertHeadByNode</span><span class=\"params\">(Node list, Node p)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (list == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        list = p;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        p.next = list;</span><br><span class=\"line\">        list = p;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>查找：查找的思路也比较简单，根据链表的特性，从头节点往后遍历，查到就返回。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//根据value查Node</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Node <span class=\"title\">findByValue</span><span class=\"params\">(Node list, <span class=\"keyword\">int</span> value)</span> </span>&#123;</span><br><span class=\"line\">    Node p = list;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (p != <span class=\"keyword\">null</span> &amp;&amp; p.data != value) &#123;</span><br><span class=\"line\">        p = p.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//根据index查Node</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Node <span class=\"title\">findByIndex</span><span class=\"params\">(Node list, <span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">    Node p = list;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> pos = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (p != <span class=\"keyword\">null</span> &amp;&amp; pos != index) &#123;</span><br><span class=\"line\">        ++pos;</span><br><span class=\"line\">        p = p.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>根据指定的值或指定的节点删除指定的节点：基本思路是遍历链表，找到待删除节点的前一个节点，让待删除节点的前一个节点的next指针值向它的下一个节点，需要注意边界条件的处理，代码如下。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//根据value删除节点</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">deleteByValue</span><span class=\"params\">(Node list, <span class=\"keyword\">int</span> value)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (list == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    Node p = list;</span><br><span class=\"line\">    Node q = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (p != <span class=\"keyword\">null</span> &amp;&amp; p.data != value) &#123;</span><br><span class=\"line\">        q = p;</span><br><span class=\"line\">        p = p.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (p == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (q == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        list = list.next;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        q.next = q.next.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//根据Node删除节点</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">deleteByNode</span><span class=\"params\">(Node list, Node p)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (list == <span class=\"keyword\">null</span> || p == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (list == p) &#123;</span><br><span class=\"line\">        list = list.next;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    Node q = list;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (q != <span class=\"keyword\">null</span> &amp;&amp; q.next != p) &#123;</span><br><span class=\"line\">        q = q.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (q == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    q.next = q.next.next;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>总结</strong>：单链表的基本操作理解起来还是比较容易的，不过链表代码涉及很多指针的移动以及边界条件的判断，要写出free bug的链表代码需要多写多练。单链表还有一些稍微进阶的代码，在单链表基本操（下）篇进行介绍。</p>\n","site":{"data":{}},"excerpt":"","more":"<h5 id=\"链表作为最基本的两大数据结构之一，其重要性不言而喻，今天带大家一起回顾一下单链表最基本的一些操作。\"><a href=\"#链表作为最基本的两大数据结构之一，其重要性不言而喻，今天带大家一起回顾一下单链表最基本的一些操作。\" class=\"headerlink\" title=\"链表作为最基本的两大数据结构之一，其重要性不言而喻，今天带大家一起回顾一下单链表最基本的一些操作。\"></a>链表作为最基本的两大数据结构之一，其重要性不言而喻，今天带大家一起回顾一下单链表最基本的一些操作。</h5><ul>\n<li>节点的定义：链表的基础是单个节点，首先来看节点的代码，比较简单，直接列出。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> data;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Node next;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Node</span><span class=\"params\">(<span class=\"keyword\">int</span> data, Node next)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.data = data;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.next = next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Node</span><span class=\"params\">(<span class=\"keyword\">int</span> data)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.data = data;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getData</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> data;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>链表的打印：思路也比较简单，就是从头节点开始遍历并打印。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// list为头节点</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">printAll</span><span class=\"params\">(Node list)</span> </span>&#123;</span><br><span class=\"line\">    Node p = list;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (p != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        System.out.println(p.data + <span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">        p = p.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    System.out.println();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>创建一个新节点：这里单独列出，目的是后续做链表添加节点等操作时减少重复代码。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Node <span class=\"title\">createNode</span><span class=\"params\">(<span class=\"keyword\">int</span> value)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Node(value, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>尾插：尾插的思路比较简单，就是让原链表的最后一个节点的next指针指向待插入节点即可。将指定的值或节点插入链表尾部，插入值和插入节点最终都会调用插入节点，代码如下。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 将指定的值插入链表尾部</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">insertTailByValue</span><span class=\"params\">(Node list, <span class=\"keyword\">int</span> value)</span> </span>&#123;</span><br><span class=\"line\">    Node newNode = createNode(value);</span><br><span class=\"line\">    <span class=\"comment\">// 调用将指定的节点插入链表尾部的方法</span></span><br><span class=\"line\">    insertTailByNode(list,newNode);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将指定的节点插入链表尾部</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">insertTailByNode</span><span class=\"params\">(Node list,Node p)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (list == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            list = p;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        Node q = list;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (q.next != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            q = q.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        p.next = list.next;</span><br><span class=\"line\">        list.next = p;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>头插：将指定的值或节点插入链表头部，插入值和插入节点最终都会调用插入节点，代码如下。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 将指定的值插入链表头部</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">insertHeadByValue</span><span class=\"params\">(Node list, <span class=\"keyword\">int</span> value)</span> </span>&#123;</span><br><span class=\"line\">    Node newNode = createNode(value);</span><br><span class=\"line\">    <span class=\"comment\">// 调用将指定的节点插入链表头部的方法</span></span><br><span class=\"line\">    insertHeadByNode(list, newNode);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将指定的节点插入链表头部</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">insertHeadByNode</span><span class=\"params\">(Node list, Node p)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (list == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        list = p;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        p.next = list;</span><br><span class=\"line\">        list = p;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>查找：查找的思路也比较简单，根据链表的特性，从头节点往后遍历，查到就返回。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//根据value查Node</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Node <span class=\"title\">findByValue</span><span class=\"params\">(Node list, <span class=\"keyword\">int</span> value)</span> </span>&#123;</span><br><span class=\"line\">    Node p = list;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (p != <span class=\"keyword\">null</span> &amp;&amp; p.data != value) &#123;</span><br><span class=\"line\">        p = p.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//根据index查Node</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Node <span class=\"title\">findByIndex</span><span class=\"params\">(Node list, <span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">    Node p = list;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> pos = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (p != <span class=\"keyword\">null</span> &amp;&amp; pos != index) &#123;</span><br><span class=\"line\">        ++pos;</span><br><span class=\"line\">        p = p.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>根据指定的值或指定的节点删除指定的节点：基本思路是遍历链表，找到待删除节点的前一个节点，让待删除节点的前一个节点的next指针值向它的下一个节点，需要注意边界条件的处理，代码如下。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//根据value删除节点</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">deleteByValue</span><span class=\"params\">(Node list, <span class=\"keyword\">int</span> value)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (list == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    Node p = list;</span><br><span class=\"line\">    Node q = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (p != <span class=\"keyword\">null</span> &amp;&amp; p.data != value) &#123;</span><br><span class=\"line\">        q = p;</span><br><span class=\"line\">        p = p.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (p == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (q == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        list = list.next;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        q.next = q.next.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//根据Node删除节点</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">deleteByNode</span><span class=\"params\">(Node list, Node p)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (list == <span class=\"keyword\">null</span> || p == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (list == p) &#123;</span><br><span class=\"line\">        list = list.next;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    Node q = list;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (q != <span class=\"keyword\">null</span> &amp;&amp; q.next != p) &#123;</span><br><span class=\"line\">        q = q.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (q == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    q.next = q.next.next;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>总结</strong>：单链表的基本操作理解起来还是比较容易的，不过链表代码涉及很多指针的移动以及边界条件的判断，要写出free bug的链表代码需要多写多练。单链表还有一些稍微进阶的代码，在单链表基本操（下）篇进行介绍。</p>\n"},{"title":"支付系统对于异步通知的处理","date":"2019-09-08T23:53:59.000Z","draft":true,"_content":"\n##### 1. 传统做法\n\n调用第三方支付时，支付成功后通过第三方回调来获取最终的支付结果，之后处理支付成功的业务。\n##### 2. 如果接不到异步通知怎么办？\n- 一般来说，第三方支付，比如支付宝，新浪支付都会提供相应的交易查询接口，用来对该笔订单的最终结果进行查询。所以，部分企业采用发起交易之后，调用第三方查询来主动查询支付结果，彻底抛弃异步通知机制，保证不会因为网络等原因丢失交易结果。\n- 但是，这种方式也存在一些问题：调用第三支付查询接口时，交易不一定结束，查询到的可能是不确定的结果，比如交易已经在第三方创建成功，但是是否交易成功的结果还没有拿到。针对这种情况，有些企业会采取创建交易后，线程睡眠1秒或2秒进行查询，但这种方式势必会导致用户不必要的等待，降低用户体验，并且，到底等几秒才是最合理的也没有定论。并且，大多数第三方支付的交易查询接口所返回的参数一般都比异步通知的参数要少，比如新浪支付在主动调用交易查询时，无法获得内部交易流失号等，这样会导致获取参数不全的问题。\n- 所以，作者采用以异步通知为主，以定时任务运行交易查询作为异步通知的辅助措施。\n##### 3. 具体操作\n在异步通知中处理所有的业务逻辑，包括对于必要参数的更新，以及通知订单或其他业务系统做后续的业务操作。使用分布式定时任务调度框架，添加定时查询任务，查询商户系统的流水表，对未拿到异步通知的订单主动去调用第三方查询，拿到最终的结果。作者这里使用的是XXL-JOB分布式任务调度平台。\n\n##### 4.注意事项\n- 定时任务设置多久一次，查询哪个时间段的订单？ <br><br>\n我们需要以异步通知的结果为准，所以定时任务查询的订单需要查询创建时间在当前时间一段时间之前的订单，仅作为没接到异步通知的保护措施。作者这里设置的是每两分钟一次定时任务，查询当前时间1分钟前到6分钟前的订单，这样可以保证每个待查询订单都有两次机会被定时任务保护，防止查询时仍然是待支付等不确定结果。<br><br>\n- 定时任务中也进行业务逻辑，是否会和异步通知中重复，导致业务逻辑执行两次，比如两次发货等？\n<br><br>\n可以给异步处理和定时查询的具体逻辑中加锁，作者采用的是mysql更新乐观锁，通过唯一请求号更新具体的交易状态，以update结果是否为1作为条件进行后续逻辑。","source":"_posts/支付系统对于异步通知的处理.md","raw":"---\ntitle: \"支付系统对于异步通知的处理\"\ndate: 2019-09-09T15:53:59+08:00\ndraft: true\ncategories:\n- 系统设计\n---\n\n##### 1. 传统做法\n\n调用第三方支付时，支付成功后通过第三方回调来获取最终的支付结果，之后处理支付成功的业务。\n##### 2. 如果接不到异步通知怎么办？\n- 一般来说，第三方支付，比如支付宝，新浪支付都会提供相应的交易查询接口，用来对该笔订单的最终结果进行查询。所以，部分企业采用发起交易之后，调用第三方查询来主动查询支付结果，彻底抛弃异步通知机制，保证不会因为网络等原因丢失交易结果。\n- 但是，这种方式也存在一些问题：调用第三支付查询接口时，交易不一定结束，查询到的可能是不确定的结果，比如交易已经在第三方创建成功，但是是否交易成功的结果还没有拿到。针对这种情况，有些企业会采取创建交易后，线程睡眠1秒或2秒进行查询，但这种方式势必会导致用户不必要的等待，降低用户体验，并且，到底等几秒才是最合理的也没有定论。并且，大多数第三方支付的交易查询接口所返回的参数一般都比异步通知的参数要少，比如新浪支付在主动调用交易查询时，无法获得内部交易流失号等，这样会导致获取参数不全的问题。\n- 所以，作者采用以异步通知为主，以定时任务运行交易查询作为异步通知的辅助措施。\n##### 3. 具体操作\n在异步通知中处理所有的业务逻辑，包括对于必要参数的更新，以及通知订单或其他业务系统做后续的业务操作。使用分布式定时任务调度框架，添加定时查询任务，查询商户系统的流水表，对未拿到异步通知的订单主动去调用第三方查询，拿到最终的结果。作者这里使用的是XXL-JOB分布式任务调度平台。\n\n##### 4.注意事项\n- 定时任务设置多久一次，查询哪个时间段的订单？ <br><br>\n我们需要以异步通知的结果为准，所以定时任务查询的订单需要查询创建时间在当前时间一段时间之前的订单，仅作为没接到异步通知的保护措施。作者这里设置的是每两分钟一次定时任务，查询当前时间1分钟前到6分钟前的订单，这样可以保证每个待查询订单都有两次机会被定时任务保护，防止查询时仍然是待支付等不确定结果。<br><br>\n- 定时任务中也进行业务逻辑，是否会和异步通知中重复，导致业务逻辑执行两次，比如两次发货等？\n<br><br>\n可以给异步处理和定时查询的具体逻辑中加锁，作者采用的是mysql更新乐观锁，通过唯一请求号更新具体的交易状态，以update结果是否为1作为条件进行后续逻辑。","slug":"支付系统对于异步通知的处理","published":1,"updated":"2020-08-23T11:46:45.383Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cke72eeg2000udfse5w84gsyj","content":"<h5 id=\"1-传统做法\"><a href=\"#1-传统做法\" class=\"headerlink\" title=\"1. 传统做法\"></a>1. 传统做法</h5><p>调用第三方支付时，支付成功后通过第三方回调来获取最终的支付结果，之后处理支付成功的业务。</p>\n<h5 id=\"2-如果接不到异步通知怎么办？\"><a href=\"#2-如果接不到异步通知怎么办？\" class=\"headerlink\" title=\"2. 如果接不到异步通知怎么办？\"></a>2. 如果接不到异步通知怎么办？</h5><ul>\n<li>一般来说，第三方支付，比如支付宝，新浪支付都会提供相应的交易查询接口，用来对该笔订单的最终结果进行查询。所以，部分企业采用发起交易之后，调用第三方查询来主动查询支付结果，彻底抛弃异步通知机制，保证不会因为网络等原因丢失交易结果。</li>\n<li>但是，这种方式也存在一些问题：调用第三支付查询接口时，交易不一定结束，查询到的可能是不确定的结果，比如交易已经在第三方创建成功，但是是否交易成功的结果还没有拿到。针对这种情况，有些企业会采取创建交易后，线程睡眠1秒或2秒进行查询，但这种方式势必会导致用户不必要的等待，降低用户体验，并且，到底等几秒才是最合理的也没有定论。并且，大多数第三方支付的交易查询接口所返回的参数一般都比异步通知的参数要少，比如新浪支付在主动调用交易查询时，无法获得内部交易流失号等，这样会导致获取参数不全的问题。</li>\n<li>所以，作者采用以异步通知为主，以定时任务运行交易查询作为异步通知的辅助措施。<h5 id=\"3-具体操作\"><a href=\"#3-具体操作\" class=\"headerlink\" title=\"3. 具体操作\"></a>3. 具体操作</h5>在异步通知中处理所有的业务逻辑，包括对于必要参数的更新，以及通知订单或其他业务系统做后续的业务操作。使用分布式定时任务调度框架，添加定时查询任务，查询商户系统的流水表，对未拿到异步通知的订单主动去调用第三方查询，拿到最终的结果。作者这里使用的是XXL-JOB分布式任务调度平台。</li>\n</ul>\n<h5 id=\"4-注意事项\"><a href=\"#4-注意事项\" class=\"headerlink\" title=\"4.注意事项\"></a>4.注意事项</h5><ul>\n<li>定时任务设置多久一次，查询哪个时间段的订单？ <br><br><br>我们需要以异步通知的结果为准，所以定时任务查询的订单需要查询创建时间在当前时间一段时间之前的订单，仅作为没接到异步通知的保护措施。作者这里设置的是每两分钟一次定时任务，查询当前时间1分钟前到6分钟前的订单，这样可以保证每个待查询订单都有两次机会被定时任务保护，防止查询时仍然是待支付等不确定结果。<br><br></li>\n<li>定时任务中也进行业务逻辑，是否会和异步通知中重复，导致业务逻辑执行两次，比如两次发货等？<br><br><br><br>可以给异步处理和定时查询的具体逻辑中加锁，作者采用的是mysql更新乐观锁，通过唯一请求号更新具体的交易状态，以update结果是否为1作为条件进行后续逻辑。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h5 id=\"1-传统做法\"><a href=\"#1-传统做法\" class=\"headerlink\" title=\"1. 传统做法\"></a>1. 传统做法</h5><p>调用第三方支付时，支付成功后通过第三方回调来获取最终的支付结果，之后处理支付成功的业务。</p>\n<h5 id=\"2-如果接不到异步通知怎么办？\"><a href=\"#2-如果接不到异步通知怎么办？\" class=\"headerlink\" title=\"2. 如果接不到异步通知怎么办？\"></a>2. 如果接不到异步通知怎么办？</h5><ul>\n<li>一般来说，第三方支付，比如支付宝，新浪支付都会提供相应的交易查询接口，用来对该笔订单的最终结果进行查询。所以，部分企业采用发起交易之后，调用第三方查询来主动查询支付结果，彻底抛弃异步通知机制，保证不会因为网络等原因丢失交易结果。</li>\n<li>但是，这种方式也存在一些问题：调用第三支付查询接口时，交易不一定结束，查询到的可能是不确定的结果，比如交易已经在第三方创建成功，但是是否交易成功的结果还没有拿到。针对这种情况，有些企业会采取创建交易后，线程睡眠1秒或2秒进行查询，但这种方式势必会导致用户不必要的等待，降低用户体验，并且，到底等几秒才是最合理的也没有定论。并且，大多数第三方支付的交易查询接口所返回的参数一般都比异步通知的参数要少，比如新浪支付在主动调用交易查询时，无法获得内部交易流失号等，这样会导致获取参数不全的问题。</li>\n<li>所以，作者采用以异步通知为主，以定时任务运行交易查询作为异步通知的辅助措施。<h5 id=\"3-具体操作\"><a href=\"#3-具体操作\" class=\"headerlink\" title=\"3. 具体操作\"></a>3. 具体操作</h5>在异步通知中处理所有的业务逻辑，包括对于必要参数的更新，以及通知订单或其他业务系统做后续的业务操作。使用分布式定时任务调度框架，添加定时查询任务，查询商户系统的流水表，对未拿到异步通知的订单主动去调用第三方查询，拿到最终的结果。作者这里使用的是XXL-JOB分布式任务调度平台。</li>\n</ul>\n<h5 id=\"4-注意事项\"><a href=\"#4-注意事项\" class=\"headerlink\" title=\"4.注意事项\"></a>4.注意事项</h5><ul>\n<li>定时任务设置多久一次，查询哪个时间段的订单？ <br><br><br>我们需要以异步通知的结果为准，所以定时任务查询的订单需要查询创建时间在当前时间一段时间之前的订单，仅作为没接到异步通知的保护措施。作者这里设置的是每两分钟一次定时任务，查询当前时间1分钟前到6分钟前的订单，这样可以保证每个待查询订单都有两次机会被定时任务保护，防止查询时仍然是待支付等不确定结果。<br><br></li>\n<li>定时任务中也进行业务逻辑，是否会和异步通知中重复，导致业务逻辑执行两次，比如两次发货等？<br><br><br><br>可以给异步处理和定时查询的具体逻辑中加锁，作者采用的是mysql更新乐观锁，通过唯一请求号更新具体的交易状态，以update结果是否为1作为条件进行后续逻辑。</li>\n</ul>\n"},{"title":"线程基础机制","date":"2020-04-18T14:22:08.000Z","_content":"\n- Daemon：线程守护。默认为false，可以在线程start前设置。\n```java\nthread.setDaemon(true);\nthread.start();\n```\n在所有非守护线程结束时，程序会杀死所有守护线程。\n\n- Sleep：Thread.sleep(millisec)会休眠当前执行线程。\n\n休眠状态可以抛出InterruptException异常;\n\n线程中需要对InterruptException进行处理，因为当前异常无法抛出到其他线程。\n\n- Yield：当前执行线程执行Thread.yield()方法代表线程礼让，可以切换其他线程执行，但是该方法只是对线程调度器进行建议，切换其他具有相同优先级的线程可以运行，但是实际哪个线程执行要看哪个线程抢占到时间片。\n\n\n- **线程中断**\n\n    - **interrupt()**：\n    \n    调用一个线程的interrupt()方法，如果该线程当前处于阻塞或有限期等待或无限期等待状态时（不包括IO阻塞和等待锁的情况），会抛出InterruptException异常，该线程不会继续往下执行，直接结束线程。\n\n    ```java\n    public class InterruptExample {\n    \n        private static class MyThread1 extends Thread {\n            @Override\n            public void run() {\n                try {\n                    Thread.sleep(2000);\n                    System.out.println(\"Thread run\");\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n    }\n    \n    public static void main(String[] args) throws InterruptedException {\n        Thread thread1 = new MyThread1();\n        thread1.start();\n        thread1.interrupt();\n        System.out.println(\"Main run\");\n    }\n    \n    // print\n    Main run\n    java.lang.InterruptedException: sleep interrupted\n        at java.lang.Thread.sleep(Native Method)\n        at InterruptExample.lambda$main$0(InterruptExample.java:5)\n        at InterruptExample$$Lambda$1/713338599.run(Unknown Source)\n        at java.lang.Thread.run(Thread.java:745)\n    \n    ```\n\n    - **interrupted()**\n    \n    如果一个线程并未处于休眠或等待状态时，其他线程调用interrupt()方法并不会让该线程抛出InterruptException异常；此时该线程调用interrupted()方法会返回true，用来标记其他线程调用了该线程的中断方法，可以根据标记决定是否结束线程执行。\n    \n    一般适用于固定时长的无限循环中。\n    \n    ```java\n    public class InterruptExample {\n\n        private static class MyThread2 extends Thread {\n            @Override\n            public void run() {\n                while (!interrupted()) {\n                    // ..\n                }\n                System.out.println(\"Thread end\");\n            }\n        }\n    }\n    \n    \n    public static void main(String[] args) throws     InterruptedException {\n        Thread thread2 = new MyThread2();\n        thread2.start();\n        thread2.interrupt();\n    }\n    \n    // print\n    Thread end\n    ```\n    \n    - **Executor的中断方法**\n    \n    直接调用executor的shutdown()方法会等待所有线程都执行完毕后关闭线程池；\n    \n    调用showdownNow()方法相当于在给每个线程执行interrupt()方法;\n    \n    ```java\n    public static void main(String[] args) {\n        ExecutorService executorService = Executors.newCachedThreadPool();\n        executorService.execute(() -> {\n            try {\n                Thread.sleep(2000);\n                System.out.println(\"Thread run\");\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n        executorService.shutdownNow();\n        System.out.println(\"Main run\");\n    }\n    \n    // print\n    // 并未执行Thread run,因为执行shutdownNow()方法相当于给该线程执行了interrupt()方法\n    Main run\n    java.lang.InterruptedException: sleep interrupted\n        at java.lang.Thread.sleep(Native Method)\n        at ExecutorInterruptExample.lambda$main$0(ExecutorInterruptExample.java:9)\n        at ExecutorInterruptExample$$Lambda$1/1160460865.run(Unknown Source)\n        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\n        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\n        at java.lang.Thread.run(Thread.java:745)\n    ```\n    \n    如果想中断线程池中某个具体线程，可以采用submit方法进行线程执行，返回Future<?>类，调用该类的cancel(true)方法来中断该线程。\n    \n    ```java\n    Future<?> future = executorService.submit(() -> {\n        // ..\n    });\n    future.cancel(true);\n    ```\n\n- 线程状态：\n    - 新建\n    - 就绪\n    - 运行\n    - 阻塞（等待获取到锁）\n    - 无限期等待：没有设置时间参数的wait, join等。\n    - 有限期等待：设置了timeout参数的wait, join等。\n    ","source":"_posts/线程基础机制.md","raw":"---\ntitle: 线程基础机制\ndate: 2020-04-18 22:22:08\ntags:\ncategories:\n- 多线程\n---\n\n- Daemon：线程守护。默认为false，可以在线程start前设置。\n```java\nthread.setDaemon(true);\nthread.start();\n```\n在所有非守护线程结束时，程序会杀死所有守护线程。\n\n- Sleep：Thread.sleep(millisec)会休眠当前执行线程。\n\n休眠状态可以抛出InterruptException异常;\n\n线程中需要对InterruptException进行处理，因为当前异常无法抛出到其他线程。\n\n- Yield：当前执行线程执行Thread.yield()方法代表线程礼让，可以切换其他线程执行，但是该方法只是对线程调度器进行建议，切换其他具有相同优先级的线程可以运行，但是实际哪个线程执行要看哪个线程抢占到时间片。\n\n\n- **线程中断**\n\n    - **interrupt()**：\n    \n    调用一个线程的interrupt()方法，如果该线程当前处于阻塞或有限期等待或无限期等待状态时（不包括IO阻塞和等待锁的情况），会抛出InterruptException异常，该线程不会继续往下执行，直接结束线程。\n\n    ```java\n    public class InterruptExample {\n    \n        private static class MyThread1 extends Thread {\n            @Override\n            public void run() {\n                try {\n                    Thread.sleep(2000);\n                    System.out.println(\"Thread run\");\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n    }\n    \n    public static void main(String[] args) throws InterruptedException {\n        Thread thread1 = new MyThread1();\n        thread1.start();\n        thread1.interrupt();\n        System.out.println(\"Main run\");\n    }\n    \n    // print\n    Main run\n    java.lang.InterruptedException: sleep interrupted\n        at java.lang.Thread.sleep(Native Method)\n        at InterruptExample.lambda$main$0(InterruptExample.java:5)\n        at InterruptExample$$Lambda$1/713338599.run(Unknown Source)\n        at java.lang.Thread.run(Thread.java:745)\n    \n    ```\n\n    - **interrupted()**\n    \n    如果一个线程并未处于休眠或等待状态时，其他线程调用interrupt()方法并不会让该线程抛出InterruptException异常；此时该线程调用interrupted()方法会返回true，用来标记其他线程调用了该线程的中断方法，可以根据标记决定是否结束线程执行。\n    \n    一般适用于固定时长的无限循环中。\n    \n    ```java\n    public class InterruptExample {\n\n        private static class MyThread2 extends Thread {\n            @Override\n            public void run() {\n                while (!interrupted()) {\n                    // ..\n                }\n                System.out.println(\"Thread end\");\n            }\n        }\n    }\n    \n    \n    public static void main(String[] args) throws     InterruptedException {\n        Thread thread2 = new MyThread2();\n        thread2.start();\n        thread2.interrupt();\n    }\n    \n    // print\n    Thread end\n    ```\n    \n    - **Executor的中断方法**\n    \n    直接调用executor的shutdown()方法会等待所有线程都执行完毕后关闭线程池；\n    \n    调用showdownNow()方法相当于在给每个线程执行interrupt()方法;\n    \n    ```java\n    public static void main(String[] args) {\n        ExecutorService executorService = Executors.newCachedThreadPool();\n        executorService.execute(() -> {\n            try {\n                Thread.sleep(2000);\n                System.out.println(\"Thread run\");\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n        executorService.shutdownNow();\n        System.out.println(\"Main run\");\n    }\n    \n    // print\n    // 并未执行Thread run,因为执行shutdownNow()方法相当于给该线程执行了interrupt()方法\n    Main run\n    java.lang.InterruptedException: sleep interrupted\n        at java.lang.Thread.sleep(Native Method)\n        at ExecutorInterruptExample.lambda$main$0(ExecutorInterruptExample.java:9)\n        at ExecutorInterruptExample$$Lambda$1/1160460865.run(Unknown Source)\n        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\n        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\n        at java.lang.Thread.run(Thread.java:745)\n    ```\n    \n    如果想中断线程池中某个具体线程，可以采用submit方法进行线程执行，返回Future<?>类，调用该类的cancel(true)方法来中断该线程。\n    \n    ```java\n    Future<?> future = executorService.submit(() -> {\n        // ..\n    });\n    future.cancel(true);\n    ```\n\n- 线程状态：\n    - 新建\n    - 就绪\n    - 运行\n    - 阻塞（等待获取到锁）\n    - 无限期等待：没有设置时间参数的wait, join等。\n    - 有限期等待：设置了timeout参数的wait, join等。\n    ","slug":"线程基础机制","published":1,"updated":"2020-08-23T12:12:45.468Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cke72eeg3000xdfse5d2ag4re","content":"<ul>\n<li><p>Daemon：线程守护。默认为false，可以在线程start前设置。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">thread.setDaemon(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">thread.start();</span><br></pre></td></tr></table></figure>\n<p>在所有非守护线程结束时，程序会杀死所有守护线程。</p>\n</li>\n<li><p>Sleep：Thread.sleep(millisec)会休眠当前执行线程。</p>\n</li>\n</ul>\n<p>休眠状态可以抛出InterruptException异常;</p>\n<p>线程中需要对InterruptException进行处理，因为当前异常无法抛出到其他线程。</p>\n<ul>\n<li>Yield：当前执行线程执行Thread.yield()方法代表线程礼让，可以切换其他线程执行，但是该方法只是对线程调度器进行建议，切换其他具有相同优先级的线程可以运行，但是实际哪个线程执行要看哪个线程抢占到时间片。</li>\n</ul>\n<ul>\n<li><p><strong>线程中断</strong></p>\n<ul>\n<li><p>**interrupt()**：</p>\n<p>调用一个线程的interrupt()方法，如果该线程当前处于阻塞或有限期等待或无限期等待状态时（不包括IO阻塞和等待锁的情况），会抛出InterruptException异常，该线程不会继续往下执行，直接结束线程。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InterruptExample</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyThread1</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                Thread.sleep(<span class=\"number\">2000</span>);</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;Thread run&quot;</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">    Thread thread1 = <span class=\"keyword\">new</span> MyThread1();</span><br><span class=\"line\">    thread1.start();</span><br><span class=\"line\">    thread1.interrupt();</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;Main run&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// print</span></span><br><span class=\"line\">Main run</span><br><span class=\"line\">java.lang.InterruptedException: sleep interrupted</span><br><span class=\"line\">    at java.lang.Thread.sleep(Native Method)</span><br><span class=\"line\">    at InterruptExample.lambda$main$<span class=\"number\">0</span>(InterruptExample.java:<span class=\"number\">5</span>)</span><br><span class=\"line\">    at InterruptExample$$Lambda$<span class=\"number\">1</span>/<span class=\"number\">713338599.</span>run(Unknown Source)</span><br><span class=\"line\">    at java.lang.Thread.run(Thread.java:<span class=\"number\">745</span>)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>interrupted()</strong></p>\n<p>如果一个线程并未处于休眠或等待状态时，其他线程调用interrupt()方法并不会让该线程抛出InterruptException异常；此时该线程调用interrupted()方法会返回true，用来标记其他线程调用了该线程的中断方法，可以根据标记决定是否结束线程执行。</p>\n<p>一般适用于固定时长的无限循环中。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InterruptExample</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyThread2</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (!interrupted()) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// ..</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;Thread end&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span>     InterruptedException </span>&#123;</span><br><span class=\"line\">    Thread thread2 = <span class=\"keyword\">new</span> MyThread2();</span><br><span class=\"line\">    thread2.start();</span><br><span class=\"line\">    thread2.interrupt();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// print</span></span><br><span class=\"line\">Thread end</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>Executor的中断方法</strong></p>\n<p>直接调用executor的shutdown()方法会等待所有线程都执行完毕后关闭线程池；</p>\n<p>调用showdownNow()方法相当于在给每个线程执行interrupt()方法;</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    ExecutorService executorService = Executors.newCachedThreadPool();</span><br><span class=\"line\">    executorService.execute(() -&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Thread.sleep(<span class=\"number\">2000</span>);</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;Thread run&quot;</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    executorService.shutdownNow();</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;Main run&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// print</span></span><br><span class=\"line\"><span class=\"comment\">// 并未执行Thread run,因为执行shutdownNow()方法相当于给该线程执行了interrupt()方法</span></span><br><span class=\"line\">Main run</span><br><span class=\"line\">java.lang.InterruptedException: sleep interrupted</span><br><span class=\"line\">    at java.lang.Thread.sleep(Native Method)</span><br><span class=\"line\">    at ExecutorInterruptExample.lambda$main$<span class=\"number\">0</span>(ExecutorInterruptExample.java:<span class=\"number\">9</span>)</span><br><span class=\"line\">    at ExecutorInterruptExample$$Lambda$<span class=\"number\">1</span>/<span class=\"number\">1160460865.</span>run(Unknown Source)</span><br><span class=\"line\">    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:<span class=\"number\">1142</span>)</span><br><span class=\"line\">    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:<span class=\"number\">617</span>)</span><br><span class=\"line\">    at java.lang.Thread.run(Thread.java:<span class=\"number\">745</span>)</span><br></pre></td></tr></table></figure>\n\n<p>如果想中断线程池中某个具体线程，可以采用submit方法进行线程执行，返回Future&lt;?&gt;类，调用该类的cancel(true)方法来中断该线程。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Future&lt;?&gt; future = executorService.submit(() -&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ..</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">future.cancel(<span class=\"keyword\">true</span>);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>线程状态：</p>\n<ul>\n<li>新建</li>\n<li>就绪</li>\n<li>运行</li>\n<li>阻塞（等待获取到锁）</li>\n<li>无限期等待：没有设置时间参数的wait, join等。</li>\n<li>有限期等待：设置了timeout参数的wait, join等。</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li><p>Daemon：线程守护。默认为false，可以在线程start前设置。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">thread.setDaemon(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">thread.start();</span><br></pre></td></tr></table></figure>\n<p>在所有非守护线程结束时，程序会杀死所有守护线程。</p>\n</li>\n<li><p>Sleep：Thread.sleep(millisec)会休眠当前执行线程。</p>\n</li>\n</ul>\n<p>休眠状态可以抛出InterruptException异常;</p>\n<p>线程中需要对InterruptException进行处理，因为当前异常无法抛出到其他线程。</p>\n<ul>\n<li>Yield：当前执行线程执行Thread.yield()方法代表线程礼让，可以切换其他线程执行，但是该方法只是对线程调度器进行建议，切换其他具有相同优先级的线程可以运行，但是实际哪个线程执行要看哪个线程抢占到时间片。</li>\n</ul>\n<ul>\n<li><p><strong>线程中断</strong></p>\n<ul>\n<li><p>**interrupt()**：</p>\n<p>调用一个线程的interrupt()方法，如果该线程当前处于阻塞或有限期等待或无限期等待状态时（不包括IO阻塞和等待锁的情况），会抛出InterruptException异常，该线程不会继续往下执行，直接结束线程。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InterruptExample</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyThread1</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                Thread.sleep(<span class=\"number\">2000</span>);</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;Thread run&quot;</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">    Thread thread1 = <span class=\"keyword\">new</span> MyThread1();</span><br><span class=\"line\">    thread1.start();</span><br><span class=\"line\">    thread1.interrupt();</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;Main run&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// print</span></span><br><span class=\"line\">Main run</span><br><span class=\"line\">java.lang.InterruptedException: sleep interrupted</span><br><span class=\"line\">    at java.lang.Thread.sleep(Native Method)</span><br><span class=\"line\">    at InterruptExample.lambda$main$<span class=\"number\">0</span>(InterruptExample.java:<span class=\"number\">5</span>)</span><br><span class=\"line\">    at InterruptExample$$Lambda$<span class=\"number\">1</span>/<span class=\"number\">713338599.</span>run(Unknown Source)</span><br><span class=\"line\">    at java.lang.Thread.run(Thread.java:<span class=\"number\">745</span>)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>interrupted()</strong></p>\n<p>如果一个线程并未处于休眠或等待状态时，其他线程调用interrupt()方法并不会让该线程抛出InterruptException异常；此时该线程调用interrupted()方法会返回true，用来标记其他线程调用了该线程的中断方法，可以根据标记决定是否结束线程执行。</p>\n<p>一般适用于固定时长的无限循环中。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InterruptExample</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyThread2</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (!interrupted()) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// ..</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;Thread end&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span>     InterruptedException </span>&#123;</span><br><span class=\"line\">    Thread thread2 = <span class=\"keyword\">new</span> MyThread2();</span><br><span class=\"line\">    thread2.start();</span><br><span class=\"line\">    thread2.interrupt();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// print</span></span><br><span class=\"line\">Thread end</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>Executor的中断方法</strong></p>\n<p>直接调用executor的shutdown()方法会等待所有线程都执行完毕后关闭线程池；</p>\n<p>调用showdownNow()方法相当于在给每个线程执行interrupt()方法;</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    ExecutorService executorService = Executors.newCachedThreadPool();</span><br><span class=\"line\">    executorService.execute(() -&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Thread.sleep(<span class=\"number\">2000</span>);</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;Thread run&quot;</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    executorService.shutdownNow();</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;Main run&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// print</span></span><br><span class=\"line\"><span class=\"comment\">// 并未执行Thread run,因为执行shutdownNow()方法相当于给该线程执行了interrupt()方法</span></span><br><span class=\"line\">Main run</span><br><span class=\"line\">java.lang.InterruptedException: sleep interrupted</span><br><span class=\"line\">    at java.lang.Thread.sleep(Native Method)</span><br><span class=\"line\">    at ExecutorInterruptExample.lambda$main$<span class=\"number\">0</span>(ExecutorInterruptExample.java:<span class=\"number\">9</span>)</span><br><span class=\"line\">    at ExecutorInterruptExample$$Lambda$<span class=\"number\">1</span>/<span class=\"number\">1160460865.</span>run(Unknown Source)</span><br><span class=\"line\">    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:<span class=\"number\">1142</span>)</span><br><span class=\"line\">    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:<span class=\"number\">617</span>)</span><br><span class=\"line\">    at java.lang.Thread.run(Thread.java:<span class=\"number\">745</span>)</span><br></pre></td></tr></table></figure>\n\n<p>如果想中断线程池中某个具体线程，可以采用submit方法进行线程执行，返回Future&lt;?&gt;类，调用该类的cancel(true)方法来中断该线程。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Future&lt;?&gt; future = executorService.submit(() -&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ..</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">future.cancel(<span class=\"keyword\">true</span>);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>线程状态：</p>\n<ul>\n<li>新建</li>\n<li>就绪</li>\n<li>运行</li>\n<li>阻塞（等待获取到锁）</li>\n<li>无限期等待：没有设置时间参数的wait, join等。</li>\n<li>有限期等待：设置了timeout参数的wait, join等。</li>\n</ul>\n</li>\n</ul>\n"},{"title":"线程间同步与协作","date":"2020-05-06T13:17:22.000Z","_content":"\n##### 同步互斥\n\n- sychnorized:\n\n    - 同步代码块：\n    ```java\n    public void func() {\n        sychnorized(this) {\n            // ...    \n        }\n    }\n    ```\n    上面的代码作用于**同一个对象**执行该方法的同步代码块时，会进行串行操作。\n    \n    - 同步方法\n    ```java\n    public sychnorized void func() {\n        // ...\n    }\n    ```\n    和同步代码块一样，作用于同一个对象。\n    \n    - 同步类\n    ```java\n    public class SynchronizedExample {\n        \n        public void func() {\n            sychnorized(SynchronizedExample.class) {\n                // ...\n            }\n        }\n    }\n    ```\n    上面的同步代码块作用于整个类。\n    \n    - 同步静态方法\n    ```java\n    public sychnorized static void func() {\n        // ...\n    }\n    ```\n    作用于整个类。\n    \n- ReentrantLock\n\n```java\npublic class LockExample {\n\n    private Lock lock = new ReentrantLock();\n\n    public void func() {\n        lock.lock();\n        try {\n            for (int i = 0; i < 10; i++) {\n                System.out.print(i + \" \");\n            }\n        } finally {\n            lock.unlock(); // 确保释放锁，从而避免发生死锁。\n        }\n    }\n}\n```\n\n\n- 比较\n\n    - 实现：synchronized是由实现的功能，ReentrantLock是jdk实现的。\n    \n    - 性能：新版本的synchronized性能进行了优化，加入了自旋锁等功能，性能和ReentrantLock差不多。\n    \n    - 等待可中断：synchronized在等待锁的过程中不可中断，ReentrantLock可中断。\n    \n    - 公平锁：sychronized是非公平锁，ReentrantLock默认是非公平锁，也可以设置成按照申请锁的时间来获取锁的公平锁。\n    \n    - 支持绑定多个条件：ReentrantLock支持绑定多个Condition。\n    \n    - 选择：如果不需要使用ReentrantLock的高级功能，建议使用synchronized，防止在jdk版本发生变化时带来的困扰，或者忘记释放锁。\n\n##### 协作\n\n- join：在一个线程中调用另一个线程的join方法，会等待另一个线程执行完毕后再执行该线程的后续方法。\n- wait() notify() notifyAll():\n\n    - 调用wait()方法使当前线程挂起，并释放持有的锁；当其他线程运行到满足这个线程唤醒的条件时，会调用\n    notify()或者notifyAll()方法来唤醒被挂起的线程。\n    \n    - 这三个方法属于Object类的方法，不属于Thread；\n    \n    - 只能在同步代码块或同步方法中使用，否则会抛出IllegalMonitorStateException。\n\n    ```java\n    public class WaitNotifyExample {\n    \n        public synchronized void before() {\n            System.out.println(\"before\");\n            notifyAll();\n        }\n    \n        public synchronized void after() {\n            try {\n                wait();\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n            System.out.println(\"after\");\n        }\n    }\n    \n    \n    public static void main(String[] args) {\n        ExecutorService executorService = Executors.newCachedThreadPool();\n        WaitNotifyExample example = new WaitNotifyExample();\n        executorService.execute(() -> example.after());\n        executorService.execute(() -> example.before());\n    }\n    \n    // print\n    before\n    after\n    \n    ```\n    \n    - wait()和sleep()的区别：\n    \n        - wait()是Object的方法，sleep()是Thread的方法;\n        - wait()会释放锁，sleep()不会。\n        \n- await() signal() signalAll()\n\nJ.U.C包中Condition类提供的方法，粒度更细。\n\n```java\npublic class AwaitSignalExample {\n\n    private Lock lock = new ReentrantLock();\n    private Condition condition = lock.newCondition();\n\n    public void before() {\n        lock.lock();\n        try {\n            System.out.println(\"before\");\n            condition.signalAll();\n        } finally {\n            lock.unlock();\n        }\n    }\n\n    public void after() {\n        lock.lock();\n        try {\n            condition.await();\n            System.out.println(\"after\");\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        } finally {\n            lock.unlock();\n        }\n    }\n}\n\n\npublic static void main(String[] args) {\n    ExecutorService executorService = Executors.newCachedThreadPool();\n    AwaitSignalExample example = new AwaitSignalExample();\n    executorService.execute(() -> example.after());\n    executorService.execute(() -> example.before());\n}\n\n\n// print\nbefore\nafter\n\n\n```\n\n","source":"_posts/线程间同步与协作.md","raw":"---\ntitle: 线程间同步与协作\ndate: 2020-05-06 21:17:22\ntags:\ncategories:\n- 多线程\n---\n\n##### 同步互斥\n\n- sychnorized:\n\n    - 同步代码块：\n    ```java\n    public void func() {\n        sychnorized(this) {\n            // ...    \n        }\n    }\n    ```\n    上面的代码作用于**同一个对象**执行该方法的同步代码块时，会进行串行操作。\n    \n    - 同步方法\n    ```java\n    public sychnorized void func() {\n        // ...\n    }\n    ```\n    和同步代码块一样，作用于同一个对象。\n    \n    - 同步类\n    ```java\n    public class SynchronizedExample {\n        \n        public void func() {\n            sychnorized(SynchronizedExample.class) {\n                // ...\n            }\n        }\n    }\n    ```\n    上面的同步代码块作用于整个类。\n    \n    - 同步静态方法\n    ```java\n    public sychnorized static void func() {\n        // ...\n    }\n    ```\n    作用于整个类。\n    \n- ReentrantLock\n\n```java\npublic class LockExample {\n\n    private Lock lock = new ReentrantLock();\n\n    public void func() {\n        lock.lock();\n        try {\n            for (int i = 0; i < 10; i++) {\n                System.out.print(i + \" \");\n            }\n        } finally {\n            lock.unlock(); // 确保释放锁，从而避免发生死锁。\n        }\n    }\n}\n```\n\n\n- 比较\n\n    - 实现：synchronized是由实现的功能，ReentrantLock是jdk实现的。\n    \n    - 性能：新版本的synchronized性能进行了优化，加入了自旋锁等功能，性能和ReentrantLock差不多。\n    \n    - 等待可中断：synchronized在等待锁的过程中不可中断，ReentrantLock可中断。\n    \n    - 公平锁：sychronized是非公平锁，ReentrantLock默认是非公平锁，也可以设置成按照申请锁的时间来获取锁的公平锁。\n    \n    - 支持绑定多个条件：ReentrantLock支持绑定多个Condition。\n    \n    - 选择：如果不需要使用ReentrantLock的高级功能，建议使用synchronized，防止在jdk版本发生变化时带来的困扰，或者忘记释放锁。\n\n##### 协作\n\n- join：在一个线程中调用另一个线程的join方法，会等待另一个线程执行完毕后再执行该线程的后续方法。\n- wait() notify() notifyAll():\n\n    - 调用wait()方法使当前线程挂起，并释放持有的锁；当其他线程运行到满足这个线程唤醒的条件时，会调用\n    notify()或者notifyAll()方法来唤醒被挂起的线程。\n    \n    - 这三个方法属于Object类的方法，不属于Thread；\n    \n    - 只能在同步代码块或同步方法中使用，否则会抛出IllegalMonitorStateException。\n\n    ```java\n    public class WaitNotifyExample {\n    \n        public synchronized void before() {\n            System.out.println(\"before\");\n            notifyAll();\n        }\n    \n        public synchronized void after() {\n            try {\n                wait();\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n            System.out.println(\"after\");\n        }\n    }\n    \n    \n    public static void main(String[] args) {\n        ExecutorService executorService = Executors.newCachedThreadPool();\n        WaitNotifyExample example = new WaitNotifyExample();\n        executorService.execute(() -> example.after());\n        executorService.execute(() -> example.before());\n    }\n    \n    // print\n    before\n    after\n    \n    ```\n    \n    - wait()和sleep()的区别：\n    \n        - wait()是Object的方法，sleep()是Thread的方法;\n        - wait()会释放锁，sleep()不会。\n        \n- await() signal() signalAll()\n\nJ.U.C包中Condition类提供的方法，粒度更细。\n\n```java\npublic class AwaitSignalExample {\n\n    private Lock lock = new ReentrantLock();\n    private Condition condition = lock.newCondition();\n\n    public void before() {\n        lock.lock();\n        try {\n            System.out.println(\"before\");\n            condition.signalAll();\n        } finally {\n            lock.unlock();\n        }\n    }\n\n    public void after() {\n        lock.lock();\n        try {\n            condition.await();\n            System.out.println(\"after\");\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        } finally {\n            lock.unlock();\n        }\n    }\n}\n\n\npublic static void main(String[] args) {\n    ExecutorService executorService = Executors.newCachedThreadPool();\n    AwaitSignalExample example = new AwaitSignalExample();\n    executorService.execute(() -> example.after());\n    executorService.execute(() -> example.before());\n}\n\n\n// print\nbefore\nafter\n\n\n```\n\n","slug":"线程间同步与协作","published":1,"updated":"2020-08-23T12:12:39.858Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cke72eeg4000ydfseb6542il2","content":"<h5 id=\"同步互斥\"><a href=\"#同步互斥\" class=\"headerlink\" title=\"同步互斥\"></a>同步互斥</h5><ul>\n<li><p>sychnorized:</p>\n<ul>\n<li><p>同步代码块：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">func</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    sychnorized(<span class=\"keyword\">this</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// ...    </span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面的代码作用于<strong>同一个对象</strong>执行该方法的同步代码块时，会进行串行操作。</p>\n</li>\n<li><p>同步方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> sychnorized <span class=\"keyword\">void</span> <span class=\"title\">func</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>和同步代码块一样，作用于同一个对象。</p>\n</li>\n<li><p>同步类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SynchronizedExample</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">func</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        sychnorized(SynchronizedExample.class) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// ...</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面的同步代码块作用于整个类。</p>\n</li>\n<li><p>同步静态方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> sychnorized <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">func</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>作用于整个类。</p>\n</li>\n</ul>\n</li>\n<li><p>ReentrantLock</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LockExample</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Lock lock = <span class=\"keyword\">new</span> ReentrantLock();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">func</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        lock.lock();</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">                System.out.print(i + <span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            lock.unlock(); <span class=\"comment\">// 确保释放锁，从而避免发生死锁。</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<ul>\n<li><p>比较</p>\n<ul>\n<li><p>实现：synchronized是由实现的功能，ReentrantLock是jdk实现的。</p>\n</li>\n<li><p>性能：新版本的synchronized性能进行了优化，加入了自旋锁等功能，性能和ReentrantLock差不多。</p>\n</li>\n<li><p>等待可中断：synchronized在等待锁的过程中不可中断，ReentrantLock可中断。</p>\n</li>\n<li><p>公平锁：sychronized是非公平锁，ReentrantLock默认是非公平锁，也可以设置成按照申请锁的时间来获取锁的公平锁。</p>\n</li>\n<li><p>支持绑定多个条件：ReentrantLock支持绑定多个Condition。</p>\n</li>\n<li><p>选择：如果不需要使用ReentrantLock的高级功能，建议使用synchronized，防止在jdk版本发生变化时带来的困扰，或者忘记释放锁。</p>\n</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"协作\"><a href=\"#协作\" class=\"headerlink\" title=\"协作\"></a>协作</h5><ul>\n<li><p>join：在一个线程中调用另一个线程的join方法，会等待另一个线程执行完毕后再执行该线程的后续方法。</p>\n</li>\n<li><p>wait() notify() notifyAll():</p>\n<ul>\n<li><p>调用wait()方法使当前线程挂起，并释放持有的锁；当其他线程运行到满足这个线程唤醒的条件时，会调用<br>notify()或者notifyAll()方法来唤醒被挂起的线程。</p>\n</li>\n<li><p>这三个方法属于Object类的方法，不属于Thread；</p>\n</li>\n<li><p>只能在同步代码块或同步方法中使用，否则会抛出IllegalMonitorStateException。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WaitNotifyExample</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">before</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;before&quot;</span>);</span><br><span class=\"line\">        notifyAll();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">after</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            wait();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;after&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    ExecutorService executorService = Executors.newCachedThreadPool();</span><br><span class=\"line\">    WaitNotifyExample example = <span class=\"keyword\">new</span> WaitNotifyExample();</span><br><span class=\"line\">    executorService.execute(() -&gt; example.after());</span><br><span class=\"line\">    executorService.execute(() -&gt; example.before());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// print</span></span><br><span class=\"line\">before</span><br><span class=\"line\">after</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>wait()和sleep()的区别：</p>\n<ul>\n<li>wait()是Object的方法，sleep()是Thread的方法;</li>\n<li>wait()会释放锁，sleep()不会。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>await() signal() signalAll()</p>\n</li>\n</ul>\n<p>J.U.C包中Condition类提供的方法，粒度更细。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AwaitSignalExample</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Lock lock = <span class=\"keyword\">new</span> ReentrantLock();</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Condition condition = lock.newCondition();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">before</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        lock.lock();</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;before&quot;</span>);</span><br><span class=\"line\">            condition.signalAll();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            lock.unlock();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">after</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        lock.lock();</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            condition.await();</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;after&quot;</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            lock.unlock();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    ExecutorService executorService = Executors.newCachedThreadPool();</span><br><span class=\"line\">    AwaitSignalExample example = <span class=\"keyword\">new</span> AwaitSignalExample();</span><br><span class=\"line\">    executorService.execute(() -&gt; example.after());</span><br><span class=\"line\">    executorService.execute(() -&gt; example.before());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// print</span></span><br><span class=\"line\">before</span><br><span class=\"line\">after</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h5 id=\"同步互斥\"><a href=\"#同步互斥\" class=\"headerlink\" title=\"同步互斥\"></a>同步互斥</h5><ul>\n<li><p>sychnorized:</p>\n<ul>\n<li><p>同步代码块：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">func</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    sychnorized(<span class=\"keyword\">this</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// ...    </span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面的代码作用于<strong>同一个对象</strong>执行该方法的同步代码块时，会进行串行操作。</p>\n</li>\n<li><p>同步方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> sychnorized <span class=\"keyword\">void</span> <span class=\"title\">func</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>和同步代码块一样，作用于同一个对象。</p>\n</li>\n<li><p>同步类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SynchronizedExample</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">func</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        sychnorized(SynchronizedExample.class) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// ...</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面的同步代码块作用于整个类。</p>\n</li>\n<li><p>同步静态方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> sychnorized <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">func</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>作用于整个类。</p>\n</li>\n</ul>\n</li>\n<li><p>ReentrantLock</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LockExample</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Lock lock = <span class=\"keyword\">new</span> ReentrantLock();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">func</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        lock.lock();</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">                System.out.print(i + <span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            lock.unlock(); <span class=\"comment\">// 确保释放锁，从而避免发生死锁。</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<ul>\n<li><p>比较</p>\n<ul>\n<li><p>实现：synchronized是由实现的功能，ReentrantLock是jdk实现的。</p>\n</li>\n<li><p>性能：新版本的synchronized性能进行了优化，加入了自旋锁等功能，性能和ReentrantLock差不多。</p>\n</li>\n<li><p>等待可中断：synchronized在等待锁的过程中不可中断，ReentrantLock可中断。</p>\n</li>\n<li><p>公平锁：sychronized是非公平锁，ReentrantLock默认是非公平锁，也可以设置成按照申请锁的时间来获取锁的公平锁。</p>\n</li>\n<li><p>支持绑定多个条件：ReentrantLock支持绑定多个Condition。</p>\n</li>\n<li><p>选择：如果不需要使用ReentrantLock的高级功能，建议使用synchronized，防止在jdk版本发生变化时带来的困扰，或者忘记释放锁。</p>\n</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"协作\"><a href=\"#协作\" class=\"headerlink\" title=\"协作\"></a>协作</h5><ul>\n<li><p>join：在一个线程中调用另一个线程的join方法，会等待另一个线程执行完毕后再执行该线程的后续方法。</p>\n</li>\n<li><p>wait() notify() notifyAll():</p>\n<ul>\n<li><p>调用wait()方法使当前线程挂起，并释放持有的锁；当其他线程运行到满足这个线程唤醒的条件时，会调用<br>notify()或者notifyAll()方法来唤醒被挂起的线程。</p>\n</li>\n<li><p>这三个方法属于Object类的方法，不属于Thread；</p>\n</li>\n<li><p>只能在同步代码块或同步方法中使用，否则会抛出IllegalMonitorStateException。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WaitNotifyExample</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">before</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;before&quot;</span>);</span><br><span class=\"line\">        notifyAll();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">after</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            wait();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;after&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    ExecutorService executorService = Executors.newCachedThreadPool();</span><br><span class=\"line\">    WaitNotifyExample example = <span class=\"keyword\">new</span> WaitNotifyExample();</span><br><span class=\"line\">    executorService.execute(() -&gt; example.after());</span><br><span class=\"line\">    executorService.execute(() -&gt; example.before());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// print</span></span><br><span class=\"line\">before</span><br><span class=\"line\">after</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>wait()和sleep()的区别：</p>\n<ul>\n<li>wait()是Object的方法，sleep()是Thread的方法;</li>\n<li>wait()会释放锁，sleep()不会。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>await() signal() signalAll()</p>\n</li>\n</ul>\n<p>J.U.C包中Condition类提供的方法，粒度更细。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AwaitSignalExample</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Lock lock = <span class=\"keyword\">new</span> ReentrantLock();</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Condition condition = lock.newCondition();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">before</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        lock.lock();</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;before&quot;</span>);</span><br><span class=\"line\">            condition.signalAll();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            lock.unlock();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">after</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        lock.lock();</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            condition.await();</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;after&quot;</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            lock.unlock();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    ExecutorService executorService = Executors.newCachedThreadPool();</span><br><span class=\"line\">    AwaitSignalExample example = <span class=\"keyword\">new</span> AwaitSignalExample();</span><br><span class=\"line\">    executorService.execute(() -&gt; example.after());</span><br><span class=\"line\">    executorService.execute(() -&gt; example.before());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// print</span></span><br><span class=\"line\">before</span><br><span class=\"line\">after</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cke72eefp0005dfse49ofg177","category_id":"cke72eefm0003dfsefmi3c7fg","_id":"cke72eefs000adfsehbc79z16"},{"post_id":"cke72eefi0001dfseh8kb7jnp","category_id":"cke72eefm0003dfsefmi3c7fg","_id":"cke72eefu000ddfsebs4qfc00"},{"post_id":"cke72eefl0002dfse6pskdw71","category_id":"cke72eefq0007dfse02qf081k","_id":"cke72eefw000gdfse4v5oha3z"},{"post_id":"cke72eefo0004dfse0u89f87r","category_id":"cke72eefm0003dfsefmi3c7fg","_id":"cke72eefy000jdfsebm7yagq7"},{"post_id":"cke72eefq0006dfseda2dcbh5","category_id":"cke72eefw000fdfsehxj436o1","_id":"cke72eeg0000ndfsebeln5gjl"},{"post_id":"cke72eefr0008dfse3zdohk57","category_id":"cke72eefy000kdfseb1j3dckk","_id":"cke72eeg2000sdfsefsw00pdi"},{"post_id":"cke72eefs0009dfse13l017zr","category_id":"cke72eefw000fdfsehxj436o1","_id":"cke72eeg3000wdfse24qc4o41"},{"post_id":"cke72eefu000cdfsehizbhp9z","category_id":"cke72eefw000fdfsehxj436o1","_id":"cke72eeg50010dfse8esu2ef2"},{"post_id":"cke72eeg3000xdfse5d2ag4re","category_id":"cke72eefq0007dfse02qf081k","_id":"cke72eeg50011dfse3z947io1"},{"post_id":"cke72eefv000edfsebk97drcy","category_id":"cke72eefw000fdfsehxj436o1","_id":"cke72eeg60012dfse0jficvq6"},{"post_id":"cke72eeg4000ydfseb6542il2","category_id":"cke72eefq0007dfse02qf081k","_id":"cke72eeg60014dfsedjpnf1tb"},{"post_id":"cke72eefw000hdfsebsw05sgx","category_id":"cke72eeg5000zdfseabye1vyt","_id":"cke72eeg60016dfse2x0i5uw4"},{"post_id":"cke72eefx000idfsefqsma5nx","category_id":"cke72eeg5000zdfseabye1vyt","_id":"cke72eeg70017dfsechtm59qd"},{"post_id":"cke72eefy000ldfse6ww11288","category_id":"cke72eeg60015dfseh88b5zwq","_id":"cke72eeg7001adfse19tc2wfp"},{"post_id":"cke72eefz000mdfsecne01e8m","category_id":"cke72eeg5000zdfseabye1vyt","_id":"cke72eeg8001cdfse68duexlv"},{"post_id":"cke72eeg0000pdfsea83o84hp","category_id":"cke72eeg60015dfseh88b5zwq","_id":"cke72eeg8001ddfse47v54hr5"},{"post_id":"cke72eeg2000udfse5w84gsyj","category_id":"cke72eeg9001fdfse4s4y3qy9","_id":"cke72eeg9001hdfse6bb43xan"},{"post_id":"cke72eeg1000qdfse1smdahd0","category_id":"cke72eeg8001bdfsee53tbysr","_id":"cke72eega001jdfse119nddcu"},{"post_id":"cke72eeg1000qdfse1smdahd0","category_id":"cke72eeg9001gdfse6mfv8kf8","_id":"cke72eega001kdfse8j6nh4iq"},{"post_id":"cke72eeg2000tdfse6tfraack","category_id":"cke72eeg8001bdfsee53tbysr","_id":"cke72eega001ldfsegrah75xt"},{"post_id":"cke72eeg2000tdfse6tfraack","category_id":"cke72eeg9001gdfse6mfv8kf8","_id":"cke72eega001mdfseau2xg041"}],"PostTag":[],"Tag":[]}}